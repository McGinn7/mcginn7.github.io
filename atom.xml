<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mcginn&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mcginn7.github.io/"/>
  <updated>2019-07-22T04:09:09.000Z</updated>
  <id>http://mcginn7.github.io/</id>
  
  <author>
    <name>Mcginn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>B-Tree</title>
    <link href="http://mcginn7.github.io/2019/07/22/B-Tree/"/>
    <id>http://mcginn7.github.io/2019/07/22/B-Tree/</id>
    <published>2019-07-22T04:05:58.000Z</published>
    <updated>2019-07-22T04:09:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>简单来说，B-Tree 是针对<strong>大数据存取</strong>的平衡树，考虑了<strong>磁盘读取</strong>对查找效率的影响。</p><p>B-Tree 的主要思想是通过<strong>减少磁盘读取次数</strong>来提高数据存取性能，而磁盘读取次数与<strong>树高</strong>相关。故B-Tree 允许每个节点拥有多于 2 个的子节点来减小树高。</p><p>与二叉平衡树类似，B-Tree 中的每个节点存储若干键值（keys）以及子节点地址。</p><img src="/2019/07/22/B-Tree/struct.png"><center>图 1. B-Tree 结构图</center><h2 id="定义和性质"><a href="#定义和性质" class="headerlink" title="定义和性质"></a>定义和性质</h2><p><strong>阶（order）</strong>：将子节点的允许最大数量定义为阶，如图 1 为 5 阶树。</p><p>$m$ 阶的 B-Tree 满足以下定义：</p><ol><li>每个节点最多能有 $m$ 个子节点。</li><li>每个内部节点至少有 $\lceil \frac m2\rceil$ 个子节点，内部节点（Internal nodes）为除根节点和叶节点以外的节点。</li><li>拥有 $k+1$ 个子节点的非叶节点存有 $k$ 个键值。</li><li>每个节点中的键值按<strong>递增</strong>排序。</li><li>所有的叶节点高度一样。</li></ol><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>对于平衡🌳的操作主要就是<strong>插入（Insertion）</strong>和<strong>删除（Deletion）</strong>。</p><p>以下操作均<strong>基于键值两两不同的假设</strong>进行讨论，同时键值的<strong>数量范围</strong>定义为 $[d, 2d]$，阶 $m=2d+1$。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>首先找到键值归属的<strong>叶节点</strong>，插入到该节点中，节点的键值数量可能超过上限 $2d$，即当前键值数量为 $2d+1$。</p><p>此时用<strong>中位数</strong>将该节点划分成两个新的节点，每个新节点含有 $d$ 个键值，如图 2 所示。</p><p>之后将键值中位数插入到父节点中，父节点的键值数量 +1，也有可能超上限，故需要<strong>迭代</strong>更新。</p><img src="/2019/07/22/B-Tree/split.png"><center>图 2. 节点分裂</center><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h4><p>将内部节点中的删除操作转移至叶节点中，然后自下而上重新平衡，达到键值数量要求。</p><h4 id="叶节点"><a href="#叶节点" class="headerlink" title="叶节点"></a>叶节点</h4><p>直接将对应的键值删除即可。</p><h4 id="内部节点"><a href="#内部节点" class="headerlink" title="内部节点"></a>内部节点</h4><p>假设当前删除键值为 $k$，则 $k$  的前继 $prev(k)$ 为左子树中的最大键值，后继 $succ(k)$ 为右子树中的最小键值。</p><p>$prev(k)$ 和 $succ(k)$ 均可替代 $k$ 作为分割左、右子树的新键值，同时这两个键值必然在叶节点中，进而将删除操作转移到叶节点中。</p><h4 id="重平衡"><a href="#重平衡" class="headerlink" title="重平衡"></a>重平衡</h4><p>在叶节点删除键值后可能出现键值数量为 $d-1$ 导致下溢出。此时通过转移<strong>兄弟节点</strong>的键值来完成键值补充，主要分两种情况：</p><ol><li><p><strong>合并</strong>：当前节点的左、右兄弟节点均只有 $d$ 个键值，此时可与其中一个兄弟节点及父节点中的分割键值合并，新节点的键值数量为 $2d$，相当于节点分裂的逆操作。此时父节点的键值数量减 1，需要<strong>迭代</strong>重平衡。</p><img src="/2019/07/22/B-Tree/merge.png"><center>图 3. 节点合并</center></li><li><p><strong>旋转</strong>：假设右兄弟节点的键值大于 $d$ 个（左兄弟同理），将父节点的分割键值插入到当前节点中，右兄弟节点的第 1 个键值插入到父节点中。此时当前节点、兄弟节点和父节点的键值数量均满足键值数量要求，完成平衡操作。</p><img src="/2019/07/22/B-Tree/rotate.png"><center>图 4. 旋转操作</center></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://en.wikipedia.org/wiki/B-tree" target="_blank" rel="noopener">wikipeadia</a></li><li><a href="https://www.geeksforgeeks.org/b-tree-set-1-introduction-2/" target="_blank" rel="noopener">geeksforgeeks</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;简单来说，B-Tree 是针对&lt;strong&gt;大数据存取&lt;/strong&gt;的平衡树，考虑了&lt;strong&gt;磁盘读取&lt;/strong&gt;对查找效
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AhoCorasick Algorithm</title>
    <link href="http://mcginn7.github.io/2019/05/31/AhoCorasick-Algorithm/"/>
    <id>http://mcginn7.github.io/2019/05/31/AhoCorasick-Algorithm/</id>
    <published>2019-05-31T02:23:33.000Z</published>
    <updated>2019-06-01T02:09:54.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>AhoCorasick 算法（简称 AC 自动机），解决多模式串的字符匹配问题，即给定若干个单词串 $W_i$，求在文本串 $T$ 中的出现位置。KMP 算法解决单模式串的字符匹配，所以 AC 自动机可认为是 KMP 算法的扩展。</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ul><li>字典树（Trie）：树上任意节点到根的路径所构成的子串，记为 $S(u)$，都是某个插入串的<strong>前缀</strong>。</li><li>KMP 算法：利用最长前后缀完成线性匹配。</li></ul><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p>AhoCorasick 本质上与 KMP 算法是一样的，都是通过相同前后缀减少重复计算问题，只是数据结构不同。</p><p>对应于 KMP，AC 自动机需要构建<strong>最长公共前后缀</strong>（LCPS，Longese Common proper Prefix and Suffix），即对于树上任意节点 $u$，找出<strong>最大树深</strong>的节点 $v$，满足 $S(v)$ 是 $S(u)$ 的<strong>真后缀</strong>。因为字典树上的任意节点 $x$ 所表示的 $S(x)$ 都是前缀，故起名最长公共前后缀。</p><p>通常将节点 $v$ 记为 $fail(u)$，表示串 $S(u)$ 失配时的跳转节点，出于可读性的考虑，本文记为 $lcps(u)$。</p><p>$lcps(u)$  的<strong>构建过程</strong>：记节点 $u$ 的父节点为 $f(u)$，与其连边的字符为 $c$。若 $lcps(f(u))$ 存在 $c$ 的出边，则 $lcps(u)=trans(lcps(f(u)), c)$。否则继续找 $lcps(lcps(f(u)))$，直至找到或到达根节点（说明未找到）。</p><img src="/2019/05/31/AhoCorasick-Algorithm/20190601092923.png"><center>图 1. lcps(u) 的构建</center><h2 id="检索过程"><a href="#检索过程" class="headerlink" title="检索过程"></a>检索过程</h2><p>假设已知 $lcps(u)$，且字典树节点 $u$ 与文本串 $T[0:i]$ 匹配，即 $T[i-|S(u)|+1:i] = S(u)$。继续匹配有两种情形：</p><ol><li><p>$trans(u, T[i+1]) \neq NULL$，则匹配长度 +1。</p></li><li><p>$trans(u, T[i+1])=NULL$，与 KMP 类似，在字典树中找出最大深度（即最长前缀）的节点 $v$，满足 $S(v)$ 是 $S(u)$ 的真后缀，同时 $trans(v, T[i+1])\neq NULL$。</p><p>令 $v = lcps(u)$，判断是否能匹配，否则继续判断 $lcps(lcps(u))$。</p></li></ol><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">7</span>; <span class="comment">// sum(|Wi|)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> E = <span class="number">26</span>; <span class="comment">// character set size</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AhoCorasick</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n, lcps[N], trans[N][E];</span><br><span class="line">    <span class="keyword">int</span> end[N]; <span class="comment">// end[u] &gt; 0 : S(u) = Wi</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">new_node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(trans[n], <span class="number">0</span>, E * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));    </span><br><span class="line">        lcps[n] = root, end[n] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        root = new_node();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = root; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = str[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!trans[u][c])</span><br><span class="line">                trans[u][c] = new_node();</span><br><span class="line">            u = trans[u][c];</span><br><span class="line">        &#125;</span><br><span class="line">        ++end[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LCPS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q(&#123;root&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; E; ++c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (trans[u][c]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = lcps[u];    </span><br><span class="line">                    <span class="keyword">while</span> (v != root &amp;&amp; !trans[v][c])</span><br><span class="line">                        v = lcps[v];</span><br><span class="line">                    lcps[trans[u][c]] = u == root ? </span><br><span class="line">                        root : trans[v][c]; </span><br><span class="line">                    Q.push(trans[u][c]);</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    trans[u][c] = trans[lcps[u]][c];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;AhoCorasick 算法（简称 AC 自动机），解决多模式串的字符匹配问题，即给定若干个单词串 $W_i$，求在文本串 $T$ 中的出现
      
    
    </summary>
    
    
      <category term="AhoCorasick" scheme="http://mcginn7.github.io/tags/AhoCorasick/"/>
    
      <category term="AC自动机" scheme="http://mcginn7.github.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Knuth-Morris-Pratt Algorithm</title>
    <link href="http://mcginn7.github.io/2019/05/24/Knuth-Morris-Pratt-Algorithm/"/>
    <id>http://mcginn7.github.io/2019/05/24/Knuth-Morris-Pratt-Algorithm/</id>
    <published>2019-05-24T15:39:27.000Z</published>
    <updated>2019-07-26T08:50:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>KMP 算法解决在文本串（text）快速找出单词（word）的所有出现位置。</p><p>暴力匹配的时间复杂度为 $O(|T||W|)$，而 KMP 算法通过引入<strong>最长前后缀</strong>，将检索的时间复杂度降至线性。</p><h2 id="最长前后缀"><a href="#最长前后缀" class="headerlink" title="最长前后缀"></a>最长前后缀</h2><blockquote><p>lps indicates longest proper prefix which is also suffix.</p></blockquote><p>最长前后缀（<strong>LPS, Longest proper Prefix and Suffix</strong>）表示既是原串 $S$ 的真前缀也是后缀的最长子串 $T$，其中 $|T|\lt |S|$。</p><script type="math/tex; mode=display">LPS(aaa) = aa \\LPS(abcdab)=ab</script><h2 id="检索过程"><a href="#检索过程" class="headerlink" title="检索过程"></a>检索过程</h2><p>假设已知<strong>单词串</strong>的每个前缀 $W[0: i]$ 的最长前后缀长度 $lps(i)$，且已经匹配 $T[i - j: i] = W[0:j]$。继续匹配有两种情形：</p><ol><li>$T[i+1]=W[j + 1]$，则匹配长度 +1。</li><li>$T[i+ 1] \neq W[j+1]$，此时显然要重新找单词串的一个<strong>最长</strong>前缀 $W[0:k], k\lt j$，使得 $T[i-k:i]=W[0:k]$ 且 $T[i + 1]=W[k+ 1]$，继续与 $i+1$ 结尾的文本串匹配。</li></ol><img src="/2019/05/24/Knuth-Morris-Pratt-Algorithm/1555835282553.png" title="情形 2 示意图"><p><center>图 1. 情形 2 示意图。虚线框表示相同部分。</center><br>此时 $W[0:k]$ 与 $W[0:j]$ 的后缀相同，同时其本身是前缀。</p><p>令 $k=lps(j)$，若 $T[i+1]=W[k+1]$，则继续匹配。否则将 $k$ 视为新的 $j$，则转化成情形 2 相同的子问题。</p><p><strong>时间复杂度</strong>：匹配成功的复杂度是线性的。而匹配失败时会减小单词串的前缀长度，减一长度<strong>至少</strong>对应一次的成功匹配，此时时间复杂度也是线性的。故算法总的时间复杂度是线性的。</p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>对于单词串的最长前后缀 $lps(i)$，本质上是单词串的自我匹配，即<strong>此时文本串为单词串</strong>。对应于检索过程中的两种情形，可以很容易地完成 $lps(i)$ 的构造。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n = |T|, m = |W|, index = [0, n)</span></span><br><span class="line">lps[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">-1</span>; i &lt; m; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; W[i] != W[j + <span class="number">1</span>])</span><br><span class="line">j = lps[j];</span><br><span class="line">j += W[i] == W[j + <span class="number">1</span>];</span><br><span class="line">lps[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; T[i] != W[j + <span class="number">1</span>])</span><br><span class="line">j = lps[j];</span><br><span class="line">j += T[i] == W[j + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (j == m - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// match successfully</span></span><br><span class="line">j = lps[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;KMP 算法解决在文本串（text）快速找出单词（word）的所有出现位置。&lt;/p&gt;
&lt;p&gt;暴力匹配的时间复杂度为 $O(|T||W|)$，而 KMP 算法通过引入&lt;strong&gt;最长前后缀&lt;/strong&gt;，将检索的时间复杂度降至线性。&lt;/p&gt;
&lt;h2 id=&quot;最长前后缀
      
    
    </summary>
    
    
      <category term="KMP" scheme="http://mcginn7.github.io/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>ICPC Resolver 踩坑</title>
    <link href="http://mcginn7.github.io/2019/05/12/ICPC-Resolver-%E8%B8%A9%E5%9D%91/"/>
    <id>http://mcginn7.github.io/2019/05/12/ICPC-Resolver-踩坑/</id>
    <published>2019-05-12T14:09:44.000Z</published>
    <updated>2019-05-22T05:41:41.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>从 DOMjudge 系统中导出数据，使用 ICPC Tools/Resolver 滚榜。</p><p>DOMjudge 版本：7.0.1。</p><p>Resolver 版本：2.0.1798。如果使用 DOMjudge 评测，建议使用 2.1 及以上版本。</p><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><ol><li><p>搜索 <a href="https://icpc.baylor.edu/icpctools/" target="_blank" rel="noopener">ICPC Tools</a>，下载 ICPC Resolver.rar。</p></li><li><p>运行 award.sh，通过 REST 导入 event feed（一场比赛的所有信息流）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">URL: http://59.77.134.102/domjudge/api/contests/5</span><br><span class="line">USER: amdin</span><br><span class="line">Password: *******</span><br></pre></td></tr></table></figure><p>点击 <code>save</code> 保存为 “events.xml”。</p></li><li><p>目前版本（2.0.1798）的 Resolver 存在 bug，需要<strong>手动</strong>修订 events.xml 文件：</p><ol><li><p>第 1、2 行重复 <code>&lt;contest&gt;</code>，删除其中一行。</p></li><li><p><code>&lt;problem&gt;</code> 中的生成 <code>&lt;id&gt;</code> 从 0 开始，改成从 1 开始（否则导致部分提交不合法）。</p></li><li><p>删除信息不全的队伍，必要信息有：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">team</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>221801437<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Teamaaa<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">university</span>&gt;</span>福州大学<span class="tag">&lt;/<span class="name">university</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">university-short-name</span>&gt;</span>福州大学<span class="tag">&lt;/<span class="name">university-short-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">region</span>&gt;</span>Participants<span class="tag">&lt;/<span class="name">region</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>university-short-name</code> 为滚榜中显示的学校名称，故这里写学校全称。</p></li><li><p>末尾添加 <code>finalized</code> 信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">finalized</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">last-gold</span>&gt;</span>1<span class="tag">&lt;/<span class="name">last-gold</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">last-silver</span>&gt;</span>2<span class="tag">&lt;/<span class="name">last-silver</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">last-bronze</span>&gt;</span>3<span class="tag">&lt;/<span class="name">last-bronze</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">timestamp</span>&gt;</span>1557574214.130<span class="tag">&lt;/<span class="name">timestamp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">finalized</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">contest</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>timestamp</code> 可设置成任意值。</p></li></ol><p>可使用该代码 <a href="https://github.com/McGinn7/myscript/blob/master/icpc_resolver_revise_events_xml.py" target="_blank" rel="noopener"><strong>icpc_resolver_revise_events_xml</strong></a> 修订 events.xml。</p></li><li><p>使用 award.sh 打开<strong>处理后</strong>的 events.xml，设置金银铜奖人数，然后导出新的 xml 文件，并重新修订 events.xml 文件。</p><p>由于 award.sh 金银铜每组上限 10 个，共 30 个。不符合中国国情，故需要在 events.xml 中手动修改 <code>last-gold</code> 等字段。若 <code>last-gold=3, last-silver=10</code>，则表示设置金奖 3 个，银奖 7 个。</p><p>生成的 <code>&lt;award&gt;</code> 的 citation 可设置成 “金奖”、“银奖” 中文显示。</p></li><li><p>调用以下指令开始滚榜：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resolver.sh &lt;Path to CDP&gt;</span><br></pre></td></tr></table></figure></li><li><p>CDP（<a href="https://clics.ecs.baylor.edu/index.php?title=CDP" target="_blank" rel="noopener">Contest Data Package</a>）是提供榜单需要的数据目录，其中包括：</p><ol><li>config 目录，根据官方 wiki 设置即可，<strong>必要</strong>文件包括：<ol><li>contest.yaml：设置比赛标题、时长和封榜时间。</li><li>problemset.yaml：设置题目 id，题目名称。</li><li>groups.tsv, teams.tsv：从 DOMjudge 导出。</li><li><del>userdata.tsv</del>：官方 wiki 提示必须，实际上<strong>似乎可去除</strong>。</li></ol></li><li>events.xml：比赛信息；</li><li>images/logo/team_id.png：学校图标，每个学校的在 events.xml 的第一支队伍 id，id 不包含前导 0； </li><li>images/team/team_id.jpg：队伍照片，若出现 Out Of Memory 问题，则限制队伍照片的大小或者加大 resolver.sh 中 -Xmx 参数。</li></ol></li><li><p>榜单目前并不支持队伍、学校的中文显示，需要使用压缩工具（如 Bandizip）打开 “resolver/lib/presentContest.jar”，使用支持中文的字体替换 “font/HELV.PFB” 即可。 </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h2&gt;&lt;p&gt;从 DOMjudge 系统中导出数据，使用 ICPC Tools/Resolver 滚榜。&lt;/p&gt;
&lt;p&gt;DOMjudge 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>斜率优化</title>
    <link href="http://mcginn7.github.io/2019/04/03/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    <id>http://mcginn7.github.io/2019/04/03/斜率优化/</id>
    <published>2019-04-03T13:11:53.000Z</published>
    <updated>2019-04-03T13:33:24.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h2><p>针对形如：</p><script type="math/tex; mode=display">dp(i)=\min _{j=1}^{i-1} (dp(j)+cost(i, j))</script><p>的动态规划转移方程，可通过’’斜率’’的<strong>单调性</strong>进行优化。</p><h2 id="题一、-HNOI2008-玩具装箱TOY"><a href="#题一、-HNOI2008-玩具装箱TOY" class="headerlink" title="题一、[HNOI2008]玩具装箱TOY"></a>题一、[HNOI2008]玩具装箱TOY</h2><h3 id="题意-题目链接"><a href="#题意-题目链接" class="headerlink" title="题意 题目链接"></a>题意 <a href="https://www.luogu.org/problemnew/show/P3195" target="_blank" rel="noopener">题目链接</a></h3><p>给定长为 $1\le N\le 50000$ 的序列 $1\le C_i\le 10^7$，将序列分成若干连续段，每段 $[i, j]$ 的花费为</p><script type="math/tex; mode=display">((j - i+\sum_{k=i}^jC_k)-L)^2</script><p>其中 $L$ 为常数，$1\le L \le 10^7$。要求计算总的最小花费代价。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>利用前缀和 $S_i​$，区间 $[i, j]​$ 序列和可表示成 $S_j - S_{i-1}​$。容易想到 dp 转移方程为：</p><script type="math/tex; mode=display">dp(j)=\min_{i=0}^{j-1}(dp(i)+cost(i, j)) \\cost(i, j) = ((j - (i + 1) + S_j - S_i) - L)^2</script><p>将变量整理归类，记 $a_j=j+S_j, b_i=i+S_i+L+1$，则 $cost(i, j)$ 转化成：</p><script type="math/tex; mode=display">cost(i, j) = (a_j-b_i)^2 = a_j^2+b_i^2-2a_jb_i</script><p>转移方程移项可得：</p><script type="math/tex; mode=display">2a_jb_i + dp(j)-a_j^2=dp(i)+b_i^2</script><p>因为 $a_j​$ 在 $j​$ 固定时可认为是个定值，故问题相当于最小化 $dp(j)-a_j^2​$，进而可以将问题看成是斜率为 $2a_j​$ 的直线，找出一点 $(b_i, dp(i)+b_i^2)​$ 使得直线在 $y​$ 轴的截距 $dp(j) - a_j^2​$ 最小。</p><img src="/2019/04/03/斜率优化/1554264317802.png" title="下凸壳"><center>图 1. 下凸壳。灰色点和黑色点分别表示非凸壳点和凸壳点。</center><p>显然，截距最小的关键点必然在<strong>下凸壳</strong>上，且下凸壳的每段斜率是<strong>单调递增</strong>的。</p><p>斜率为 $g$ 的直线截距最小所对应的最优点是，该点前一段斜率 $\lt g$，后一段斜率 $\gt g​$。</p><p>注意 $1\le C_i  \Rightarrow S_i \lt S_{i + 1} \Rightarrow a_i=i+S_i \lt a_{i + 1}=(i + 1) + S_{i + 1}$，斜率 $a_i$ 是单调递增的，则对应的最优点位置也是单调的，所以这种情况可通过<strong>双端队列</strong>将复杂度优化到 $O(n)​$。</p><h2 id="题二、小A与最大子段和"><a href="#题二、小A与最大子段和" class="headerlink" title="题二、小A与最大子段和"></a>题二、小A与最大子段和</h2><h3 id="题意-题目链接-1"><a href="#题意-题目链接-1" class="headerlink" title="题意 题目链接"></a>题意 <a href="https://ac.nowcoder.com/acm/contest/545/A" target="_blank" rel="noopener">题目链接</a></h3><p>给定长为 $1\le N \le 2\times 10^5​$ 的序列 $0 \le |A_i| \le 2000​$，找一个非空连续子段 $B​$，最大化：</p><script type="math/tex; mode=display">\sum_{i=1}^{|B|} i\times B_i</script><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>把问题进一步公式化：</p><script type="math/tex; mode=display">Ans = \max_{1\le i\le j\le N} \{\sum_{k=i}^j(k-i+1)\times A_k\} \tag 1</script><p>为了去除 $\sum$ ，引入前缀和 $S_i$ 和 $V_i=\sum_{p=1}^i p\times A_p​$，公式 (1) 转化成：</p><script type="math/tex; mode=display">Ans = \max_{0\le i\lt j\le N} \{(V_j-V_i)-i\times(S_j-S_i)\} \tag 2</script><p>根据变量下标整理归类：</p><script type="math/tex; mode=display">Ans = -S_j\times i+(i\times S_i-V_i) + V_j \\\Rightarrow S_j\times i+(Ans - V_j) = i\times S_i- V_i</script><p>同”玩具装箱TOY”，此时相当于令截距 $Ans - V_j$ <strong>最大</strong>，所以此时需要维护点集 $(i, iS_i-V_i)$ 的<strong>上凸壳</strong>。</p><p>因为 $A_i$ 存在负数，故斜率 $S_i$ 并不具有单调性，所以需要<strong>二分</strong>确定最优点的位置。 </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="https://www.cnblogs.com/ka200812/archive/2012/08/03/2621345.html" target="_blank" rel="noopener">斜率优化DP</a></p></li><li><p><a href="https://blog.csdn.net/lxc779760807/article/details/51366552" target="_blank" rel="noopener">斜率优化dp小结</a></p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="HNOI2008-玩具装箱TOY"><a href="#HNOI2008-玩具装箱TOY" class="headerlink" title="[HNOI2008]玩具装箱TOY"></a>[HNOI2008]玩具装箱TOY</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) begin(x),end(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=(l);i&lt;(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; <span class="meta-string">", "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> de(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, L, C[N];</span><br><span class="line">ll S[N], dp[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span></span><br><span class="line">ll x, y;</span><br><span class="line">P() &#123;&#125;</span><br><span class="line">P(ll _x, ll _y) &#123;</span><br><span class="line">x = _x, y = _y;</span><br><span class="line">&#125;</span><br><span class="line">P <span class="keyword">operator</span>-(<span class="keyword">const</span> P &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> P(x - p.x, y - p.y);</span><br><span class="line">&#125;</span><br><span class="line">ll <span class="keyword">operator</span>^(<span class="keyword">const</span> P &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * p.y - y * p.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X(i) (i + S[i] + L + 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y(i) (dp[i] + X(i) * X(i))</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;L);</span><br><span class="line">rep(i, <span class="number">1</span>, n + <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, C + i);</span><br><span class="line">rep(i, <span class="number">1</span>, n + <span class="number">1</span>) S[i] = S[i - <span class="number">1</span>] + C[i];</span><br><span class="line"><span class="built_in">deque</span>&lt;P&gt; Q; Q.push_back(P(X(<span class="number">0</span>), Y(<span class="number">0</span>)));</span><br><span class="line">rep(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line">ll g = <span class="number">2</span> * (i + S[i]);</span><br><span class="line"><span class="keyword">while</span> (sz(Q) &gt; <span class="number">1</span> &amp;&amp; (Q[<span class="number">1</span>].y - Q[<span class="number">0</span>].y) &lt; (Q[<span class="number">1</span>].x - Q[<span class="number">0</span>].x) * g) </span><br><span class="line">Q.pop_front();</span><br><span class="line">dp[i] = Q[<span class="number">0</span>].y - g * Q[<span class="number">0</span>].x + (i + S[i]) * (i + S[i]);</span><br><span class="line">P a(X(i), Y(i));</span><br><span class="line"><span class="keyword">while</span> (sz(Q) &gt; <span class="number">1</span> &amp;&amp; ((Q[sz(Q) - <span class="number">2</span>] - a) ^ (Q.back() - a)) &lt;= <span class="number">0</span>) </span><br><span class="line">Q.pop_back();</span><br><span class="line">Q.push_back(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, dp[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小A与最大子段和"><a href="#小A与最大子段和" class="headerlink" title="小A与最大子段和"></a>小A与最大子段和</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) begin(x),end(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=(l);i&lt;(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; <span class="meta-string">", "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> de(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N];</span><br><span class="line">ll S[N], V[N];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X(i) (i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y(i) (i * S[i] - V[i])</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span></span><br><span class="line">ll x, y;</span><br><span class="line">P() &#123;&#125; P(ll _x, ll _y) &#123; x = _x, y = _y; &#125; </span><br><span class="line">P <span class="keyword">operator</span>-(<span class="keyword">const</span> P &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> P(x - p.x, y - p.y);</span><br><span class="line">&#125;</span><br><span class="line">ll <span class="keyword">operator</span>^(<span class="keyword">const</span> P &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * p.y - y * p.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">chk</span><span class="params">(<span class="built_in">deque</span>&lt;P&gt; &amp;Q, <span class="keyword">int</span> i, ll G)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Q[i + <span class="number">1</span>].y - Q[i].y) &gt;= (Q[i + <span class="number">1</span>].x - Q[i].x) * G;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">rep(i, <span class="number">1</span>, n + <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">rep(i, <span class="number">1</span>, n + <span class="number">1</span>) S[i] = S[i - <span class="number">1</span>] + a[i];</span><br><span class="line">rep(i, <span class="number">1</span>, n + <span class="number">1</span>) V[i] = V[i - <span class="number">1</span>] + i * a[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;P&gt; Q; Q.push_back(P(X(<span class="number">0</span>), Y(<span class="number">0</span>)));</span><br><span class="line">ll ans = LLONG_MIN;</span><br><span class="line">rep(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// answer</span></span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = max(<span class="number">0</span>, sz(Q) - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">while</span> (l + <span class="number">1</span> &lt; r) &#123;</span><br><span class="line"><span class="keyword">int</span> z = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">chk(Q, z, S[i]) ? l = z : r = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j = l;</span><br><span class="line"><span class="keyword">if</span> (chk(Q, r, S[i])) j = r + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (chk(Q, l, S[i])) j = l + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> j = l;</span><br><span class="line">ll f = Q[j].y - S[i] * Q[j].x + V[i];</span><br><span class="line">ans = max(ans, f);</span><br><span class="line"><span class="comment">// maintain</span></span><br><span class="line">P a(X(i), Y(i));</span><br><span class="line"><span class="keyword">while</span> (sz(Q) &gt; <span class="number">1</span> &amp;&amp; ((Q[sz(Q) - <span class="number">2</span>] - a) ^ (Q.back() - a)) &gt;= <span class="number">0</span>)</span><br><span class="line">Q.pop_back();</span><br><span class="line">Q.push_back(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;斜率优化&quot;&gt;&lt;a href=&quot;#斜率优化&quot; class=&quot;headerlink&quot; title=&quot;斜率优化&quot;&gt;&lt;/a&gt;斜率优化&lt;/h2&gt;&lt;p&gt;针对形如：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
dp(i)=\min _{
      
    
    </summary>
    
    
      <category term="ICPC" scheme="http://mcginn7.github.io/tags/ICPC/"/>
    
      <category term="斜率优化" scheme="http://mcginn7.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Nowcoder-出题人的数组</title>
    <link href="http://mcginn7.github.io/2019/03/31/Nowcoder-%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E6%95%B0%E7%BB%84/"/>
    <id>http://mcginn7.github.io/2019/03/31/Nowcoder-出题人的数组/</id>
    <published>2019-03-31T12:11:49.000Z</published>
    <updated>2019-04-03T14:01:43.233Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://ac.nowcoder.com/acm/contest/545/C" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/545/C</a><br>来源：牛客网</p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>出题人有两个数组 $A, B$，请你把两个数组归并起来使得 $Cost=∑i∗C_i$ 最小，要求两个原数组的顺序在新数组中保持不变。 </p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>第一行输入两个正整数 $n,m$，分别表示数组 $A, B$ 的长度。<br>第二行输入 $n$ 个正整数，表示数组 $A$。<br>第二行输入 $m$ 个正整数，表示数组 $B$ 。</p><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>一个正整数，表示最小代价 $Cost$。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><table style="border-collapse:collapse;border-spacing:0;border-color:#999" class="tg"><tr><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 10px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#fd6864;color:#fff;background-color:#fd6864;text-align:left">输入</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 10px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#fd6864;color:#fff;background-color:#fd6864;text-align:left">输出</th></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 10px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#fd6864;color:#444;background-color:#F7FDFA;text-align:left">3 3<br>1 3 5<br>2 6 4</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 10px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#fd6864;color:#444;background-color:#F7FDFA;text-align:left">75</td></tr></table><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>$n, m \le 100000$</p><p>$A_i, B_i \le 100000$</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>$O(nm)$ 动态规划很容易想到，但是复杂度太高且没有方法优化，那么就考虑贪心解法。</p><p>显然，合并后的数组 $C$ 格式为 $\dots ABABA\dots$，即一段 $A$ 接一段 $B$ 。</p><p>常见的贪心策略为，考虑相邻元素的交换是否会导致更优的结果。由于不能打乱原先的顺序，故总是后段的前缀替换前段的后缀，不失一般性，我们可以假设前段为 $A$，后段为 $B$。</p><p>记 $Cost(A) = \sum_{i = 1} ^ {|A|}i\times A_i$，则原先的贡献值为 $Cost(A)+Cost(B)+|A|\times Sum(B)$，交换后的贡献值为 $Cost(A)+Cost(B)+|B|\times Sum(A)$，则当 $|B|\times Sum(A) \lt |A|\times Sum(B)$，即</p><script type="math/tex; mode=display">\frac{Sum(A)}{|A|} \lt \frac{Sum(B)}{|B|}</script><p>也就是说，<strong>均值越大的段需要优先选择</strong>。</p><p>剩下的就是如何构造这些段，我们假设串 $A=A_1A_2$，当 $Average(A_1)\lt Average(A_2)$ 时，在数组 $C$ 中总会合并成一段，根据这一性质在原数组中利用<strong>单调栈</strong>即可构造初始的段，之后就是从数组 $A,B​$ 贪心选择均值较大的段。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) begin(x),end(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=(l);i&lt;(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; <span class="meta-string">", "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> de(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, A[N], B[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> num; ll sum;</span><br><span class="line">    Node() &#123;&#125;</span><br><span class="line">    Node(<span class="keyword">int</span> _num, ll _sum) &#123;</span><br><span class="line">        num = _num, sum = _sum;</span><br><span class="line">    &#125;</span><br><span class="line">    Node <span class="keyword">operator</span>+(<span class="keyword">const</span> Node &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Node(num + p.num, sum + p.sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sum * p.num &lt; p.sum * num; </span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[N], b[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *r, Node *a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    rep(i, <span class="number">0</span>, n) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, r + i);</span><br><span class="line">        <span class="function">Node <span class="title">v</span><span class="params">(<span class="number">1</span>, r[i])</span></span>;    </span><br><span class="line">        <span class="keyword">while</span> (top &gt; <span class="number">0</span> &amp;&amp; a[top - <span class="number">1</span>] &lt; v)</span><br><span class="line">            v = a[--top] + v;</span><br><span class="line">        a[top++] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">int</span> la = gao(n, A, a), lb = gao(m, B, b);</span><br><span class="line">    n = m = <span class="number">0</span>;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; la || j &lt; lb; ) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; la &amp;&amp; (j == lb || !(a[i] &lt; b[j]))) &#123;</span><br><span class="line">            rep(k, n, n + a[i].num) ans += <span class="number">1l</span>l * (k + m + <span class="number">1</span>) * A[k];    </span><br><span class="line">            n += a[i++].num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; lb &amp;&amp; (i == la || !(b[j] &lt; a[i]))) &#123;</span><br><span class="line">            rep(k, m, m + b[j].num) ans += <span class="number">1l</span>l * (k + n + <span class="number">1</span>) * B[k];</span><br><span class="line">            m += b[j++].num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/545/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ac.nowcoder.com/acm/contest/545/C&lt;/a&gt;&lt;br&gt;来源
      
    
    </summary>
    
    
      <category term="ICPC" scheme="http://mcginn7.github.io/tags/ICPC/"/>
    
      <category term="贪心" scheme="http://mcginn7.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>论文笔记 Tips and Tricks for Visual Question Answering</title>
    <link href="http://mcginn7.github.io/2018/10/09/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Tips-and-Tricks-for-Visual-Question-Answering/"/>
    <id>http://mcginn7.github.io/2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/</id>
    <published>2018-10-09T03:24:19.000Z</published>
    <updated>2018-11-12T03:27:34.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    该论文作者取得了 2017 VQA Challenge 的第一，总结一些 tips 和 tricks 来提升 VQA 的表现。</p><p>​    这篇论文的每个实验使用不同的随机种子<strong>重复3次实验</strong>来统计结果。</p><img src="/2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/1539055553531.png" title="模型"><center>模型</center><h2 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h2><ul><li><p>所有问题的长度固定 14。</p></li><li><p>问题特征 $q$ 与图像特征 $\hat v$ 的融合使用 Hadamard product（逐项相乘）。</p><script type="math/tex; mode=display">h = f_q(q) \circ f_v(\hat v)</script></li><li><p>目标函数（损失函数）</p><script type="math/tex; mode=display">L=-\sum_i^M\sum_j^N s_{ij}\log (\hat s_{ij})-(1-s_{ij})\log(1-\hat s_{ij})</script></li><li><p>作者使用了额外的数据集 Visual Genome(VG)，共 485,000。</p></li></ul><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><h3 id="Sigmoid-output"><a href="#Sigmoid-output" class="headerlink" title="Sigmoid output"></a>Sigmoid output</h3><ul><li><p>输出使用 sigmoid 将每个类别（或答案）归一化。</p></li><li><p>softmax 也可以用来归一化，但是会变成单个类别输出，而 sigmoid 可以输出多个类。这样可以适应一个问题有多个答案的情况。</p><img src="/2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/1539055765859.png" title="结果"></li></ul><h3 id="Soft-scores-as-ground-truth-targets"><a href="#Soft-scores-as-ground-truth-targets" class="headerlink" title="Soft scores as ground truth targets"></a>Soft scores as ground truth targets</h3><ul><li><p>VQA 中问题答案附有置信度，将答案向量化有 2 种做法：1）使用固定阈值将答案二值化；2）使用 sigmoid 或 softmax 来归一化答案。</p></li><li><p>做法1）就是 hard scores，每个类只有 0、1 两个选项。做法2）就是 soft scores，每个类都有一个浮点数的得分。</p></li><li><p>作者使用了两个简单的二值化进行对比</p><script type="math/tex; mode=display">s'_{ij}=(s_{ij}>0.0) \\s'_{ij}=(s_{ij}==1.0)</script><img src="/2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/1539055814715.png" title="结果"></li></ul><h3 id="Gated-tanh-activations"><a href="#Gated-tanh-activations" class="headerlink" title="Gated tanh activations"></a>Gated tanh activations</h3><ul><li><p>使用 gated tanh activations 作为激活函数，而不是常用的 Rectified Linear Unit（ReLU）。</p></li><li><p>激活函数 $f_a: x \in R^m \rightarrow y \in R^n$</p></li><li><script type="math/tex; mode=display">\tilde y = tanh(Wx + b) \\g = \sigma(W'x+b') \\y = \tilde y \circ g</script><p>$W,W’,b,b’$ 为训练参数，$\circ$ 表示 Hadamard product（逐项相乘）。</p></li><li><p>该激活函数之前被用于自然语言处理。</p></li></ul><h3 id="Bottom-up-attention"><a href="#Bottom-up-attention" class="headerlink" title="Bottom up attention"></a>Bottom up attention</h3><ul><li><p>使用 bottom up attention 来提取图像特征，而不是直接使用 CNN 的特征层（feature map）。</p></li><li><p>Bottom up attention 基于 Faster R-CNN 框架，提取若干 Region of Interest（RoI）的特征，继而通过非线性层做 attention。论文里使用阈值来筛选出 $K$ 个 RoI 并设置了 100 的上限（作者将数量 $K$ 固定为 36，表现会差一些，但是减少了计算开销）。</p><img src="/2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/1539055857312.png" title="结果"></li><li><p>Attention 的非线性层</p><script type="math/tex; mode=display">a_i=w_af_a(v_i, q) \\\alpha = softmax(a) \\\hat v = sum_{i=1}^K \alpha_i v_i</script><p>$q$ 为问题表示向量，$v_i$ 为 RoI 的特征向量。</p></li><li><p>使用 bottom up attention 相对于传统的 CNN 提取特征，提升是很明显的。</p></li></ul><h3 id="Pretrained-representations-to-initialize"><a href="#Pretrained-representations-to-initialize" class="headerlink" title="Pretrained representations to initialize"></a>Pretrained representations to initialize</h3><ul><li><p>论文提出了加入先验知识 $w_o^{text}$ 和 $w_o^{img}$ 来初始化输出层参数</p><script type="math/tex; mode=display">\hat s = \sigma(w_o^{text}f_o^{text}(h)+w_o^{img}f_o^{img}(h))</script></li><li><p>$w_o^{text}$ 使用 GloVe word embedding 初始化。</p></li><li><p>$w_o^{img}$  使用谷歌图片搜索 10 张对应图片并用 ResNet-10 提取特征，10 个特征向量均值化得到最终的向量表示。 </p></li><li><p>这个做法提升了大约 0.87 个点。</p></li></ul><h3 id="Larger-mini-batches"><a href="#Larger-mini-batches" class="headerlink" title="Larger mini-batches"></a>Larger mini-batches</h3><ul><li><p>通常来说，mini-batches 越大效果越好，但是大到一定程度后就不会有明显提升了，训练速度会慢。</p><img src="/2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/1539055903316.png" title="结果"></li></ul><h3 id="Smart-shufﬂing"><a href="#Smart-shufﬂing" class="headerlink" title="Smart shufﬂing"></a>Smart shufﬂing</h3><ul><li>batch 通常从数据中随机抽取。针对 VQA 这个问题来说，同个问题关联到不同图像会得到不一样的答案（balanced pair），所以作者提出了 smart shuffling 控制 balanced pair 的比例。</li><li>这个做法 VQA 得分与随机做法差不多，但是提升了 Accuracy over paris。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;​    该论文作者取得了 2017 VQA Challenge 的第一，总结一些 tips 和 tricks 来提升 VQA 的表现。&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Windows 下使用 Vim</title>
    <link href="http://mcginn7.github.io/2018/10/08/Vim-for-windows-%E9%85%8D%E7%BD%AE/"/>
    <id>http://mcginn7.github.io/2018/10/08/Vim-for-windows-配置/</id>
    <published>2018-10-08T11:43:06.092Z</published>
    <updated>2019-07-29T13:15:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h2><p>主要针对 ACM/ICPC 竞赛选手在 Windows 10 系统下使用 vim 编写 C/C++ 代码。</p><p>功能配置：</p><ol><li>编译和运行 *.cpp 文件；</li><li>一键复制代码;</li><li>记事本打开代码。</li></ol><img src="/2018/10/08/Vim-for-windows-配置/1539090544618.png" title="效果图"><p>git bash 和 gvim 都配置了一遍。gvim 使用 Windows 自带的 cmd 运行的话，鼠标是没办法移动光标的，并且配置相对 git bash 较麻烦，所以推荐使用 git bash。</p><h2 id="Vimrc-配置"><a href="#Vimrc-配置" class="headerlink" title="Vimrc 配置"></a>Vimrc 配置</h2><ul><li><p>编辑安装路径下的 vimrc 文件，例如 “D:\Git\etc\vimrc”，配置快捷键。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set nu ai ci si mouse=a ts=4 sts=4 sw=4</span><br><span class="line">nmap&lt;F2&gt; :vs %&lt;.in &lt;CR&gt;</span><br><span class="line">nmap&lt;F3&gt; :w !clip.exe &lt;CR&gt; &lt;CR&gt;</span><br><span class="line">nmap&lt;F4&gt; :!write % &lt;CR&gt;</span><br><span class="line">nmap&lt;F8&gt; :!./%&lt; &lt; %&lt;.in &lt;CR&gt;</span><br><span class="line">nmap&lt;F9&gt; :!g++ % -o %&lt; -O2 -g -Wall -std=c++11 &lt;CR&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="额外配置"><a href="#额外配置" class="headerlink" title="额外配置"></a>额外配置</h2><ul><li><p>vimrc 文件默认有一些配置，可根据需要修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set vb             "这个不关的话，触发某些条件会闪屏</span><br><span class="line">set laststatus=1   "窗口底部状态栏的行数（默认是2），这里设置成1。</span><br><span class="line">au FileType c,cpp setlocal comments-=:// comments+=f:// "取消换行自动注释</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>设置 Ctrl + Alt + T 快捷键启动 Git Bash 终端。</p><ol><li>创建 “git-bash.exe” 的快捷方式，打开快捷方式的属性窗口，修改<strong>起始位置</strong>，并设置快捷键。</li><li>打开<strong>控制面板</strong>，找到 “管理工具”， 将快捷方式复制到该文件夹中。</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简要说明&quot;&gt;&lt;a href=&quot;#简要说明&quot; class=&quot;headerlink&quot; title=&quot;简要说明&quot;&gt;&lt;/a&gt;简要说明&lt;/h2&gt;&lt;p&gt;主要针对 ACM/ICPC 竞赛选手在 Windows 10 系统下使用 vim 编写 C/C++ 代码。&lt;/p&gt;
&lt;p&gt;功
      
    
    </summary>
    
    
      <category term="vim" scheme="http://mcginn7.github.io/tags/vim/"/>
    
      <category term="git bash" scheme="http://mcginn7.github.io/tags/git-bash/"/>
    
  </entry>
  
  <entry>
    <title>DOMjudge 配置</title>
    <link href="http://mcginn7.github.io/2018/10/04/DOMjudge%E9%85%8D%E7%BD%AE/"/>
    <id>http://mcginn7.github.io/2018/10/04/DOMjudge配置/</id>
    <published>2018-10-04T15:29:36.000Z</published>
    <updated>2019-05-21T07:05:41.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Domserver-部署"><a href="#Domserver-部署" class="headerlink" title="Domserver 部署"></a>Domserver 部署</h2><h3 id="PHP-timezone"><a href="#PHP-timezone" class="headerlink" title="PHP timezone"></a>PHP timezone</h3><ol><li><p>php.ini 文件位置</p><ul><li>CentOS/RedHat/Fedora = /etc/php.ini</li><li>Ubuntu/Debian/LinuxMint = /etc/php5/apache2/php.ini</li></ul></li><li><p>选择时区，通常定位为 “Asia/Shanghai”</p><ul><li><a href="https://php.net/manual/en/timezones.php" target="_blank" rel="noopener">PHP: List of Supported Timezones</a></li></ul></li><li><p>编辑 php.ini 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date.timezone = <span class="string">"Asia/Shanghai"</span></span><br></pre></td></tr></table></figure></li><li><p>重启 Apache Service。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure></li></ol><h3 id="MySQL-maximum-connections"><a href="#MySQL-maximum-connections" class="headerlink" title="MySQL maximum connections"></a>MySQL maximum connections</h3><p>原先编辑 <em>\etc\mysql\my.cnf</em> 添加 <strong>max_connections = 1000</strong>，然后重启 apache2 即可。但是设置后一直为 214，因为该值受限于 <em>table_open_ache</em> 和 <em>open_files_limit</em>。</p><p>下面的方法在 Ubuntu 16.04 和 MySQL 5.7.23 版本实验成功：</p><ol><li><p>运行下面的命令，设置 open_files_limit</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl edit mysql</span><br></pre></td></tr></table></figure></li><li><p>输入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">LimitNOFILE=8000</span><br></pre></td></tr></table></figure></li><li><p>重启服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart mysql</span><br></pre></td></tr></table></figure></li></ol><h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><h3 id="测试数据导入"><a href="#测试数据导入" class="headerlink" title="测试数据导入"></a>测试数据导入</h3><p>在 Problems 页面下可以编辑 Problem name, Time limit 这些信息，测试数据（Testcases）在页面上<strong>只能</strong>单点添加和修改，并且不能删除。</p><p>批量导入测试数据步骤：</p><ol><li><p>先添加题目，填入”Problem name”、”Time limit” 和 “Memory limit” 等信息，其余的保存默认即可，但是暂不添加 “Testcases”。</p></li><li><p>点击该题目的导出按钮，下载得到一个压缩包。解压后的文件夹内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 在Windows使用 tree/f 生成该目录文本信息</span><br><span class="line">│  domjudge-problem.ini</span><br><span class="line">│  problem.yaml</span><br><span class="line">│</span><br><span class="line">├─data</span><br><span class="line">│  ├─sample</span><br><span class="line">│  └─secret</span><br><span class="line">│</span><br><span class="line">└─problem_statement</span><br><span class="line">        problem.pdf</span><br></pre></td></tr></table></figure></li><li><p>目录 <em>sample</em> 和 <em>secret</em> 可自行创建，两个目录存放样例数据和隐藏数据（即测试数据）。</p></li><li><p>将数据 “0.in”，“0.ans” 放入对应的文件夹下，重新压缩成新的压缩包。</p></li><li><p>在题目的编辑页面，通过 <em>Upload problem archive</em> 上传新压缩包。注意 <em>Contest</em> 选项选择为 <em>Do not add / update contest data</em>，否则可能会上传失败。</p></li></ol><h3 id="队伍账号导入"><a href="#队伍账号导入" class="headerlink" title="队伍账号导入"></a>队伍账号导入</h3><ul><li><p><a href="https://www.domjudge.org/pipermail/domjudge-devel/2015-September/001753.html" target="_blank" rel="noopener">Domjudge队伍导入 - 参考链接</a></p></li><li><p>需要在 home &gt; import / export 页面下，导入 <em>teams.tsv</em> 和 <em>accounts.tsv</em> 这两个文件。在编辑这两个文件时，需要使用 <strong>UTF-8</strong> 格式，否则会上传失败或导致乱码。</p></li><li><p><strong>teams.tsv</strong></p><p> 该文件用于描述队伍信息，包含一版本行，接着每个队伍占用一行，每行包括用制表符（tab）分隔的字段。</p><p> 首行为版本行，格式如下：</p> <table style="border-collapse:collapse;border-spacing:0;border-color:#ccc" class="tg"><tr><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Field</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Description</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Example</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Type</th></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">1</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Label</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">teams</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">fixed string (always same value)</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">2</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Version number</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">1</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">integer</td></tr></table><p> 队伍描述行，格式如下：</p> <table style="border-collapse:collapse;border-spacing:0;border-color:#ccc" class="tg"><tr><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#ffffff;background-color:#fd6864;text-align:left">Field</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#ffffff;background-color:#fd6864;text-align:left">Description</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#ffffff;background-color:#fd6864;text-align:left">Example</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#ffffff;background-color:#fd6864;text-align:left">Type</th></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">1</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">Team Number</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">22</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">integer</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">2</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">External ID</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">24314</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">integer</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">3</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Group ID</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">3</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">integer</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">4</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Team name</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Hoos</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">string</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">5</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Institution name</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Fuzhou University</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">string</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">6</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Institution short name</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">FZU</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">string</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">7</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Country Code</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">CHN</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">string ISO 3166-1 alpha-3</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">8</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Affiliation External ID</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Fuzhou University</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">string</td></tr> </table><p> <code>Group ID</code> 对应 Categories 中的 ID，表示队伍的角色，如女队、打星队等。</p></li><li><p><strong>accounts.tsv</strong></p><p> 该文件用于描述账号信息，同样包含版本行和账号行，每个账号占用一行。</p><p> 首行版本行的格式如下：</p> <table style="border-collapse:collapse;border-spacing:0;border-color:#ccc" class="tg"><tr><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Field</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Description</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Example</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Type</th></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">1</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Label</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">accounts</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">fixed string (always same value)</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">2</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Version number</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">1</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">integer</td></tr></table><p> 账号描述行的格式如下：</p> <table style="border-collapse:collapse;border-spacing:0;border-color:#ccc" class="tg"><tr><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Field</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Description</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Example</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Type</th></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">1</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Account Type</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">team</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">string</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">2</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Full Name</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">wtf</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">string</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">3</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Username</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">team099</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">string</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">4</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Password</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">B!5MWJiy</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">string</td></tr></table><p> Account Type 取值为：team, judge, admin, analyst。这里要导入队伍账号，所以该字段在这固定为 team。</p><p> <strong>注意：</strong>需要设置 <code>Username</code> 的格式才能将账号和队伍关联起来，规则为：<code>Username</code> 的整数部分需要和 <strong>team.tsv</strong> 中的 <code>Team Number</code> 一致。比如一支队伍 <code>Team Number</code> 为 99，则 <code>Username</code>  可以设置为 team-099。</p></li><li><p>导入样例</p><p> team.tsv 文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">teams1</span><br><span class="line">8team0083三核战队福州大学FZDXCHN福州大学</span><br><span class="line">18team0183挂机不队福州大学FZDXCHN福州大学</span><br><span class="line">31team0313这都是什么鬼福州大学FZDXCHN福州大学</span><br></pre></td></tr></table></figure><p> accounts.tsv 文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">accounts1</span><br><span class="line">team三核战队team008T3yRt3</span><br><span class="line">team挂机不队team01886MFyB</span><br><span class="line">team这都是什么鬼team031RTJr6e</span><br></pre></td></tr></table></figure></li></ul><h2 id="评测机"><a href="#评测机" class="headerlink" title="评测机"></a>评测机</h2><h3 id="Unprivileged-user-and-group"><a href="#Unprivileged-user-and-group" class="headerlink" title="Unprivileged user and group"></a>Unprivileged user and group</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 下面这条命令是必须运行的</span><br><span class="line">useradd -d /nonexistent -U -M -s /bin/false domjudge-run</span><br><span class="line">// X=1~4，X通常等同于CPU核心数</span><br><span class="line">useradd -d /nonexistent -U -M -s /bin/false domjudge-run-X</span><br></pre></td></tr></table></figure><h3 id="Linux-Control-Groups"><a href="#Linux-Control-Groups" class="headerlink" title="Linux Control Groups"></a>Linux Control Groups</h3><ul><li>每次<strong>重启</strong>都需要运行 <strong><em>judgehost/bin/create_cgroups</em></strong>，否则提交会编译错误。</li></ul><h2 id="问题集锦"><a href="#问题集锦" class="headerlink" title="问题集锦"></a>问题集锦</h2><h3 id="1-比赛正常需要几台机器？"><a href="#1-比赛正常需要几台机器？" class="headerlink" title="1. 比赛正常需要几台机器？"></a>1. 比赛正常需要几台机器？</h3><p>个人认为正常应该至少需要 4 台机器，配置较高的作为主服务器，即 DOMserver，提供比赛的 web 页面；一台打印服务器，也安装 DOMserver，但开放 print 页面，达到比赛与打印分开，减少宕机对选手的影响；两台评测机，即 Judgehost，这样如果一台宕机，也有另一台继续评测，而不是完全中断评测，并且修复后可随时上线新的评测机。</p><p>由于安装的机器较多且安装包大，建议使用 apt-offline 打包需要的安装包，节省安装时间。</p><h3 id="2-气球状态页面返回-500-错误"><a href="#2-气球状态页面返回-500-错误" class="headerlink" title="2. 气球状态页面返回 500 错误"></a>2. 气球状态页面返回 500 错误</h3><p>正式比赛开始时，contest 只能留有一个比赛。（个人不知道原因）。</p><h3 id="3-测试数据上传失败"><a href="#3-测试数据上传失败" class="headerlink" title="3. 测试数据上传失败"></a>3. 测试数据上传失败</h3><p>可能需要修改的几个文件：</p><ol><li><p>/etc/apache2/conf-avaliable/domjudge.conf</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_php7.c&gt;</span><br><span class="line">php_value max_file_uploads    <span class="number">101</span></span><br><span class="line">php_value upload_max_filesize <span class="number">128</span>M</span><br><span class="line">php_value post_max_size       <span class="number">128</span>M</span><br><span class="line">php_value memory_limit        <span class="number">512</span>M</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></li><li><p>/etc/mysql/my.cnf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">max_connections = 10000</span><br><span class="line">max_allowed_packet = 512M</span><br><span class="line">innodb_log_file_size = 512M</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-如何让-DOMJudge-支持多台打印机？"><a href="#4-如何让-DOMJudge-支持多台打印机？" class="headerlink" title="4. 如何让 DOMJudge 支持多台打印机？"></a>4. 如何让 DOMJudge 支持多台打印机？</h3><p>修改 domserver/webapp/src/DOMJudgeBundle/Utils/Printing.php 中 <code>cmd</code> 指令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$cmd = <span class="string">"enscript -C "</span> . $highlight</span><br><span class="line">    . <span class="string">" -d "</span> . $printername <span class="comment">// 指定打印机名</span></span><br><span class="line">    . <span class="string">" -b "</span> . escapeshellarg($header)</span><br><span class="line">    . <span class="string">" -a 0-10 "</span></span><br><span class="line">    . <span class="string">" -f Courier9 "</span></span><br><span class="line"><span class="comment">//    . " -p $tmp "</span></span><br><span class="line">    . escapeshellarg($filename) . <span class="string">" 2&gt;&amp;1"</span>;</span><br></pre></td></tr></table></figure><p>去除 <code>-p $tmp</code> ，添加 <code>-d</code> 参数，指定打印机打印。多台打印机则让打印机名轮转即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Domserver-部署&quot;&gt;&lt;a href=&quot;#Domserver-部署&quot; class=&quot;headerlink&quot; title=&quot;Domserver 部署&quot;&gt;&lt;/a&gt;Domserver 部署&lt;/h2&gt;&lt;h3 id=&quot;PHP-timezone&quot;&gt;&lt;a href=&quot;#P
      
    
    </summary>
    
    
      <category term="domjudge" scheme="http://mcginn7.github.io/tags/domjudge/"/>
    
  </entry>
  
  <entry>
    <title>论文笔记 Semantic Compositional Networks for Visual Captioning</title>
    <link href="http://mcginn7.github.io/2018/08/18/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%20Semantic%20Compositional%20Networks%20for%20Visual%20Captioning/"/>
    <id>http://mcginn7.github.io/2018/08/18/论文笔记 Semantic Compositional Networks for Visual Captioning/</id>
    <published>2018-08-18T12:58:18.000Z</published>
    <updated>2018-10-08T12:55:41.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​    该论文提出了语义组合网络(Semantic Compositional Network, SCN)，其有效利用语义概念（标签）来达到效果比较好的图文生成。</p><p><img src="https://github.com/McGinn7/mcginn7.github.io/blob/master/img/temp/1534597565116.png?raw=true" alt></p><h3 id="Semantic-compositional-networks"><a href="#Semantic-compositional-networks" class="headerlink" title="Semantic compositional networks"></a>Semantic compositional networks</h3><p><img src="https://github.com/McGinn7/mcginn7.github.io/blob/master/img/temp/1534597459535.png?raw=true" alt></p><ul><li><p><strong>模型基础</strong></p><p>使用CNN提取图像特征，RNN作文字生成。</p><p>文字生成的概率公式：</p><script type="math/tex; mode=display">p(\bold X | \bold I) = \prod _{t=1}^Tp(x_t|x_0, \dots , x_{t-1}, v)</script><p> $ \bold X = (x_1, \dots , x_T)$ 表示文字序列，$v$ 为提取的图像特征。</p><p>  LSTM的转换函数：</p><script type="math/tex; mode=display">h_t = \sigma(Wx_{t-1}+Uh_{t-1}+\mathbb{1}(t=1)\cdot Cv)</script><p>​    图像特征仅在开始输入<strong>一次</strong>。</p></li></ul><ul><li><p><strong>语义概念检测 </strong></p><p>作者将语义标签检测作为多标签分类问题。</p><p>首先先从训练集的文字说明中提取常见的 $K \approx 1000$个单词作为分类标签 $y_i = [y_{i1}，\dots，y_{iK}] \in \{0, 1\}^K$。</p><p>标签$s_i$使用MLP来预测(Ps：这里可能是在CNN的基础上加入MLP)，</p><script type="math/tex; mode=display">s_i = \sigma(MLP(v_i))</script><p>$s_i$表示每个标签的概率，也可以理解为权重。</p><p>优化目标函数：</p><script type="math/tex; mode=display">\frac 1N\sum_{i=1}^N \sum_{k=1}^K {(y_{ik}\log s_{ik}+(1-y_{ik}\log(1-s_{ik})))}</script></li><li><p><strong>SCN-RNN</strong></p><p>这一步就是将语义标签嵌入到RNN中。 </p><p><img src="https://github.com/McGinn7/mcginn7.github.io/blob/master/img/temp/1534596069120.png?raw=true" alt></p><p>嵌入相关公式：</p><script type="math/tex; mode=display">\hat x_{t-1}=W_bs\bigodot W_cx_{t-1} \\\hat h_{t-1} = U_bs\bigodot U_ch_{t-1} \\z=\mathbb{1}(t=1)\cdot Cv \\h_t = \sigma(W_a\hat x_{t-1} + U_a\hat h_{t-1} + z)</script></li><li><p><strong>视频文字生成(video caption)</strong></p><p>视频的图像特征包括两部分：均值池化2D CNN提取的图像特征和3D CNN提取的特征，两个特征连接起来作为视频的图像特征。</p></li></ul><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><ul><li>在数据集COCO和Youtube2Text的各个评估指标全面提升。</li></ul><p><img src="https://github.com/McGinn7/mcginn7.github.io/blob/master/img/temp/1534596916958.png?raw=true" alt></p><p><img src="https://github.com/McGinn7/mcginn7.github.io/blob/master/img/temp/1534596858609.png?raw=true" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;​    该论文提出了语义组合网络(Semantic Compositional Network, SCN)，其有效利用语义概念（标签）来达
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The Binding of Isaac:Afterbirth+总结</title>
    <link href="http://mcginn7.github.io/2018/07/19/The%20Binding%20of%20Isaac%20Afterbirth+%E6%80%BB%E7%BB%93/"/>
    <id>http://mcginn7.github.io/2018/07/19/The Binding of Isaac Afterbirth+总结/</id>
    <published>2018-07-19T07:02:03.000Z</published>
    <updated>2018-07-21T07:20:04.070Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><img src="http://www.chinabaike.com/uploads/allimg/160614/031Q331C-41.jpg" alt="献血袋"></p><p>献血袋：扣半颗红心（子宫层一颗），掉落随机数量（通常1）的硬币。献血袋很强，很容易刷起来。</p></li><li><p><img src="http://ins.lookgame.com/static/allimg/151130/5-151130101R4.png" alt="手术刀"></p><p>手术刀：在地上制造褐色和蓝色两个通道并传送，传送出来时有短暂无敌，可以做到：</p><ol><li><strong>白嫖卖血机</strong>，喂黑小孩，进出刺房等；</li><li>进BOSS房和挑战房时，开箱子后直接传出去。</li></ol></li><li><p>在白心的隐藏房，使用存血罐可以吐出白心。配合1+1和肉刀可以生成N多肉哥。</p></li><li><p>钥匙通常留给商店使用。</p></li><li><p>睫毛膏是负面道具，不要拿。</p></li><li><p>商店高概率刷出复眼（复制本房间的道具，未购买的道具也可以复制），最好等出了打折券再用。</p></li><li><p>20分钟内打败妈腿会开Boss Rush房；30分钟内打败妈心开启Blue Womb(蓝色子宫，打hush)房。使用<strong>MaMa Mega!</strong>可以<strong>强制</strong>开启br和bw。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;http://www.chinabaike.com/uploads/allimg/160614/031Q331C-41.jpg&quot; alt=&quot;献血袋&quot;&gt;&lt;/p&gt;
&lt;p&gt;献血袋：扣半颗红心（子宫层一颗），掉落随机数量（通常1）的硬币。献血袋
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>论文阅读记录</title>
    <link href="http://mcginn7.github.io/2018/07/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    <id>http://mcginn7.github.io/2018/07/17/论文阅读记录/</id>
    <published>2018-07-17T02:33:16.000Z</published>
    <updated>2018-07-17T02:57:19.822Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2014"><a href="#2014" class="headerlink" title="2014"></a>2014</h3><ul><li><a href="https://arxiv.org/abs/1406.2661v1" target="_blank" rel="noopener">Generative Adversarial Networks</a><ul><li><a href="https://srome.github.io//An-Annotated-Proof-of-Generative-Adversarial-Networks-with-Implementation-Notes/" target="_blank" rel="noopener">An Annotated Proof of Generative Adversarial Networks with Implementation Notes</a></li></ul></li><li><a href="https://arxiv.org/abs/1411.1784" target="_blank" rel="noopener">Conditional Generative Adversarial Nets</a></li></ul><h3 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h3><ul><li><a href="https://arxiv.org/abs/1610.09585" target="_blank" rel="noopener">Conditional Image Synthesis With Auxiliary Classifier GANs</a></li><li><a href="https://arxiv.org/abs/1606.03657" target="_blank" rel="noopener">InfoGAN: Interpretable Representation Learning by Information Maximizing  Generative Adversarial Nets</a></li></ul><h3 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h3><ul><li><a href="https://arxiv.org/abs/1701.07875" target="_blank" rel="noopener">Wasserstein GAN</a><ul><li><a href="https://zhuanlan.zhihu.com/p/25071913" target="_blank" rel="noopener">令人拍案叫绝的Wasserstein GAN</a></li></ul></li><li><a href="https://arxiv.org/abs/1704.00028" target="_blank" rel="noopener">Improved Training of Wasserstein GANs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2014&quot;&gt;&lt;a href=&quot;#2014&quot; class=&quot;headerlink&quot; title=&quot;2014&quot;&gt;&lt;/a&gt;2014&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1406.2661v1&quot; target=&quot;_bla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu离线安装软件包</title>
    <link href="http://mcginn7.github.io/2018/06/05/apt-offline%E7%AE%A1%E7%90%86Ubuntu%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E5%8C%85/"/>
    <id>http://mcginn7.github.io/2018/06/05/apt-offline管理Ubuntu离线安装软件包/</id>
    <published>2018-06-05T11:27:37.000Z</published>
    <updated>2018-06-06T06:26:39.635Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://wiki.ubuntu.org.cn/Apt-offline离线安装指南" target="_blank" rel="noopener">apt-offline离线安装指南</a></li><li><a href="https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/" target="_blank" rel="noopener">https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/</a></li><li><a href="http://manpages.ubuntu.com/manpages/precise/man8/apt-offline.8.html#contenttoc4" target="_blank" rel="noopener">http://manpages.ubuntu.com/manpages/precise/man8/apt-offline.8.html#contenttoc4</a></li><li><a href="https://www.debian.org/" target="_blank" rel="noopener">https://www.debian.org/</a></li><li><a href="https://camicri.github.io/camicri-cube/#/" target="_blank" rel="noopener">https://camicri.github.io/camicri-cube/#/</a></li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>需要升级/安装软件的电脑无网络。</li><li>软件要安装到多台电脑上，且软件较大，下载时间长。</li></ul><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ul><li>由于<strong>apt-offline</strong>的安装有依赖，离线安装会失败，所以需要借助<strong>Camicri Cube</strong>来完成<strong>apt-offline</strong>的安装。</li><li>不用<strong>Camicri Cube</strong>完成全部安装是因为它貌似不支持命令行，只有可视化界面操作。如果安装的包较多，就比较麻烦。而<strong>apt-offline</strong>支持命令行操作，一次性可以打包多个安装包，比较方便。</li></ul><h3 id="Camicri-Cube完成离线系统升级"><a href="#Camicri-Cube完成离线系统升级" class="headerlink" title="Camicri Cube完成离线系统升级"></a>Camicri Cube完成离线系统升级</h3><ul><li>在<strong>离线</strong>电脑上打开Camicri Cube，创建一个<strong>project</strong>，关闭后打包Cube目录下相应的project。</li><li>在<strong>联网</strong>电脑上，将打包文件解压到Cube目录下的project目录，然后用Cube打开这个project。</li><li>点击  <strong>Cube -&gt; Repository -&gt; Download Repositories</strong>  进行下载更新。</li><li>点击 <strong> Asterisk -&gt; Upgradable</strong> ， <strong> Cube -&gt; Download -&gt; Mark All Updates for Download </strong>，  <strong> Cube -&gt; Download -&gt; Download All Marked Packages</strong> ，就可以完成软件包的升级。</li><li>在上方的搜索框输入<strong>apt-offline</strong>和<strong>vim</strong>，点download进行下载。</li><li>在<strong>联网</strong>电脑的project打包后传到<strong>离线</strong>电脑上，<strong>覆盖</strong>原先的project，然后用Cube打开。</li><li><strong> Cube -&gt; System -&gt; Update Computer’s Repositories</strong> 更新Repository。</li><li><strong>Cube -&gt; Install -&gt; Mark All Downloaded for Installation</strong>  , <strong>Cube -&gt; Install -&gt; Install All Marked Packages </strong> ，完成安装软件。</li></ul><h3 id="apt-offline下载及安装离线软件包"><a href="#apt-offline下载及安装离线软件包" class="headerlink" title="apt-offline下载及安装离线软件包"></a>apt-offline下载及安装离线软件包</h3><ul><li><p>假设要在<strong>离线</strong>电脑安装mysql-server，先在离线电脑运行以下命令来，完成安装包的行为和定义签名文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-offline set debian-install.sig --install-packages mysql-server</span><br></pre></td></tr></table></figure></li><li><p>将生成的<strong>debian-install.sig</strong>文件上传到<strong>联网</strong>电脑执行下载并打包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-offline get debian-install.sig --bundle debian-install.zip</span><br></pre></td></tr></table></figure></li><li><p>将打包好的<strong>debian-install.zip</strong>传到<strong>离线</strong>电脑上，运行下面的命令来更新APT database:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-offline install debian-install.zip</span><br></pre></td></tr></table></figure></li><li><p>最后运行apt-get来完成安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.ubuntu.org.cn/Apt-offline离线安装指南&quot; ta
      
    
    </summary>
    
    
  </entry>
  
</feed>
