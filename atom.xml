<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mcginn&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mcginn7.github.io/"/>
  <updated>2020-02-15T15:07:06.668Z</updated>
  <id>http://mcginn7.github.io/</id>
  
  <author>
    <name>Mcginn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSAPP - datalab</title>
    <link href="http://mcginn7.github.io/2020/02/14/CSAPP-datalab/"/>
    <id>http://mcginn7.github.io/2020/02/14/CSAPP-datalab/</id>
    <published>2020-02-14T14:55:06.000Z</published>
    <updated>2020-02-15T15:07:06.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动测试"><a href="#自动测试" class="headerlink" title="自动测试"></a>自动测试</h2><ol><li><p>使用 dlc 检测代码是否符合题目要求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unix&gt; ./dlc bits.c</span><br></pre></td></tr></table></figure></li><li><p>编译并调用自动测试程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unix&gt; make</span><br><span class="line">unix&gt; ./btest</span><br></pre></td></tr></table></figure></li></ol><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="bitXor-x-y"><a href="#bitXor-x-y" class="headerlink" title="bitXor(x, y)"></a>bitXor(x, y)</h3><p><strong>要求</strong>：仅使用 ~ 和 &amp; 完成异或运算。</p><p><strong>运算</strong>：~ &amp;</p><p><strong>做法</strong>：画出 &amp; 运算符的真值表，配合 ~ 运算符易得。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~(x&amp;y)&amp;~(~x&amp;~y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tmin"><a href="#tmin" class="headerlink" title="tmin()"></a>tmin()</h3><p><strong>要求</strong>：返回二进制补码表示的<strong>最小整数</strong>。</p><p><strong>运算</strong>： ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>做法</strong>：补码表示的最小整数为 $10\dots 0$，即符号位为 1，其余位为 0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isTmax-x"><a href="#isTmax-x" class="headerlink" title="isTmax(x)"></a>isTmax(x)</h3><p><strong>要求</strong>：判断 x 是否为补码表示的最大整数。</p><p><strong>运算</strong>：! ~ &amp; ^ | +</p><p><strong>做法</strong>：当 x 为最大整数时，补码表示为 $01\dots 1$，即符号位为 0，其余位为 1，可得 x + 1 = ~x。</p><p>然而当 x = -1 时，前述等式也成立，因此需要排除掉这种情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !((~x^(x+<span class="number">1</span>)) | !(x+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="allOddBits-x"><a href="#allOddBits-x" class="headerlink" title="allOddBits(x)"></a>allOddBits(x)</h3><p><strong>要求</strong>：判断 x 二进制表示下的奇数位是否全为 1。</p><p><strong>运算</strong>：! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>做法</strong>：规则允许使用最大为 0xFF 的整数，因此可使用 &amp; 运算每 8 位合并 x 的所有位，然后使用 ^ 运算判断奇数位是否全为 1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !(((x&gt;&gt;<span class="number">24</span>) &amp; (x&gt;&gt;<span class="number">16</span>) &amp; (x&gt;&gt;<span class="number">8</span>) &amp; x &amp; <span class="number">0xAA</span>) ^ <span class="number">0xAA</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="negate-x"><a href="#negate-x" class="headerlink" title="negate(x)"></a>negate(x)</h3><p><strong>要求</strong>：计算返回 -x。</p><p><strong>运算</strong>：! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>做法</strong>：首先将有符号数转换成<strong>无符号数</strong>以便于位运算处理。</p><p>相互转换的规则是：数值可能会改变，但<strong>位模式不变</strong>。因此，补码转换为无符号数为：</p><script type="math/tex; mode=display">T2U_w(x)=\left\{\begin{array}{lr}x+2^w, && x < 0 \\ x, && x\ge 0\end{array}\right.</script><p>假设 $x \neq 0$，有 $x+(-x)=0$，两侧同加上 $2^w$ 并移项得</p><script type="math/tex; mode=display">-x + 2^w = 2^w - x = (2^w-1-x)+1=\sim x +1</script><p>在 $x &gt; 0$ 时，$-x$ 的补码表示与 $-x+2^w$ 的位模式相同，等于 $\sim x + 1$。</p><p>在 $x \le 0$ 时，$-x + 2^w$ 超出 $w$ 位二进制的表示范围，其结果为 $-x$ 的二进制表示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~x+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isAsciiDigit-x"><a href="#isAsciiDigit-x" class="headerlink" title="isAsciiDigit(x)"></a>isAsciiDigit(x)</h3><p><strong>要求</strong>：判断值 x 是否在范围 [0x30, 0x39] 中。</p><p><strong>运算</strong>： ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>做法</strong>：首先前 $w - 4$ 位的值必须为 3，该判断容易实现。</p><p>剩余 4 位划分成 [0, 7] 和 [8, 9] 的两个区间来处理。</p><p>第 4 位为 0 时，剩余 3 位可为任意值，表示区间 [0, 7]。</p><p>第 4 位为 1 时，8 和 9 的二进制表示分别为 1000 和 1001，即高 3 位必须为 100。</p><p>利用<strong>掩码表示</strong>的思想，x 为 110111(0x37) 的子集或是 111001(0x39) 的子集。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (!((x&gt;&gt;<span class="number">4</span>)^<span class="number">3</span>)) &amp; (!(x^(x&amp;<span class="number">0x37</span>)) | !(x^(x&amp;<span class="number">0x39</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="conditional-x-y-z"><a href="#conditional-x-y-z" class="headerlink" title="conditional(x, y, z)"></a>conditional(x, y, z)</h3><p><strong>要求</strong>：执行三目运算符 x ? y : z：当 x 不为 0 时，返回 y；否则返回 z。</p><p><strong>运算</strong>：! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>做法</strong>：核心思想是利用 x 得出位模式等于 -1（全为 1）的值，使用 &amp; 运算和 ~ 运算得到 y 或 z 的位模式，最后使用 | 得到结果。</p><p>! 运算将 x 映射到 [0, 1] 区间，使用函数 $f(x)=!x + (-1)$ 取出 y，则 $\sim f(x)$ 取出 z。</p><p>当 $x \neq 0$ 时，$f(x)=-1$，其位模式全为 1，因此 $f(x) \&amp; y = y$。</p><p>当 $x = 0$ 时，$f(x)=0$，其位模式全为 0，因此 $f(x)\&amp;y=0$。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">  x = !x + ~<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> (y &amp; x) | (z &amp; ~x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isLessOrEqual-x-y"><a href="#isLessOrEqual-x-y" class="headerlink" title="isLessOrEqual(x, y)"></a>isLessOrEqual(x, y)</h3><p><strong>要求</strong>：判断 x &lt;= y。</p><p><strong>运算</strong>：! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>做法</strong>：将问题转换成判断 $a + b \le0$，新问题下需要注意<strong>溢出问题</strong>。</p><p>当 $a+b&lt;0$ 时，其符号位为 1，因此执行 $a+b$ 并取出符号位可解决问题。但是，存在 $a+b$ <strong>上溢出</strong>导致其符号位也为 1 的情况。</p><p>进一步地，当 $a$ 和 $b$ 符号位相同时，$a+b&lt;0$ 当且仅当符号位均为 1。符号位不同时，$a+b$ 不存在溢出问题。</p><p>$a+b=0$ 特判 $x=y$ 即可。</p><p>注意取符号位是 &amp;1 操作不可省略，因为机器使用了<strong>算术右移</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (!(x^y)) | ((x&amp;~y)&gt;&gt;<span class="number">31</span>&amp;<span class="number">1</span>) | ((!((x^y)&gt;&gt;<span class="number">31</span>))&amp;((x+(~y+<span class="number">1</span>))&gt;&gt;<span class="number">31</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="logicalNeg-x"><a href="#logicalNeg-x" class="headerlink" title="logicalNeg(x)"></a>logicalNeg(x)</h3><p><strong>要求</strong>：计算 !x：当 x = 0 时返回 1；当 x ≠ 0 时返回 0。</p><p><strong>运算</strong>：~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>做法</strong>：当 $x \neq 0$ 时，$x|(-x)$ 的符号位必然为 1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~(x|(~x+<span class="number">1</span>))&gt;&gt;<span class="number">31</span>&amp;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="howManyBits-x"><a href="#howManyBits-x" class="headerlink" title="howManyBits(x)"></a>howManyBits(x)</h3><p><strong>要求</strong>：使用二进制补码表示 x 的最少位数。</p><p><strong>运算</strong>：! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p><p><strong>做法</strong>：当 $x \ge 0$ 时，位数取决于 1 的最高位数；当 $x &lt; 0$ 时，位数则取决于 0 的最高位数（根据补码表示的定义，符号位起连续的 1 可合并起来用一个位表示）。</p><p>首先考虑将负数取反，将问题统一成计算 1 的最高位，利用<strong>算术右移</strong>即可完成， 即 $x=x \oplus (x &gt;&gt;31)$。</p><p>然后使用<strong>二分法</strong>计算 1 的最高位：判断高 16 位是否大于 0，若大于 0 说明高 16 位中存在 1，否则 1 在低 16 位中。使用 conditional 函数更新 x（取出高 16 位或低 16 位）。迭代判断 8 位、4 位等等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> bit;</span><br><span class="line">  <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">  x = x ^ (x &gt;&gt; <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">  bit = !!(x &gt;&gt; <span class="number">16</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">  res = res + bit;</span><br><span class="line">  x = x &gt;&gt; bit;</span><br><span class="line"></span><br><span class="line">  bit = !!(x &gt;&gt; <span class="number">8</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">  res = res + bit;</span><br><span class="line">  x = x &gt;&gt; bit;</span><br><span class="line"></span><br><span class="line">  bit = !!(x &gt;&gt; <span class="number">4</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">  res = res + bit;</span><br><span class="line">  x = x &gt;&gt; bit;</span><br><span class="line"></span><br><span class="line">  bit = !!(x &gt;&gt; <span class="number">2</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">  res = res + bit;</span><br><span class="line">  x = x &gt;&gt; bit;</span><br><span class="line"></span><br><span class="line">  bit = !!(x &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  res = res + bit;</span><br><span class="line">  x = x &gt;&gt; bit;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x + res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="floatScale2-uf"><a href="#floatScale2-uf" class="headerlink" title="floatScale2(uf)"></a>floatScale2(uf)</h3><p><strong>要求</strong>：计算 2 * uf，若 uf 为特殊值值时，直接返回 uf。</p><p><strong>运算</strong>：Integer/unsigned 相关运算；||，&amp;&amp;，if 和 while 等判断语句。</p><p><strong>做法</strong>：这道题需要对浮点数表示比较了解，单精度（float）表示包括：1 位符号，8 位阶码，23 位尾数。这里使用 e 表示阶码的无符号数，B 表示阶码的偏置值，f 表示尾数值。</p><ol><li><p>当 e 全 0 时，表示非规格化的值，真实值 $V=f\times 2^{1-B}$。</p><p>乘上系数 2 时，阶码是否变动看 2f 是否大于等于 1，即 f 最高位是否为 1。由于阶码在尾数的高位，该情况下位数左移 1 位即可。</p></li><li><p>当 e 不全 0 也不全 1 时，表示规格化的值，真实值 $V=(1+f)\times 2^{e - B}$。</p><p>阶码 + 1 即可。</p></li><li><p>当 e 全 1 时，表示特殊值。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> s = uf &gt;&gt; <span class="number">31</span> &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> e = uf &gt;&gt; <span class="number">23</span> &amp; <span class="number">0xff</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> f = uf ^ (s &lt;&lt; <span class="number">31</span>) ^ (e &lt;&lt; <span class="number">23</span>);</span><br><span class="line">  <span class="keyword">if</span> (!(e^<span class="number">0xff</span>)) <span class="keyword">return</span> uf;</span><br><span class="line">  <span class="keyword">if</span> (!e) <span class="keyword">return</span> (s &lt;&lt; <span class="number">31</span>) | (f &lt;&lt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> (s &lt;&lt; <span class="number">31</span>) | ((e + <span class="number">1</span>) &lt;&lt; <span class="number">23</span>) | f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="floatFloat2Int-uf"><a href="#floatFloat2Int-uf" class="headerlink" title="floatFloat2Int(uf)"></a>floatFloat2Int(uf)</h3><p><strong>要求</strong>：将浮点数 uf 转换成整数。 </p><p><strong>运算</strong>：Integer/unsigned 相关运算；||，&amp;&amp;，if 和 while 等判断语句。</p><p><strong>做法</strong>：当浮点数是 0 和规格化的值时，才有可能用整数表示，其余部分注意整数表示范围即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> s = uf &gt;&gt; <span class="number">31</span> &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> e = uf &gt;&gt; <span class="number">23</span> &amp; <span class="number">0xff</span>;</span><br><span class="line">  <span class="keyword">int</span> f = uf ^ (s &lt;&lt; <span class="number">31</span>) ^ (e &lt;&lt; <span class="number">23</span>);</span><br><span class="line">  <span class="keyword">if</span> (!(e | f)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  e = e - <span class="number">0x7f</span>;</span><br><span class="line">  <span class="keyword">if</span> (e &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (e &gt; <span class="number">30</span> + (s &amp; !f)) <span class="keyword">return</span> <span class="number">0x80000000</span>u;</span><br><span class="line">  f = ((<span class="number">1</span> &lt;&lt; <span class="number">23</span>) | f) &gt;&gt; (<span class="number">23</span> - e);</span><br><span class="line">  <span class="keyword">if</span> (s) <span class="keyword">return</span> -f;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="floatPower2-x"><a href="#floatPower2-x" class="headerlink" title="floatPower2(x)"></a>floatPower2(x)</h3><p><strong>要求</strong>：使用浮点数表示 2^x。无法表示时：过小返回 0，过大返回 +INF。</p><p><strong>运算</strong>：Integer/unsigned 相关运算；||，&amp;&amp;，if 和 while 等判断语句。</p><p><strong>做法</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  x = x + <span class="number">0x7f</span>;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> x &lt; <span class="number">0xff</span> ? x &lt;&lt; <span class="number">23</span> : <span class="number">0x7f800000</span>u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自动测试&quot;&gt;&lt;a href=&quot;#自动测试&quot; class=&quot;headerlink&quot; title=&quot;自动测试&quot;&gt;&lt;/a&gt;自动测试&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用 dlc 检测代码是否符合题目要求&lt;/p&gt;
&lt;figure class=&quot;highlight bash
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SGU 153-252</title>
    <link href="http://mcginn7.github.io/2020/02/13/SGU-153-252/"/>
    <id>http://mcginn7.github.io/2020/02/13/SGU-153-252/</id>
    <published>2020-02-13T03:20:12.000Z</published>
    <updated>2020-02-13T13:51:46.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><p>计划一年内（截止 2021 年 1 月 1 日）把 SGU 500 刷完，形式以所有题目给出翻译后的简要题意和解题思路概要。</p><p><a href="https://github.com/McGinn7/ACMSGURU-Code" target="_blank" rel="noopener">AC 代码库</a></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>153 <strong>Playing with matches</strong></p><p><strong>题意</strong>  有 $1\le N \le 10^9$ 根火柴，Little 和 Petya 轮流取，每次能取 $1, P_1, P_2, \dots , P_m(2\le P_i \le 9, 0\le m \le 8)$ 根火柴，判断先/后手必胜。</p><p><strong>分析</strong> 当 $N$ 较小时，可用 dp 计算火柴为 $n$ 时状态（必胜/必败）。由于 $P_i\le 9$，每个点的状态只与前面的 9 个状态有关，从而每个状态的 SG 值最大为 10。并且根据 SG 值的定义，前面 9 个状态的 SG 值两两不同，因此 9 个状态的总数约为 $10!=3,628,800‬$。通过找出循环节，即可计算 $N$ 的 SG 值，从而判断胜负态。</p><hr><p>154 <strong>Factorial</strong></p><p><strong>题意</strong>  求最小自然数 $N$，满足 $N!$ 有 $0 \le Q \le 10^8$ 个尾数 0。</p><p><strong>分析</strong>  尾数 0 只与 $N!$ 的质因子 2 和 5 有关。求 $N!$ 中质因子 $p$ 的个数：</p><script type="math/tex; mode=display">\frac N p + \frac N {p^2} + \dots</script><p>显然， 5 的个数少于 2 的个数，因此尾数 0 只与 5 的个数相关。</p><p>上述公式具有<strong>非递减</strong>性质，因此可以<strong>二分</strong>计算最小自然数 $N$。</p><hr><p>154 <strong>Cartesian Tree</strong></p><p><strong>题意</strong>  给定 $1\le N\le 50000$ 个 <key, value> 对，要求利用 key 值构造一棵<strong>二叉搜索树</strong>，并且满足<strong>小根堆</strong>的性质：如果 y 是 x 的父节点，则有 y.value &lt; x.value。数据保证 key 值和 value 值两两不同。</key,></p><p><strong>分析</strong>  Cartisian Tree 模板题。 </p><hr><p>xxx</p><p><strong>题意</strong>  </p><p><strong>分析</strong>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h1&gt;&lt;p&gt;计划一年内（截止 2021 年 1 月 1 日）把 SGU 500 刷完，形式以所有题目给出翻译后的简要题意和解题思路概要。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>回文分解算法</title>
    <link href="http://mcginn7.github.io/2019/11/20/Palindromic-Factorization/"/>
    <id>http://mcginn7.github.io/2019/11/20/Palindromic-Factorization/</id>
    <published>2019-11-20T11:30:36.000Z</published>
    <updated>2019-11-28T03:19:26.596Z</updated>
    
    <content type="html"><![CDATA[<p>内容基本是翻译自论文《A Subquadratic Algorithm for Minimum Palindromic Factorization》，主要对文章进行翻译，力图简化算法的证明过程并给出相应的结论。简化证明过程可能存在不严谨的地方，如有需要可自行查看参考资料中的论文原文。</p><h2 id="太长不看版"><a href="#太长不看版" class="headerlink" title="太长不看版"></a>太长不看版</h2><p>给定一字符串，对于每个右端点为 $r$ 的回文子串，将左端点记为 $l_1\lt l_2\lt \dots \lt l_k$，记间距 $Δ_i=l_i-l_{i-1}$，结论有：</p><ol><li>间距 $Δ_i$ 构成单调递减序列（严格来说，是单调非增序列），即 $\forall i&gt;1,Δ_i\ge Δ_{i-1}$。</li><li>间距 $Δ_i$ 不超过 $\log(r)$ 种。</li></ol><p>基于上述 2 点结论，可以在 $\log(r)$ 时间内利用端点 $r-1$ 的信息计算得到 $r$ 的回文左端点，进而对字符串进行回文分解。 </p><p>时间复杂度 $O(N\log N)$，空间复杂度 $O(N)$。</p><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>给定长为 $N$  的字符串 $S$，在 $O(N\log N)$ 时间内对字符串 $S$ 分解为最少数量的回文子串，即最小回文分解：</p><script type="math/tex; mode=display">S = S_1S_2\dots S_l</script><p>其中，$S_i$ 都是<strong>回文串</strong>。</p><h2 id="论文摘录"><a href="#论文摘录" class="headerlink" title="论文摘录"></a>论文摘录</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>首先，定义 $PL(S)$ 表示字符串 $S$ 的最小回文分解的子串数量。如 $PL(abaab)=2$，拆分成 $a$ 和 $baab$ 两个子回文串。</p><p>通过<strong>动态规划</strong>的思想，可以在 $O(N^2)$ 时间内计算 $PL(S)$：</p><script type="math/tex; mode=display">PL(S[1..j])=\min _i \{PL(S[1..i-1])+1 : i\le j, S[i..j]\ is\ a\ palindrome\}</script><p>具体实现为：对于每个右端点 $j$，维护一个左端点集合 $P_j$，对于每个 $i\in P_j$ 都有 $S[i..j]$ 是回文串。基于集合 $P_j$ 可以枚举计算得到 $P_{j+1}$ 集合：如果 $S[i..j]$ 是回文串且 $S[i-1]=S[j+1]$，则 $i-1\in P_{j+1}$。</p><p>该论文的算法主要改进左端点 $P_j$ 的表示，利用回文串的性质将左端点划分成 $O(\log j)$ 个<strong>等差数列</strong>的集合 $G_j$，在 $O(\log j)$ 时间内从 $G_{j-1}$ 转移计算 $G_j$。</p><hr><p><strong>Border</strong>：串 $y$ 是串 $x$ 的 border 表示 $y$ 既是 $x$ 的前缀也是 $x$ 的后缀。</p><ol><li><p>$x$ 也是其本身的 border。</p></li><li><p>当 $y \neq x$ 时，称其为 <strong>proper border</strong>。</p></li></ol><hr><h3 id="引理1"><a href="#引理1" class="headerlink" title="引理1"></a>引理1</h3><p>记串 $y$ 为回文串 $x$ 的后缀，则 $y$ 是 $x$ 的 border 当且仅当 $y$ 是回文串。</p><h3 id="引理2"><a href="#引理2" class="headerlink" title="引理2"></a>引理2</h3><p>记串 $y$ 为串 $x$ 的 border 并且 $|x|\le 2|y|$，那么 $x$ 是回文串当且仅当 $y$ 是回文串。</p><h3 id="引理3"><a href="#引理3" class="headerlink" title="引理3"></a>引理3</h3><p>记串 $y$ 为回文串 $x$ 的<strong>真后缀（proper suffix）</strong>，那么 $|x|-|y|$ 是 $x$ 的周期（period）当且仅当 $y$ 是回文串。特别地，$|x|-|y|$ 是 $x$ 最小周期当且仅当 $y$ 是 $x$ 的最长回文真后缀。</p><ul><li>部分网上博文将 period 译为循环节是不太准确的。例如 $x=aba$ 和 $y=a$，此时 $|x|-|y|=2$，并不能整除 $|x|=3$。因此，这里我译为周期。</li></ul><h3 id="引理4"><a href="#引理4" class="headerlink" title="引理4"></a>引理4</h3><p>记 $x$ 为回文串，$y$ 是 $x$ 的最长回文真后缀，$z$ 是 $y$ 的最长回文真后缀，以及 $u, v$ 满足 $x=uy$ 和 $y=vz$，则有：</p><p>(1) $|u|\ge |v|$;</p><p>(2) 如果 $|u|\gt |v|$，则 $|u| \gt |z|$;</p><p>(3) 如果 $|u|=|v|$，则 $u=v$。</p><p><strong>证明</strong></p><p>(1) 根据<strong>引理3</strong>，$|u|=|x|-|y|$ 是 $x$ 的最小周期，$|v|=|y|-|z|$ 是 $y$ 的最小周期。根据 $|y|$ 的长度分两种情况考虑：</p><ol><li>当 $2|y|\le |x|$ 时，有 $|u|\ge|y|&gt;|v|$。</li><li>当 $2|y|&gt;|x|$ 时，$u$ 是 $x$ 的周期同时也是 $y$ 的周期。由于 $v$ 是 $y$ 的最小周期，因此 $|u| \ge |v|$。</li></ol><p>(2) 显然，根据 $x,y$ 均是回文串，可知 $v$ 是 $x$ 的前缀，记 $x=vw$。根据回文串性质，如图 1 所示， $z$ 是 $w$ 的 border 且 $|w|=|zu|$（注意，这里仅仅是长度相等，并不是说 $w=zu$）。根据条件 $|u|\gt |v|$，可得 $|w|&gt;|y|$。这里使用<strong>反证法</strong>，假设结果不成立即 $|u|\le |z|$，那么 $|w|=|zu|\le 2|z|$，而根据<strong>引理2</strong>的结论 $w$ 是回文串，与 $y$ 是 $x$ 的最长回文真后缀相矛盾，因此假设不成立。</p><img src="/2019/11/20/Palindromic-Factorization/image-20191120213959957.png"><p><center>图 1. 反证法的结果图</center><br>(3) 上述证明过程中可知 $v$ 是 $x$ 的前缀，并且 $u$ 也是 $x$ 的前缀。在 $|u|=|v|$ 的条件下，显然 $u=v$。</p><h3 id="引理5"><a href="#引理5" class="headerlink" title="引理5"></a>引理5</h3><p>回文左端点集合 $P_j$ （有序）的点间距是非增的，并且最多有 $O(\log j)$ 种间距。</p><p><strong>证明</strong> </p><p>对于任意 $i\in [2..|P_j|-1]$，记 $x = S[p_{i-1}..j], y=S[p_i..j],z=S[p_{i+1}..j]$，则间距有 $|u|=|x|-|y|$ 和 $|v|=|y|-|z|$。</p><p>根据<strong>引理4(1)</strong>有 $|u|\ge|v|$，从而间距非增。一旦间距发生变化即 $|u|\gt |v|$，根据<strong>引理4(2)</strong>有 $|u|&gt;|z|$，进而 $|x|&gt;|u|+|z|&gt;2|z|$，长度至少翻倍，因而发生变化的次数不超过 $O(\log j)$，也就是说只有 $O(\log j)$ 种间距。</p><hr><p>对于任意正整数间距 Δ，定义</p><script type="math/tex; mode=display">P_{j,Δ}=\{p_i:1<i\le m, p_i-p_{i-1}=Δ\}</script><p>特别地，定义 $P_{j,∞}=\{p_1\}$。</p><p>对于每个非空 $P_{j,Δ}$ 可以使用三元组 $(\min P_{j,Δ},Δ,|P_{j,Δ}|)$ 表示，同时定义 $G_j$ 为按 Δ 降序的三元组列表，其大小为 $O(\log j)$。</p><hr><h3 id="引理6"><a href="#引理6" class="headerlink" title="引理6"></a>引理6</h3><p>记 $p_i$ 和 $p_{i+1}$ 为集合 $P_{j-1,Δ}$ 的两个<strong>连续</strong>元素，则 $p_i-1\in P_j$ 当且仅当 $p_{i+1}-1\in P_j$。</p><p><strong>证明</strong></p><p>根据定义有 $p_{i+1}-p_i=Δ$ 和 $p_i - p_{i-1}=Δ$，根据<strong>引理4(3)</strong>可得 $S[p_i-1]=S[p_{i+1}-1]=c$。当 $S[j]=c$，显然有 $p_i -1\in P_j \Leftrightarrow p_{i+1}-1\in P_j$，也就是说 $p_i-1$ 和 $p_{i+1}-1$ 都能和右端点 $j$ 构成回文串。</p><p>利用<strong>引理6</strong>，对于集合 $P_{j, Δ}$ 可以常数时间内更新，也就是可以在 $O(\log j)$ 时间内利用 $G_{j-1}$ 计算得到 $G’_j$：</p><script type="math/tex; mode=display">G'_j =\{(i-1, Δ,k):(i, Δ,k)\in G_{j-1},i>1,and\ S[i-1]=S[j]\}</script><p>注意从 $P_{j-1}$ 转移得到 $P_j$ 的过程中，部分左端点 $p_i-1$ 不能够与 $j$ 形成回文串而被剔除，因此 $P_j$ 中的间距会发生改变，需要进一步调整得到正确的三元组列表 $G_j$。</p><p>考虑 $P_{j-1,Δ}$ 中的三元组 $(p_i,Δ,k)$，当 $S[p_i-1]=S[j]$ 时，三元组 $(p_i-1,Δ,k)$ 插入到 $G_j$ 中。根据 $P_{j,Δ}$ 的定义，$p_i$ 的前一个元素 $p_{i-1}=p_i-Δ$，左端点 $p_{i-1}$ 可能不与 $j$ 形成新回文串而被剔除，此时 $P_j$ 中的 $p_i-1$ 的前一个元素不为 $p_{i-1}-1$，即新间距 $Δ’\gt Δ$。另一方面，旧端点的剔除只会影响每个组的首元素，因此只需将 $(p_i,Δ,k)$ 拆分成 $(p_i-1, Δ’,1)$ 和 $(p_i-1+Δ,Δ,k-1)$ 插入到 $G_j$ 中即可。</p><p>因为 $G_j$ 是有序的，所以具体实现过程中可实时记录前一个左端点的位置，以此计算新的间距 $Δ’$。此外，由于 $Δ’&gt;Δ$ 且间距是非增的，所以 $(p_i-1,Δ’,1)$ 可能与前一三元组具有相同的间距。通过合并相同间距的三元组，最终得到列表 $G_j$。</p><hr><h3 id="引理8"><a href="#引理8" class="headerlink" title="引理8"></a>引理8</h3><p>对于 $k\ge 2$，如果 $(i,Δ,k)\in G_j$，那么 $(i,Δ,k-1)\in G_{j-Δ}$。</p><p><strong>证明</strong></p><p>根据定义，$(i,Δ,k)\in G_j$ 等价于 $P_{j, Δ}=\{i,i+Δ,\dots, i+(k-1)Δ\}$。</p><p>要证明 $(i, Δ,k-1)\in G_{j-Δ}$，相当于要证明以下两点：</p><ol><li>$P_{j-Δ,Δ}\cap [i-Δ+1..j-Δ]=\{i,i+Δ,\dots, i+(k-2)Δ\}$；</li><li>$P_{j-Δ,Δ}\cap [1..i-Δ]=\emptyset$。</li></ol><p>记 $x=S[i-Δ..j],y=S[i..j]$。因为 $x,y$ 均是回文串，因此有 $S[i-Δ..j-Δ]=S[i..j]$，如图 2所示。因为两个串相等，显然 $\forall l\in [i..j]$，都有 $l\in P_j\Leftrightarrow l-Δ\in P_{j-Δ}$。更进一步地，两者的左端点间距也是相同的，即 $\forall l\in (i..j]$，有 $l \in P_{j,Δ}\Leftrightarrow l-Δ\in P_{j-Δ,Δ}$（<strong>注意：</strong>区间是左开右闭的）。因为 $\min P_{j,Δ} = i$，所以 $i-Δ\notin [i-Δ+1..j-Δ]$，第 1 点得证。</p><img src="/2019/11/20/Palindromic-Factorization/image-20191121212552874.png"><p><center>图 2. y是x的border</center><br>接下来证明第 2 点。要证明 $P_{j-Δ,Δ}\cap [1..i-Δ]=\emptyset $，只需要证明 $i-2Δ\notin P_{j-Δ}$，即串 $S[i-2Δ..j-Δ]$ 不是回文串。</p><p>使用<strong>反证法</strong>证明：假设 $S[i-2Δ..j-Δ]$ 是回文串。记 $w=S[i-2Δ..i-Δ-1]$，$w^R$ 表示串 $w$ 的反转串，如图 3所示。</p><p>因为 $S[i-2Δ..j-Δ]$ 是回文串，所以 $S[j-Δ+1..j-Δ]=w^R$。</p><p>因为 $S[i-Δ..j-Δ]$ 和 $S[i-Δ..j]$ 是回文串，所以有 $S[i-Δ..i-1]=w$ 和 $S[j-Δ+1..j]=w^R$，所以 $S[i-2Δ..j]=wS[i-Δ..j-Δ]w^R$ 也是回文串，即 $i-Δ\in P_{j,Δ}$。这与定义的 $i=\min P_{j,Δ}$ 相矛盾，所以假设不成立，即 $i-2Δ \notin P_{j-Δ}$。</p><img src="/2019/11/20/Palindromic-Factorization/image-20191121215159983.png"><p><center>图 3. S[i-2Δ..j-Δ]为回文串的示意图</center><br><strong>引理8</strong>阐述了一个事实：当 $|P_{j,Δ}|\ge 2$ 时，$P_{j,Δ} = P_{j-Δ,Δ}\cup\{\max P_{j,Δ}\}$，即 $P_{j,Δ}$ 仅多了一个元素而已。因此在计算 $PL_{j,Δ} = \min \{PL[i-1]+1:i\in P_{j,Δ}\}$ 时，只需考虑多出来的那个元素，维护 $PL_{j-Δ,Δ}$ 的信息即可加速计算。</p><p>那么在具体实现中如何维护 $PL_{j-Δ,Δ}$ 呢？暴力做法直接套 <em>map</em>，这样的空间复杂度为 $O(N\log N)$。接下来的<strong>引理9</strong>可将空间复杂度降至 $O(N)$。</p><hr><h3 id="引理9"><a href="#引理9" class="headerlink" title="引理9"></a>引理9</h3><p>记 $m=\min P_{j,Δ}-Δ$，则 $\forall l\in [j-Δ+1..j-1]$，有 $m\notin P_l$。</p><p><strong>证明</strong></p><p><strong>反证法</strong>：假设存在 $l\in [j-Δ+1..j-1]$，意味着 $S[m..l]$ 是回文串。</p><p>记 $h=l-(j-Δ)$，则 $S[m+h..l-h]$ 也是回文串，并且 $m&lt;m+h&lt;m+Δ$。</p><p>然而 $l-h$ 实际上等于 $j-Δ$，所以 $m+d\in P_{j-Δ,Δ}$。并且根据定义有 $m+Δ=\min P_{j-Δ,Δ}$，而 $m+h$ 则介于 $m$ 和 $m+Δ$ 之间，与定义 $P_{j-Δ,Δ}$ 相矛盾，即 $m+Δ$ 的前一个元素为 $m+h$ 而非 $m$ ，因此假设不成立。</p><img src="/2019/11/20/Palindromic-Factorization/image-20191122105243688.png"><p><center>图 4. 假设成立的结果图</center><br><strong>引理9</strong>说明位置 $m$ 在右端点范围 $[j-Δ,j]$ 中只会被 $j-Δ$ 和 $j$ 更新和使用，因此可将 $PL_{j-Δ,Δ}$ 的结果存放在 $GPL[m]$ 中，从而将空间复杂度降低至 $O(N)$。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="Palindrome-Partition"><a href="#Palindrome-Partition" class="headerlink" title="Palindrome Partition"></a>Palindrome Partition</h3><p><strong>来源</strong>  <a href="codeforces.com/problemset/problem/932/G">Codeforces 932G</a></p><p><strong>题意</strong>  给一字符串 $s(2\le s\le10^6)$，且 $|s|$ 是偶数。现要将串 $s$ 划分成<strong>偶数</strong>个子串 $(p_1,p_2,\dots,p_{2k})$，满足 $\forall i\in [1,2k], p_i=p_{2k-i+1}$。求满足条件的方案数，结果对 $10^9+7$ 取模。</p><p><strong>分析</strong>  串长 $|s| $ 是偶数，子串数量也是偶数，因此将串 $s$ 折半并按 $s_1s_ns_2s_{n-1}…s_{n/2}s_{n/2+1}$ 构造新串，便将原问题转换成将原串分解为若干偶数长度子回文串的方案数。</p><hr><h3 id="Reverses"><a href="#Reverses" class="headerlink" title="Reverses"></a>Reverses</h3><p><strong>来源</strong>  <a href="codeforces.com/problemset/problem/906/E">Codeforces 906E</a></p><p><strong>题意</strong>   给定两个字符串 $s, t(1\le |s|=|t| \le 5\times 10^5)$，允许翻转串 $t$ 若干<strong>不相交</strong>子串，使得翻转后串 $t$ 等于 $s$，求最少需要子串个数，并给出任一方案。</p><p><strong>分析</strong>  首先构造串 $str=s_1t_1s_2t_2\dots s_nt_n$。如果子串 $t[i..j]$ 翻转后与串 $s[i..j]$ 相等，则子串 $s_it_i..s_jt_j$ 是回文串。而如果子串 $t[i..j]=s[i..j]$，则 $s_it_i..s_jt_j$ 最坏情况下会分解成若干长度为 2 的子回文串。于是原问题转化成对串 $str$ 进行回文分解，在状态转移过程中长度为 2 的回文串在原问题中不属于翻转串，因此其代价为 0。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><h3 id="回文分解模板"><a href="#回文分解模板" class="headerlink" title="回文分解模板"></a>回文分解模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) begin(x),end(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=(l);i&lt;(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; <span class="meta-string">", "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> de(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">100</span>; <span class="comment">// Ensure M = k*log(N)</span></span><br><span class="line"><span class="keyword">int</span> PL[N], GPL[N];</span><br><span class="line">tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; g[M], G[M];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure str[|str|] = '\0'</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Palindromic</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *S = str - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">int</span> G_size = <span class="number">0</span>;</span><br><span class="line">PL[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">rep(j, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> i, d, k, g_size = <span class="number">0</span>;</span><br><span class="line">swap(g_size, G_size);</span><br><span class="line">rep(_, <span class="number">0</span>, g_size) g[_] = G[_];</span><br><span class="line"></span><br><span class="line">rep(_, <span class="number">0</span>, g_size) &#123;</span><br><span class="line">tie(i, d, k) = g[_];</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; S[i - <span class="number">1</span>] == S[j])</span><br><span class="line">G[G_size++] = &#123;i - <span class="number">1</span>, d, k&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> r = -j;</span><br><span class="line">rep(_, <span class="number">0</span>, G_size) &#123;</span><br><span class="line">tie(i, d, k) = G[_];</span><br><span class="line"><span class="keyword">if</span> (i - r != d) &#123;</span><br><span class="line">g[g_size++] = &#123;i, i - r, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (k &gt; <span class="number">1</span>)</span><br><span class="line">g[g_size++] = &#123;i + d, d, k - <span class="number">1</span>&#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> </span><br><span class="line">g[g_size++] = &#123;i, d, k&#125;;</span><br><span class="line">r = i + (k - <span class="number">1</span>) * d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">1</span> &amp;&amp; S[j - <span class="number">1</span>] == S[j]) &#123;</span><br><span class="line">g[g_size++] = &#123;j - <span class="number">1</span>, j - <span class="number">1</span> - r, <span class="number">1</span>&#125;;</span><br><span class="line">r = j - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">g[g_size++] = &#123;j, j - r, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">G_size = <span class="number">0</span>;</span><br><span class="line">tie(i, d, k) = g[<span class="number">0</span>]; </span><br><span class="line">rep(_, <span class="number">1</span>, g_size) &#123;</span><br><span class="line"><span class="keyword">if</span> (get&lt;<span class="number">1</span>&gt;(g[_]) == d)</span><br><span class="line">k += get&lt;<span class="number">2</span>&gt;(g[_]);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">G[G_size++] = &#123;i, d, k&#125;;</span><br><span class="line">tie(i, d, k) = g[_];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">G[G_size++] = &#123;i, d, k&#125;;</span><br><span class="line"></span><br><span class="line">PL[j] = j;</span><br><span class="line">rep(_, <span class="number">0</span>, G_size) &#123;</span><br><span class="line">tie(i, d, k) = G[_];</span><br><span class="line">r = i + (k - <span class="number">1</span>) * d;</span><br><span class="line"><span class="keyword">int</span> m = PL[r - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (k &gt; <span class="number">1</span>) m = min(m, GPL[i - d]);</span><br><span class="line"><span class="keyword">if</span> (d &lt;= i) GPL[i - d] = m;</span><br><span class="line">PL[j] = min(PL[j], m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %s"</span>, str);</span><br><span class="line">Palindromic(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Palindrome-Partition-1"><a href="#Palindrome-Partition-1" class="headerlink" title="Palindrome Partition"></a>Palindrome Partition</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=(l);i&lt;(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; <span class="meta-string">", "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> de(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[N], t[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> PL[N], GPL[N];</span><br><span class="line">tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; g[M], G[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((x += y) &gt;= P) x -= P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Palindromic</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *S = str - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">int</span> G_size = <span class="number">0</span>;</span><br><span class="line">PL[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">rep(j, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> i, d, k, g_size = <span class="number">0</span>;</span><br><span class="line">swap(g_size, G_size);</span><br><span class="line">rep(_, <span class="number">0</span>, g_size) g[_] = G[_];</span><br><span class="line"></span><br><span class="line">rep(_, <span class="number">0</span>, g_size) &#123;</span><br><span class="line">tie(i, d, k) = g[_];</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; S[i - <span class="number">1</span>] == S[j])</span><br><span class="line">G[G_size++] = &#123;i - <span class="number">1</span>, d, k&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> r = -j;</span><br><span class="line">rep(_, <span class="number">0</span>, G_size) &#123;</span><br><span class="line">tie(i, d, k) = G[_];</span><br><span class="line"><span class="keyword">if</span> (i - r != d) &#123;</span><br><span class="line">g[g_size++] = &#123;i, i - r, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (k &gt; <span class="number">1</span>)</span><br><span class="line">g[g_size++] = &#123;i + d, d, k - <span class="number">1</span>&#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> </span><br><span class="line">g[g_size++] = &#123;i, d, k&#125;;</span><br><span class="line">r = i + (k - <span class="number">1</span>) * d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">1</span> &amp;&amp; S[j - <span class="number">1</span>] == S[j]) &#123;</span><br><span class="line">g[g_size++] = &#123;j - <span class="number">1</span>, j - <span class="number">1</span> - r, <span class="number">1</span>&#125;;</span><br><span class="line">r = j - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">g[g_size++] = &#123;j, j - r, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">G_size = <span class="number">0</span>;</span><br><span class="line">tie(i, d, k) = g[<span class="number">0</span>];</span><br><span class="line">rep(_, <span class="number">1</span>, g_size) &#123;</span><br><span class="line"><span class="keyword">if</span> (get&lt;<span class="number">1</span>&gt;(g[_]) == d)</span><br><span class="line">k += get&lt;<span class="number">2</span>&gt;(g[_]);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">G[G_size++] = &#123;i, d, k&#125;;</span><br><span class="line">tie(i, d, k) = g[_];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">G[G_size++] = &#123;i, d, k&#125;;</span><br><span class="line"></span><br><span class="line">PL[j] = <span class="number">0</span>;</span><br><span class="line">rep(_, <span class="number">0</span>, G_size) &#123;</span><br><span class="line">tie(i, d, k) = G[_];</span><br><span class="line">r = i + (k - <span class="number">1</span>) * d;</span><br><span class="line"><span class="keyword">int</span> m = PL[r - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (k &gt; <span class="number">1</span>) inc(m, GPL[i - d]);</span><br><span class="line"><span class="keyword">if</span> (d &lt;= i) GPL[i - d] = m;</span><br><span class="line"><span class="keyword">if</span> (~j &amp; <span class="number">1</span>) inc(PL[j], m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %s"</span>, s);</span><br><span class="line">n = <span class="built_in">strlen</span>(s);</span><br><span class="line">rep(i, <span class="number">0</span>, n / <span class="number">2</span>) &#123;</span><br><span class="line">t[<span class="number">2</span> * i] = s[i];</span><br><span class="line">t[<span class="number">2</span> * i + <span class="number">1</span>] = s[n - <span class="number">1</span> - i];</span><br><span class="line">&#125;</span><br><span class="line">t[n] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Palindromic(t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, PL[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reverses-1"><a href="#Reverses-1" class="headerlink" title="Reverses"></a>Reverses</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) begin(x),end(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=(l);i&lt;(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; <span class="meta-string">", "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> de(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">100</span>; <span class="comment">// Ensure M = log(N)</span></span><br><span class="line"><span class="keyword">char</span> s[N], t[N], str[<span class="number">2</span> * N];</span><br><span class="line"></span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PL[<span class="number">2</span> * N], GPL[<span class="number">2</span> * N];</span><br><span class="line">tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; g[M], G[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Palindromic</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *S = str - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">int</span> G_size = <span class="number">0</span>;</span><br><span class="line">PL[<span class="number">0</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">rep(j, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> i, d, k, g_size = <span class="number">0</span>;</span><br><span class="line">swap(g_size, G_size);</span><br><span class="line">rep(_, <span class="number">0</span>, g_size) g[_] = G[_];</span><br><span class="line"></span><br><span class="line">rep(_, <span class="number">0</span>, g_size) &#123;</span><br><span class="line">tie(i, d, k) = g[_];</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; S[i - <span class="number">1</span>] == S[j])</span><br><span class="line">G[G_size++] = &#123;i - <span class="number">1</span>, d, k&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> r = -j;</span><br><span class="line">rep(_, <span class="number">0</span>, G_size) &#123;</span><br><span class="line">tie(i, d, k) = G[_];</span><br><span class="line"><span class="keyword">if</span> (i - r != d) &#123;</span><br><span class="line">g[g_size++] = &#123;i, i - r, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (k &gt; <span class="number">1</span>)</span><br><span class="line">g[g_size++] = &#123;i + d, d, k - <span class="number">1</span>&#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> </span><br><span class="line">g[g_size++] = &#123;i, d, k&#125;;</span><br><span class="line">r = i + (k - <span class="number">1</span>) * d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">1</span> &amp;&amp; S[j - <span class="number">1</span>] == S[j]) &#123;</span><br><span class="line">g[g_size++] = &#123;j - <span class="number">1</span>, j - <span class="number">1</span> - r, <span class="number">1</span>&#125;;</span><br><span class="line">r = j - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">g[g_size++] = &#123;j, j - r, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">G_size = <span class="number">0</span>;</span><br><span class="line">tie(i, d, k) = g[<span class="number">0</span>]; </span><br><span class="line">rep(_, <span class="number">1</span>, g_size) &#123;</span><br><span class="line"><span class="keyword">if</span> (get&lt;<span class="number">1</span>&gt;(g[_]) == d)</span><br><span class="line">k += get&lt;<span class="number">2</span>&gt;(g[_]);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">G[G_size++] = &#123;i, d, k&#125;;</span><br><span class="line">tie(i, d, k) = g[_];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">G[G_size++] = &#123;i, d, k&#125;;</span><br><span class="line"></span><br><span class="line">PL[j] = &#123;n + <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; S[j - <span class="number">1</span>] == S[j])</span><br><span class="line">PL[j] = min(PL[j], </span><br><span class="line">make_pair(PL[j - <span class="number">2</span>].first, j - <span class="number">2</span>));</span><br><span class="line">rep(_, <span class="number">0</span>, G_size) &#123;</span><br><span class="line">tie(i, d, k) = G[_];</span><br><span class="line">r = i + (k - <span class="number">1</span>) * d;</span><br><span class="line"><span class="comment">// int m = PL[r - 1] + 1;</span></span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m = &#123;PL[r - <span class="number">1</span>].first + <span class="number">1</span>, r - <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (k &gt; <span class="number">1</span>) m = min(m, GPL[i - d]);</span><br><span class="line"><span class="keyword">if</span> (d &lt;= i) GPL[i - d] = m;</span><br><span class="line"><span class="keyword">if</span> (~j &amp; <span class="number">1</span>) PL[j] = min(PL[j], m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">const</span> <span class="keyword">char</span> *t)</span> </span>&#123;</span><br><span class="line">rep(i, l, r + <span class="number">1</span>) <span class="keyword">if</span> (s[i] != t[i])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %s %s"</span>, s, t);</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">rep(i, <span class="number">0</span>, n) &#123;</span><br><span class="line">str[<span class="number">2</span> * i] = s[i];</span><br><span class="line">str[<span class="number">2</span> * i + <span class="number">1</span>] = t[i];</span><br><span class="line">&#125;</span><br><span class="line">str[<span class="number">2</span> * n] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Palindromic(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (PL[<span class="number">2</span> * n].first &gt; n) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; ans;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">2</span> * n; r &gt; <span class="number">0</span>; r = PL[r].second) &#123;</span><br><span class="line"><span class="keyword">int</span> L = PL[r].second / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> R = (r - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (!same(L, R, s, t))</span><br><span class="line">ans.emplace_back(make_pair(L + <span class="number">1</span>, R + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p : ans)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, p.first, p.second);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://arxiv.org/abs/1403.2431" target="_blank" rel="noopener">Fici G, Gagie T, Karkkainen J, et al. A subquadratic algorithm for minimum palindromic factorization[J]. Journal of Discrete Algorithms, 2014: 41-48.</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;内容基本是翻译自论文《A Subquadratic Algorithm for Minimum Palindromic Factorization》，主要对文章进行翻译，力图简化算法的证明过程并给出相应的结论。简化证明过程可能存在不严谨的地方，如有需要可自行查看参考资料中的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SGU 100~152</title>
    <link href="http://mcginn7.github.io/2019/11/15/SGU-100-152/"/>
    <id>http://mcginn7.github.io/2019/11/15/SGU-100-152/</id>
    <published>2019-11-15T02:16:46.000Z</published>
    <updated>2020-02-13T03:20:45.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><p>计划一年内（截止 2021 年 1 月 1 日）把 SGU 500 刷完，形式以所有题目给出翻译后的简要题意和解题思路概要。</p><p><a href="https://github.com/McGinn7/ACMSGURU-Code" target="_blank" rel="noopener">AC 代码库</a></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>101 <strong>Domino</strong></p><p><strong>题意</strong>  多米诺牌两端标有 0 至 6 的数字，以 <a, b> 形式表示，每张牌均可翻转。要求将 100 个多米诺牌横向放置成一排，相邻的多米诺牌数字需要相同。如 <1, 2><2, 4>。判断是否存在方案，存在的话给出一种排列。</2,></1,></a,></p><p><strong>分析</strong>  将数字 0 至 6 视为图上的点，多米诺牌视为无向边，则问题转化成找出一条欧拉路径，而欧拉路径使用搜索+剪枝解决。</p><hr><p>102 <strong>Coprimes</strong></p><p><strong>题意</strong>  给定 $1\le N \le 10^4$，求 $[1, N)$ 范围内与 $N$  互质的整数个数。</p><p><strong>分析</strong>  求欧拉函数值 $φ(N)=N\prod (1 - \frac {1} {p_i})$，$O(\sqrt N)$ 枚举质因子求解即可。</p><hr><p>103 <strong>Traffic Lights</strong></p><p><strong>题意</strong></p><p><strong>分析</strong> </p><hr><p>104 <strong>Little shop of flowers</strong></p><p><strong>题意</strong>  给 $1\le V \le 100$ 个花瓶和 $1\le F\le 100$ 朵花，以及第 $i$ 朵花放入第 $j$ 个花瓶的美观度 $A_{ij}$。在不改变花的相对顺序条件下，将所有花插入到花瓶中，求最大的美观度之和且输出一种方案。</p><p><strong>分析</strong>  经典的动态规划题目。$dp(i, j)$ 表示前 $i$ 个花瓶中已插入前 $j$ 朵花的最大美观度之和，转移方程：</p><script type="math/tex; mode=display">dp(i, j) = \max\{dp(i - 1, j), dp(i - 1, j - 1) + A_{ji}\}</script><hr><p>105 <strong>Div 3</strong></p><p><strong>题意</strong>  给出 1, 12, 123, 1234, …, 12345678910, … 的序列，求前 $1\le N \le 2^{31}-1$ 个元素中是 3 的倍数的个数。</p><p><strong>分析</strong>  打表找规律，余数序列为 100100…，即每 3 个元素中有 2 个是 3 的倍数。</p><hr><p>106 <strong>The equaion</strong></p><p><strong>题意</strong>  给定二元一次方程 $ax+by+c=0$，已知 $a,b,c$ 和解 $(x, y)$ 的范围 $x \in [x_1, x_2],y\in [y_1, y_2] $。数据保证所有的数字绝对值小于 $10^8$，求解 $(x, y)$ 的个数。</p><p><strong>分析</strong>  使用扩展欧几里得算法计算 $ax_0+by_0=\gcd(a,b)$ 的一组特解 $(x_0, y_0)$，通过乘上缩放因子 $-c/\gcd(a,b)$ 得到 $ax_0+by_0+c=0$ 的特解，通解为</p><script type="math/tex; mode=display">x=x_0+k\frac{b}{\gcd(a,b)} \\y=y_0-k\frac{a}{\gcd(a, b)}</script><p>利用 $[x_1, x_2]$ 和 $[y_1, y_2]$ 分别计算 $k$ 的范围取交集即为解的个数。</p><p>需要注意的是：</p><ol><li>$a$ 或 $b$ 有可能为 0 而导致方程转换为一元一次方程和常数方程；</li><li>系数有可能为负数，注意上取整和下取整计算。</li></ol><hr><p>107 <strong>987654321 problem</strong></p><p><strong>题意</strong>  给定数字 $1\le N \le 10^6$，请求出数字位数为 $N$ 的数 $x$ 的数量，满足 $x^2$ 的末尾为 987654321。</p><p><strong>分析</strong>  本质上求 $x^2\mod 10^9=987654321$，且 $x=v\times 10^9+m$。因为 $v\times 10^9 \equiv 0\pmod {10^9}$，所以只有 $x$ 末尾 9 个数字对结果有影响。此外，通过最后一位为 1 可推断 $x$ 的个位数是 1 或 9，剩下前 8 位可在 $10^8$ 枚举计算，最终有 8 个 9 位数字 $m$ 满足条件。最后分位数 $N<9,n=9,n>9$ 的三种情况讨论输出即可。</9,n=9,n></p><hr><p>108 <strong>Self-numbers 2</strong></p><p><strong>题意</strong>  定义函数 $d(n)$ 为数字 $n$ + 数位和，如 $d(123)=123+1+2+3$。如果一个数 $x$，不存在数 $n$ 使得 $x=d(n)$，则数 $x$ 为 self-number。给定 $1\le N\le 10^7$ 和 $1\le K\le 5000$，进行 $K$ 次询问，第 $i$ 次询问第 $s_i$ 个 self-number，数据保证询问的 self-number 在 $[1,N]$ 中。</p><p><strong>分析</strong>  </p><hr><p>110 <strong>Dundeon</strong></p><p><strong>题意</strong>  给 $1\le N\le 50$ 个三维空间中的球体以及一道激光，球体表面会发射激光。求前 10 个反射激光的球体编号。数据保证激光源在球体外部。</p><p><strong>分析</strong>  </p><hr><p>111 <strong>Very simple problem</strong></p><p><strong>题意</strong>  给定数 $1\le X\le 10^{1000}$，求最大整数 $n$ 满足 $n^2\le X$。</p><p><strong>分析</strong>  </p><hr><p>112 <strong>$a^b-b^a$</strong></p><p><strong>题意</strong>  给定数 $1\le a, b\le 100$，求出 $a^b-b^a$。</p><p><strong>分析</strong>  </p><hr><p>113 <strong>Nearly prime numbers</strong></p><p><strong>题意</strong>  给定 10 个不超过 $10^9$ 的数，判断每个数是否能拆分两个质数之积，即 $n=p_1\times p_2$，其中 $p_1,p_2$ 是质数。</p><p><strong>分析</strong>  根据题意，只需找出 $n$ 的一个约数 $f_1$，则另一个约数即为 $n/f_1$，判断两个约数是否为质数即可，总的时间复杂度 $O(\sqrt n)$。</p><hr><p>114 <strong>Telecasting station</strong></p><p><strong>题意</strong> 一维数轴上有 $1\le N\le 1.5\times 10^4$ 个城镇， 城镇坐标为 $0\lt X_i \lt 5\times 10^4$，其人口数为 $0\lt P_i \lt 5\times 10^4$。现要修建一电视站 $Y$，使得居民的不满程度 $\sum_i P_i|X_i-Y|$ 最小。</p><p><strong>分析</strong>  带权中位数经典题。</p><hr><p>115 <strong>Calendar</strong></p><p><strong>题意</strong>  输入 2001 年 $M$ 月 $N$ 日，输出该天是周几？</p><p><strong>分析</strong>  模拟。</p><hr><p>116 <strong>Index of super-prime</strong></p><p><strong>题意</strong>  定义素数序列为 $P_1\lt P_2\lt \dots\lt P_m\lt\dots$，<strong>超素数</strong>为素数序列中下标也是素数的数，例如3 的下标是 2，7 的下标是 4，因此 3 是超素数，7 不是超素数。现给定一正整数 $N\le 10^4$，将 $N$ 分解成最少数量的超素数之和，并将超素数从大到小输出。若 $N$ 无法由超素数之和表示，则输出 0。</p><p><strong>分析</strong>  现将 $N$ 以内的素数筛选出来，进一步筛选出超素数，个数约 200 个。剩下的问题为<strong>完全背包问题</strong>，动态规划解决即可。</p><hr><p>117 <strong>Counting</strong></p><p><strong>题意</strong>  给定三个整数 $0\lt N, M, K \lt 10001$，询问 $N$ 次：判断给定的数 $x_i^M$ 是否是 $K$ 的倍数。</p><p><strong>分析</strong>  快速幂。</p><hr><p>118 <strong>Digital root</strong></p><p><strong>题意</strong>  求 $A_1+A_1A_2+\dots+A_1A_2\dots A_N$ 的数根，其中 $1\le N\le 1000,0\le A_i\le 10^9$。</p><p><strong>分析</strong>  数根公式：</p><script type="math/tex; mode=display">DigitRoot(x)=\begin{cases}0,  & \text{if $n = 0$} \\[2ex]9, & \text{if $n \neq 0 , n \equiv 0 \pmod 9$} \\[2ex]n \mod 9, & \text{if $n \not \equiv 0 \pmod 9$}\end{cases}</script><p><strong>原理</strong>  数 $x$ 可表示成</p><script type="math/tex; mode=display">x=\sum_i a_i10^i\tag 1</script><p>因为 $10^i \equiv 1\pmod 9$，所以有如下等式：</p><script type="math/tex; mode=display">x\equiv \sum_i a_i\pmod 9\tag 2</script><p>定义数位和函数 $f(x)=\sum a_i$，则等式 2 可写成：</p><script type="math/tex; mode=display">f(x)\equiv x \pmod 9 \tag 3</script><p>数根 $DigitRoot(x)$ 使用 $f(x)$ 表示为：</p><script type="math/tex; mode=display">DigitRoot(x)=f(f(\dots f(x))) \tag 4</script><p>根据等式 3 可得</p><script type="math/tex; mode=display">DigitRoot(x) \equiv x\pmod 9\tag 5</script><hr><p>119 <strong>Magic pairs</strong></p><p><strong>题意</strong>  给定三个正整数 $N, A_0,B_0\le 10^4$，求出所有的 $0\le A, B\lt N$ 对，满足：对于所有的 $(x, y)$，如果 $A_0x+B_0y$ 能被 $N$ 整除，则 $Ax+By$ 也能被 $N$ 整除。</p><p><strong>分析</strong>  根据题意可得</p><script type="math/tex; mode=display">A_0x+B_0y=K_0N\tag 1</script><script type="math/tex; mode=display">Ax+By=KN\tag 2</script><p>联立公式 1 和公式 2 可得</p><script type="math/tex; mode=display">(A_0B-AB_0)x=(BK_0-B_0K)N \tag 3</script><p>两边同时对 $N$ 取模</p><script type="math/tex; mode=display">(A_0B-AB_0)x\equiv 0\pmod N \tag 4</script><p>该等式对于所有的 $x$ 均成立，即与 $x$ 无关，所以</p><script type="math/tex; mode=display">A_0B-AB_0\equiv 0\pmod N \tag 5</script><p>根据公式 5 可知 $A:B$ 值等于 $A_0：B_0$，这缩小了解的搜索范围。然而这只说明了必要性，还需要进一步证明充分性。</p><p>利用扩展欧几里得定理，可求得</p><script type="math/tex; mode=display">A_0x_0+B_0y_0=\gcd(A_0, B_0) \tag 6</script><p>要使右式为 $N$ 的倍数，可两边同时乘上 $ N / \gcd(\gcd(A_0, B_0), N)$</p><script type="math/tex; mode=display">A_0X_0+B_0Y_0=\frac{\gcd(A_0, B_0)}{\gcd(\gcd(A_0, B_0), N)} N \tag 7</script><p>其中，$X_0=x_0N / \gcd(\gcd(A_0, B_0), N)$，$Y_0=y_0N / \gcd(\gcd(A_0, B_0), N)$。</p><p>等式两侧同时除以 $\frac{\gcd(A_0, B_0)}{\gcd(\gcd(A_0, B_0), N)}$</p><script type="math/tex; mode=display">AX_0+BY_0=N\tag 8</script><p>其中，$A=A_0\frac{\gcd(\gcd(A_0, B_0), N)}{\gcd(A_0, B_0)},B=B_0\frac{\gcd(\gcd(A_0, B_0), N)}{\gcd(A_0, B_0)}$。</p><p>上述过程可将 $X_0, Y_0$ 替换成通解形式，结论仍然成立。</p><p>则 $\forall i\in [0, N)$, $(iA\mod N, iB\mod N)$ 均是解，但是可能存在重复。</p><hr><p>120 <strong>Archipelago</strong></p><p><strong>题意</strong>  给出正 $3\le N\le 150$ 边形的第 $N_1$ 个点坐标和第 $N_2$ 个点坐标，按序求出所有点的坐标。</p><p><strong>分析</strong>  </p><hr><p>121 <strong>Bridges painting</strong></p><p><strong>题意</strong>  给点数为 $1\le N\le 100$ 的无向图，给图中的每条边进行黑白染色，要求当顶点度数大于 1 时，该顶点至少与一条白边和一条黑边相连接。</p><p><strong>分析</strong>  </p><hr><p>122 <strong>The book</strong></p><p><strong>题意</strong>  给点数为 $2\le N\le 10^3$ 的无向图，每个点至少与 $[\frac {N+1}{2}]$ 个点相连，求一条<strong>哈密顿回路</strong>。</p><p><strong>分析</strong>  </p><hr><p>123 <strong>The sum</strong></p><p><strong>题意</strong>  求前 40 个斐波那契值的和。</p><p><strong>分析</strong>  模拟。</p><hr><p>124 <strong>Broken line</strong></p><p><strong>题意</strong>  给一边数为 $4\le K\le 10^4$ 的多边形，以及一个二维坐标点 $(X_0, Y_0)$，判断该点在多边形的内部、外部亦或边界上。数据保证多边形顶点坐标为整数，$X_0, Y_0$ 也为整数。</p><p><strong>分析</strong>   </p><hr><p>125 <strong>Shtirlits</strong></p><p><strong>题意</strong>  </p><p><strong>分析</strong>  </p><hr><p>126 <strong>Boxes</strong></p><p><strong>题意</strong>  有两个盒子，两个盒子分别有 $A,B$ 个球，在移动球时要放入盒中已有的等量的球，即操作一次后两个盒子的球数可能为 $2A, B-A$ 或 $A -B, 2B$  两种情况。求最少的操作次数使得一个盒子为空。数据保证 $0\lt A+B\lt 2147483648$。</p><p><strong>分析</strong>  考虑反向操作，记 $S=A+B$，则判断状态 $(0, S)$ 是否能导出 $(A, B)$。<strong>逆操作</strong>从状态 $(A, B)$ 可推出 $(\frac A2, B+\frac A2)$。</p><p>因为总和<strong>固定</strong>为 $S$，对于一个状态可以用<strong>两者的最小值</strong>表示，则状态有</p><script type="math/tex; mode=display">0→\frac S2→\frac S4→\frac S8,\frac {3S}8→\frac {S}{16},\frac {3S}{16},\frac {5S}{16},\frac {7S}{16}→\dots</script><p>可以发现有效状态构成了一棵高度最大为 $\log(S)$ 的二叉树。反过来考虑，对于任一有效状态转移到根状态 $(0, S)$ 的操作数不超过 $\log(S)$。因此对于初始状态 $(A, B)$ 在 32 步内判断是否根状态 $(0, S)$ 即可。</p><hr><p>127 <strong>Telephone directory</strong></p><p><strong>题意</strong>  给 $0\lt N\lt 8000$ 个号码，电话本每页能记录 $0\lt K \lt 255$ 个电话号码，要求号码按序记录在电话本上，并且首位不同的号码记录记录在不同页，要求计算记录号码的页数。</p><p><strong>分析</strong>  模拟。</p><hr><p>128 <strong>Snake</strong></p><p><strong>题意</strong>  给定 $4\le N\le 10^4$ 个整点 $-10^4\le x_i,y_i\le 10^4$，要求构造满足以下条件的多边形：</p><ol><li>$N$ 个点均为多边形的顶点；</li><li>每个顶点均构成一个直角；</li><li>多边形的边与坐标轴平行；</li><li>多边形无自交；</li><li>多边形的周长最短。</li></ol><p>如果能构成多边形，则输出多边形的周长，否则输出 0。</p><p><strong>分析</strong>  考虑 $y$ 坐标相同的若干个点 $(x_1, y), (x_2, y),\dots, (x_m, y)$。因为每个点连接一水平线段和一竖直线段，所以第一个点 $(x_1, y)$ 只能与 $(x_2, y)$ 相连，$(x_3, y)$ 与 $(x_4, y)$ 相连，以此类推。这要求 $m$ 必须是偶数，否则无解。</p><p>上述步骤完成后，需要判断所有点是否联通以及是否存在线段相交。对于线段相交问题，可以使用扫描线+线段树/树状数组解决。</p><hr><p>129 <strong>Inheritance</strong></p><p><strong>题意</strong>  给有 $3\le N \le 400$ 个点的凸包，以及 $2\le M\le 1000$ 条线段，判断每条线段被凸包包含的长度。</p><p><strong>分析</strong>  </p><hr><p>130 <strong>Circle</strong></p><p><strong>题意</strong>  圆上有 $2k$ 个点，其中 $1\le k \le 30$。现要求将点用线连接起来，使得：每个点都有线连接；圆被划分的区域数量最少，求不同的划分方案数以及最小区域数。</p><p><strong>分析</strong>  显然，最少区域为 $k+1$，每条连线不能有交点，根据该性质则连一条边后就生成两个子问题，于是使用动态规划解决。$dp(i)$ 表示 $2i$ 个点划分成最少区域的方案数，枚举该连线的左右两部分的规模进行转移：</p><script type="math/tex; mode=display">dp(i)=\sum_{j=0}^{i-1}dp(j)\times dp(i-1-j)</script><hr><p>131 <strong>Hardwood floor</strong></p><p><strong>题意</strong>  有一个 $N\times M$ 的网格，现使用 1×2 和 2×2 的方块填满网格（方块可旋转放置），求铺满网格的方案数，其中 $1\le N,M\le 9$。</p><p><strong>分析</strong>  状压 DP。</p><hr><p>132 <strong>Another Chocolate Maniac</strong></p><p><strong>题意</strong>  给定 $M\times N$  的网格，使用 1×2 和 2×1 的方块填充，其中 $1\le M\le 70, 1\le N\le 7$。网格部分格子不能与方块重叠，求使用最少数量的方块填充网格，使得网格不存在相邻的空白格子，即不能再放置方块。</p><p><strong>分析</strong>  轮廓线 DP。对于每个格子有 3 种状态：可放置、不可放置，必须放置。假设当前格子为 $(i, j)$ 且为空，上方的格子 $(i-1,j)$ 也为空，此时有两种方案：1. 在 $(i-1,j)$ 和 $(i, j)$ 中放方块；2. 不放方块，但是 $(i, j)$ 和 $(i+1,j)$ 必须放置方块。因此每个格子有 3 种状态，总的时间复杂度为 $O(NM3^N)$。</p><hr><p>133 <strong>Border</strong></p><p><strong>题意</strong>  给 $1\le N\le 16000$ 个一维区间 $[A_i, B_i]$。若一个区间 $[A_i, B_i]$ 被另一个区间 $[A_j, B_j]$ 完全覆盖，即 $A_j\lt A_i$ 且 $B_i \lt B_j$，则去除该区间。求被去除区间的数量。 </p><p><strong>分析</strong>  按 $A_i$ 为第一关键字，$B_i$ 为第二关键字排序，按 $A_i$ 划分阶段，实时维护最大 $B_j$，若 $B_i&lt;B_j$ 则去除当前区间。</p><hr><p>134 <strong>Centroid</strong></p><p><strong>题意</strong>  求树的重心。</p><p><strong>分析</strong>  遍历一遍树即可。</p><hr><p>135 <strong>Drawing Lines</strong></p><p><strong>题意</strong>  在无限平面上画 $N$ 条直线，求平面划分的区域数。</p><p><strong>分析</strong>  画图找规律，直线两两相交，结论为 $1+\frac {N(N+1)}2$。</p><hr><p>136 <strong>Erasing Edges</strong></p><p><strong>题意</strong>  给定 $3\le N \le 10^4$ 点多边形的边的中点 $(x_i, y_i)$，判断是否能够根据边中点复原多边形顶点，如果能复原按序给出顶点坐标。</p><p><strong>分析</strong>  </p><hr><p>138 <strong>Games of Chess</strong></p><p><strong>题意</strong>  有 $2\le N \le 100$ 个人轮流下象棋，每次两个人下棋并且胜者可继续下棋直至输棋。现已知每个人下棋的总局数，要求构造符合规则的一种方案，其胜者在第一个。数据保证有解，且所有人的总局数小于 $10^4$。</p><p><strong>分析</strong>  构造。总棋局数为每个人的总局数之和除以二。然后按每个人的局数从大到小排序，假设顺序为 $(r_1, c_1), (r_2, c_2),\dots$，其中 $r_i$ 表示 $id = c_i$ 的棋局数。构造方案为 $(c_1, ?),(c_1,?),\dots,(c_2, c1),(c_2,?),\dots$，优先排列胜者，最后一局输给下一个胜者完成衔接，剩余的棋手则安排在败者局中。</p><hr><p>139 <strong>Help Needed!</strong></p><p><strong>题意</strong>  十五数码问题。</p><p><strong>分析</strong>  </p><hr><p>140 <strong>Integer Sequences</strong></p><p><strong>题意</strong>  给定长为 $1\le N \le 100$ 的序列 $0\le A_i\le 2\times 10^9$，判断是否存在序列 $X_i$ 满足</p><script type="math/tex; mode=display">\sum A_iX_i \equiv B \pmod P</script><p>其中， $0\le B\lt P\le 10^4$。</p><p><strong>分析</strong>  扩展欧几里得算法。</p><hr><p>141 <strong>Jumping Joe</strong></p><p><strong>题意</strong>  一只青蛙在一维数轴的整数点上跳，每次能够向负轴或正轴方向跳 $x_1$ 或 $x_2$ 个整数距离，求能否<strong>刚好</strong> $0\le K\le 2\times 10^9$ 次跳到整点 $-4\times 10^4 \lt P\lt 4\times 10^4$ 位置上。如果能到达位置 $P$，给出一种方案 $(P_1, N_1, P_2, N_2)$，$P_i$ 表示往正轴方向跳 $x_i$ ，$N_i$ 则表示往负轴方向跳 $x_i$。</p><p><strong>分析</strong>  扩展欧几里得算法。</p><hr><p>142 <strong>Keyword</strong></p><p><strong>题意</strong>  给长为 $1\le N \le 5\times 10^5$ 的字符串，该串只由 $a$ 和 $b$ 构成，求最短的不是该串子串的字符串，并给出一个解。如 $aba$ 的子串有 $a,b,ab,ba,aba$，因此最短非子串长度为 2，一种解为 $aa$。</p><p><strong>分析</strong>  因为 $2^{19} &gt; 5\times 10^5$，所以答案不超过 19，枚举长度并枚举该长度所有子串即可。后缀数组和后缀自动机也可以做。</p><hr><p>145 <strong>Long Live the Queen</strong></p><p><strong>题意</strong>  给定有 $1\le N \le 16\times 10^4$ 的树，每个点的权值为 $-10^3\le w_i\le 10^3$，求一棵子树使得权重和最大。</p><p><strong>分析</strong>  树 DP。</p><hr><p>144 <strong>Meeting</strong></p><p><strong>题意</strong>  两个人约在 $[X,Y]$ 时间内碰面，约定先到的人等另一个人的时间不超过 $0\lt Z\le 60*(Y-X)$ 分钟，求两个人能碰面的概率。</p><p><strong>分析</strong>  。</p><hr><p>148 <strong>B-Station</strong></p><p><strong>题意</strong>  背景中有 $1\le N\le 15000$ 级蓄水池，每级蓄水池目前有 $0\le W_i\le 15000$ 重的水量，最大蓄水量为 $0\le L_i\le 15000$。释放第 $i$ 级蓄水池的代价为 $0\le P_i \le 15000$，且第 $i$ 级的水会流入第 $i+1$ 级的水池中。如果水池中的水超过了容量，则水池中的所有水会继续流入下一级。现在 kbfz 想要释放第 $N$ 级的水，求最小代价以及一种方案。 </p><p><strong>分析</strong>  为了释放第 $N$ 级的水，一种是直接花费 $P_N$ 的代价，另一种则是释放前面的水池，通过超容量来释放。假设第一个花费代价 $P_j$ 释放水池 $j$，则下一个必须花费代价的水池满足：</p><script type="math/tex; mode=display">\sum_{i=j}^k W_i \le L_k</script><p>即堆积的总水量不超过容量的第一个位置 $k$，该位置必须花费 $P_k$ 的代价释放水。</p><p>使用前缀和 $S_i$ 表示，则有</p><script type="math/tex; mode=display">S_k-S_{j-1}\le L_k \\\Rightarrow S_k-L_k\le S_{j-1}</script><p>当固定第一个花钱释放的水池 $j$ 后，在 $[j, N]$ 中必须花钱的水池满足 $S_k-L_k \le S_{j-1}$，其中 $S_k-L_k$ 是定值。之后使用数据结构维护 $S_k-L_k$ 所对应的代价即可。</p><hr><p>149 <strong>Computer Network</strong></p><p><strong>题意</strong>  给 $1\le N\le 10^4$ 个点的树，求每个点 $i$ 到其他点的最远距离 $S_i$。</p><p><strong>分析</strong>  每个点到树直径的端点的距离之一等于最远距离。</p><hr><p>150 <strong>Mr. Beetle II</strong></p><p><strong>题意</strong>  给定起点 $(x_1, y_1)$ 和终点 $(x_2, y_2)$，求起点和终点构成的线段穿过的第 $1\le n\le 10^5$ 个格子左下角坐标，只经过角点不算穿越该格子。每个格子可使用 $(x, y),(x,y+1),(x+1,y+1),(x+1, y)$ 表示，其中左下角点坐标为 $(x, y)$。</p><p><strong>分析</strong>  假设已知当前穿越的格子，则下一个可能穿越的格子为前进方向的相邻 3 个格子。线段穿越格子的充要条件：线段和格子的其中一条对角线严格相交。</p><hr><p>!!! 151 <strong>Construct a triangle</strong></p><p><strong>题意</strong>  对于三角形 ABC，已知长度 $|AB|=c,|AC|=b,|AM|=m$，其中 M​ 是线段 BC 的中点。求三个顶点的坐标，满足上述长度关系。</p><p>这道题<strong>数据有问题</strong>，允许三点共线。</p><p><strong>分析</strong>  固定点 A 在原点，点 B 为 $(c, 0)$，设点 C 坐标为 $(x, y)$。根据长度关系可得：</p><script type="math/tex; mode=display">x^2+y^2=b^2 \\(x+c)^2+y^2=4m^2</script><p>利用这个等式可以很容易求出一组解，注意判断方程有解即可。</p><hr><p>152 <strong>Making round</strong></p><p><strong>题意</strong>  已知 $1\le N\le 10^4$ 候选人的选票数 $0\le A_i\le 10^4$，现要求将选票转换成<strong>整数</strong>的百分比形式， 使得总和为 100。对于转换后小数部分，每个候选人的选票可向上或向下取整（取整相互独立）。求一种方案，或判断无法转换。 </p><p><strong>分析</strong>  模拟。</p><hr><p>xxx</p><p><strong>题意</strong>  </p><p><strong>分析</strong>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h1&gt;&lt;p&gt;计划一年内（截止 2021 年 1 月 1 日）把 SGU 500 刷完，形式以所有题目给出翻译后的简要题意和解题思路概要。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pólya计数法</title>
    <link href="http://mcginn7.github.io/2019/10/31/polya/"/>
    <id>http://mcginn7.github.io/2019/10/31/polya/</id>
    <published>2019-10-31T11:54:39.000Z</published>
    <updated>2019-11-08T12:00:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="Necklace-of-Beads"><a href="#Necklace-of-Beads" class="headerlink" title="Necklace of Beads"></a>Necklace of Beads</h2><p><strong>来源</strong> <a href="http://poj.org/problem?id=1286" target="_blank" rel="noopener">POJ 1286</a></p><p><strong>题意</strong> 使用 RGB 三种颜色对长为 $0\le n\le 23$ 的项链染色，求本质不同的方案数。一种方案如果经过<strong>旋转</strong>或<strong>翻转</strong>得到另一种方案，两种方案视为同一种。</p><p><strong>注意</strong> $n=0$ 在本题中会出现，测试数据输出 0。</p><p><strong>分析</strong> 使用 Polya 计数公式求解，即对于正 $n$ 边形的顶点对称群</p><script type="math/tex; mode=display"> \{ρ_n^0=\iota,ρ_n,\dots, ρ_n^{n-1}, τ_1, τ_2, \dots, τ_n \}</script><p>的循环因子分解。</p><ol><li><p>旋转置换 $ρ_n^i,i=0,1,\dots n-1$ 的循环个数为</p><script type="math/tex; mode=display">\gcd(n, i)</script><p><strong>证明</strong> 旋转置换中的每个元素在一个有向圈 $s+ki=s(\%\ n)$ ，其中 $k$ 是最小正整数。那么 $n|ki$，令 $ki=lcm(n, i)=ni/\gcd(n, i)$，则 $k=n/\gcd(n, i)$。所以有向圈的长度为 $n/\gcd(n, i)$，个数为 $n/k=\gcd(n,i)$ 个。</p><p>根据定理 3 可得，</p><script type="math/tex; mode=display">|C(ρ_n^i)|=3^{\gcd(n, i)}</script></li><li><p>反射置换 $τ_i$ 需要根据 $n$ 的奇偶性考虑。</p><p>当 $n$ 为奇数时，有 $n$ 个关于角点与其对边中点的连线的反射，每个反射置换的型为</p><script type="math/tex; mode=display">(1, \frac{n-1}{2}, 0, \dots, 0)</script><p>根据定理 3 可得</p><script type="math/tex; mode=display">|C(τ_i)|=3^{\frac{n+1}{2}}</script><p>当 $n$ 为偶数时，有 $n/2$ 个关于对角点的反射和 $n/2$ 个关于对边中点连线的反射，两种置换的型分别为</p><script type="math/tex; mode=display">(2, \frac n2-1, 0, \dots, 0)\\(0, \frac n 2, 0, \dots, 0)</script><p>根据置换的型和定理 3 可求得 $|C(f)|$，最后使用 Burnside 定理即可求解不同着色的方案数。</p></li></ol><h2 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h2><p><strong>来源</strong> <a href="http://poj.org/problem?id=2154" target="_blank" rel="noopener">POJ 2154</a>，<a href="https://www.luogu.org/problem/P4980" target="_blank" rel="noopener">LG 4980</a></p><p><strong>题意</strong> 给定长为 $N\le 10^9$ 的项链，使用至多 $N$ 种颜色对项链上的珠子着色，考虑在<strong>旋转</strong>条件下的不同着色方案数，结果对 $1\le P \le 3\times 10^4$ 取模。</p><p><strong>分析</strong> 旋转置换 $ρ_n^i,i=0,1,\dots n-1$ 的循环个数为</p><script type="math/tex; mode=display">\gcd(n, i)</script><p>根据 Polya 定理，总方案数为</p><script type="math/tex; mode=display">Answer = \frac 1 n \sum_{0\le i \lt n} |C(\rho_n^i)|= \frac 1 n \sum_{0\le i \lt n} n^{\gcd(n, i)} \\= \frac 1 n \sum_{d|n}n^d\sum_{0\le i \lt n}[\gcd(n, i) =d] \\= \frac 1 n \sum_{d|n}n^d\sum_{0\le i \lt n}[\gcd(n/d, i/d) =1] \\= \frac 1 n \sum_{d|n}n^d\sum_{0\le i \lt n/d}[\gcd(n/d, i) =1] \\= \frac 1 n \sum_{d|n}n^d\phi(n/d) = \sum_{d|n}n^{d-1}\phi(n/d) \\</script><p>$O(\sqrt n)$ 枚举 $n$ 的所有约数 $d$（因为前 10 个质数乘积大于 $10^9$，因此约数个数最多只有 $2^{10}=1024$ 个），快速幂求 $n^{d-1}$，$O(\sqrt {n/d})$ 求 $\phi(n/d)$。</p><h2 id="Magic-Bracelet"><a href="#Magic-Bracelet" class="headerlink" title="Magic Bracelet"></a>Magic Bracelet</h2><p><strong>来源</strong> <a href="http://poj.org/problem?id=2888" target="_blank" rel="noopener">POJ 2888</a></p><p><strong>题意</strong> 给定长为 $1\le n \le 10^9$  的项链，使用 $1\le m \le 10$ 种颜色对项链上的珠子着色，考虑旋转同构的不同着色方案数，结果对 9973 取模。此外，限制部分颜色对不能着色于相邻的珠子上。数据保证 $gcd(n, 9973)=1$。</p><p><strong>分析</strong> 已知循环置换 $ρ_n^i$ 的循环个数为 $\gcd(n, i)$。对于一个循环圈可表示为 $j+ki(\mod n)$，则在同一个循环的元素 $x, y$ 要满足 $x \mod \gcd(n, i) = y \mod  \gcd(n, i)$，即循环节大小为 $\gcd(n, i)$。因为相邻珠子不能着限制颜色对，此时保证前 $\gcd(n, i) + 1$ 个元素不出现禁止的颜色对即可，问题转化成求解 $k$ 个珠子的项链不出现禁止颜色对的方案数。</p><p>转化后的问题可以使用动态规划解决，$dp(i, j)$ 表示前 $i$ 个元素中最后一个元素的颜色为 $j$ 的方案数。记不能相邻的颜色对集合为 $E$，则转移方程为</p><script type="math/tex; mode=display">dp(i, j) = \sum_{(k,j)\notin E}dp(i-1,k)</script><p>由于 $n$ 很大而 $m$ 很小，因此可以使用矩阵 + 快速幂解决。另一方面，项链首尾相接的问题可以通过枚举第一个元素的颜色解决。</p><h2 id="Birthday-Toy"><a href="#Birthday-Toy" class="headerlink" title="Birthday Toy"></a>Birthday Toy</h2><p><strong>来源</strong> <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2865" target="_blank" rel="noopener">HDU 2865</a></p><p><strong>题意</strong> 使用 $4\le k \le 10^9$ 种颜色对形如图 1的项链着色，项链包括 $3\le N \le 10^9$ 个小珠子以及一个中心的大珠子。要求相邻珠子不能同色，求旋转同构的不同着色方案数，结果对 $10^9+7$ 取模。</p><img src="/2019/10/31/polya/image-20191102224432497.png"><p><center>图 1. 特殊形状的项链</center><br><strong>分析</strong> 由于中心点的大珠子与所有小珠子均相邻，因此可从 $k$ 种颜色中先选一种颜色对大珠子着色，使得问题转化为使用 $k-1$ 种颜色对普通项链着色。</p><p>进而本问题与 <strong>POJ 2888 Magic Bracelet</strong> 类似，问题进一步转化成长为 $L$ 的项链相邻珠子不同构的着色方案数。使用动态规划思想解决，$dp(i, j)$ 表示前 $i$ 个珠子最后一个颜色为 $j$ 的方案数，转移方程为</p><script type="math/tex; mode=display">dp(i, j) = \sum_k{dp(i-1,k)} - dp(i-1, j)</script><p>项链需要解决首尾相接问题，此时通过 $O(k)$ 枚举第一个元素的颜色解决。由于颜色数 $k$ 很大，因此不能使用线性递推的动态规划做法。</p><p>在枚举第一个元素的颜色时，不失一般性，假设第一个元素的颜色为 1，那么颜色 2,…,k 是等价的。可以理解为只用 2 种颜色着色，只是第 2 种颜色有 $k - 1$ 种替换， ​因此动态规划的状态只有 $dp(i, 1)$ 和 $dp(i, c), c=2,\dots, k$，因此转移方程可写成</p><script type="math/tex; mode=display">dp(i, 1) = dp(i-1, 1)+(k-1)dp(i, c) - dp(i-1,1) \\dp(i, c) = dp(i-1,1)+(k-1)dp(i, c)-dp(i-1,c) = dp(i-1,1)+(k-2)dp(i-2,c)</script><p>写成矩阵形式</p><script type="math/tex; mode=display">\begin{pmatrix}0&k-1\\1&k-2\end{pmatrix}\begin{pmatrix}dp(i-1,1)\\dp(i-1,c)\end{pmatrix}=\begin{pmatrix}dp(i,1)\\dp(i,c)\end{pmatrix}</script><p>使用快速幂优优化计划 $dp(i, 1)$，进而方案数为</p><script type="math/tex; mode=display">Answer = \frac 1 n \sum_{d|n} dp(d, 1)φ(n / d)</script><h1 id="《组合数学》摘录"><a href="#《组合数学》摘录" class="headerlink" title="《组合数学》摘录"></a>《组合数学》摘录</h1><h2 id="置换群与对称群"><a href="#置换群与对称群" class="headerlink" title="置换群与对称群"></a>置换群与对称群</h2><h3 id="置换"><a href="#置换" class="headerlink" title="置换"></a>置换</h3><p><strong>定义</strong> 设 $X$ 是一个有限集 $\{1, 2, \dots , n\}$，$X$ 的每个置换 $f$</p><script type="math/tex; mode=display">f(1)=i_1, f(2)=i_2, \dots , f(n)=i_n</script><p>可视为到其自身定义的一对一函数 $f:X\rightarrow X$，用 $2\times n $ 阵列表示：</p><script type="math/tex; mode=display">\begin{pmatrix}1&2&\dots&n\\i_1&i_2&\dots&i_n\end{pmatrix} \tag1</script><p>将 $\{1, 2, \dots, n\}$ 的所有 $n!$ 个置换构成的集合记为 $S_n$。</p><p><strong>运算</strong> 置换的合成运算“$\circ$”满足<strong>结合律</strong>，但不满足交换律：</p><script type="math/tex; mode=display">(f\circ g)\circ h=f\circ(g\circ h) \tag 2</script><p><strong>恒等置换</strong> 各数对应到自身的置换 $\iota$：</p><script type="math/tex; mode=display">\iota = \begin{pmatrix}1&2&\dots&n \\1&2&\dots&n \\\end{pmatrix} \tag 3</script><p><strong>逆函数</strong> 如果 $f(s)=k$，那么 $f^{-1}(k)=s$。</p><h3 id="置换群"><a href="#置换群" class="headerlink" title="置换群"></a>置换群</h3><p><strong>定义</strong> 若 $S_n$ 的非空子集 $G$ 为 $X$ 的一个<strong>置换群</strong>，则满足：</p><ol><li>$\forall f, g\in G, f\circ g \in G$，即合成运算的封闭性。</li><li>恒等置换 $\iota \in G$，即包含单位元。</li><li>$\forall f \in G，f^{-1}\in G$，即逆元的封闭性。</li></ol><p><strong>特殊</strong> $X=\{1, 2, \dots, n\}$ 的所有置换的集合 $S_n$ 是一个置换群，记为 $n$ <strong>阶对称群</strong>。集合 $G=\{\iota\}$ 也是一个置换群。</p><p><strong>性质</strong> 置换群满足<strong>消去律</strong>：若 $f\circ g=f\circ h$，那么 $g=h$。</p><h2 id="Burnside定理"><a href="#Burnside定理" class="headerlink" title="Burnside定理"></a>Burnside定理</h2><p>计算集合 $X$ 的不等价着色数。</p><p>设 $G$ 是 $X$ 的一个置换群，$C$ 是一个着色集合，使着色 $c$ 保持不变的集合：</p><script type="math/tex; mode=display">G(c)=\{f:f\in G, f*c=c\} \tag{4}</script><p>集合 $G(c)$ 称为 $c$ 的<strong>稳定核</strong>，任何着色的稳定核是一个置换群。</p><p>在 $f$ 作用下使着色 $c$ 保持不变的 $G$ 中所有着色的集合：</p><script type="math/tex; mode=display">C(f)=\{c:c\in C, f*c=c\} \tag 5</script><p><strong>定理1</strong> 对于每一种着色 $c$，$c$ 的稳定核 $G(c)$ 是一个置换群，且对 $G$ 中任意置换 $f$ 与 $g$，$g<em>c=f</em>c$当且仅当 $f^{-1}\circ g$ 属于 $G(c)$。</p><p><strong>推论1</strong> 设 $c$ 为 $C$ 中的一种着色，那么与 $c$ 等价的着色数等于 $G$ 中的置换个数除以 $c$ 的稳定核中的置换个数</p><script type="math/tex; mode=display">|\{f*c:f\in G\}|=\frac{|G|}{|G(c)|} \tag 6</script><p><strong>证明</strong> 对于 $h\in G(c)$，有 $(f\circ h)<em>c=f</em>(h<em>c)=f</em>c$，从而对于每个置换 $f$，恰好存在 $|G(c)|$ 个置换，这些置换作用在 $c$ 上跟 $f$ 有同样的效果。</p><p><strong>定理2</strong> 设 $G$ 是 $X$ 的一个置换群，$C$ 是 $X$ 的一个着色集并且使得对于 $G$ 中的任意 $f$ 与 $C$ 中的任意 $c$，$f*c\in C$，则 $C$ 中不等价的着色数 $N(G, C)$ 为</p><script type="math/tex; mode=display">N(G, C)=\frac1 {|G|} \sum_{f\in G}|C(f)| \tag 7</script><p>换言之，$C$ 中不等价的着色数等于使着色通过 $G$ 中的置换保持不变的着色的平均数。</p><p><strong>证明</strong> 计数 $f*c=c$ 的对偶 $(f, c)$ 的个数，使用两种不同的方式计数，然后使计数相等。</p><p>一种从置换 $f$ 考察，根据定义计数结果为</p><script type="math/tex; mode=display">\sum_{f\in G} |C(f)| \tag 8</script><p>一种从着色 $c$ 考察，每个 $c$ 对结果的贡献为</p><script type="math/tex; mode=display">|G(c)|=\frac{|G|}{(与 c 等价的着色数)} \tag 9</script><p>计数结果为</p><script type="math/tex; mode=display">\sum_{c \in C} \frac{|G|}{(与c等价的着色数)} \tag {10}</script><p>按等价类将着色归类，每个等价类的总贡献为 $|G|$，等价类的个数就是不等价类的着色数 $N(G, C)$，因此公式(10) 等于</p><script type="math/tex; mode=display">N(G,C)\times |G| \tag {11}</script><p>联立公式(8) 和公式(11) 得到</p><script type="math/tex; mode=display">\sum_{f\in G}|C(f)|=N(G, C)\times |G| \tag {12}</script><h2 id="Polya计数公式"><a href="#Polya计数公式" class="headerlink" title="Pólya计数公式"></a>Pólya计数公式</h2><p>通过考虑置换的循环结构，计算可变得容易简便。</p><p>设 $f$ 是 $X=\{1, 2, \dots, n\}$ 的一个置换，$D_f=(X, A_f)$ 是顶点集为 $X$ 且弧集为</p><script type="math/tex; mode=display">A_f = \{(i, f(i)):i\in X\}</script><p>的有向图。该有向图有 $n$ 个顶点与 $n$ 条弧，各顶点的入度和出度等于1，因此弧集 $A_f$ 被划分为若干个有向圈，且每个顶点恰好只属于一个有向圈。</p><p>如果某些元素以循环的方式被置换且余下元素保持不变，那么称这样的置换为<strong>循环置换</strong>或简称<strong>循环</strong>。如果循环中的元素个数为 $k$，则称它为 $k-$循环。</p><p>设 $f$ 是集合 $X$ 的任意置换，关于合成运算 $f$ 有化成循环的因子分解</p><script type="math/tex; mode=display">f=[i_1\ i_2\ \dots\ i_p]\circ[j_1\ j_2\ \dots\ j_q]\circ\dots\circ[l_1\ l_2\ \dots\ l_r] \tag {13}</script><p>公式(13) 称为 $f$ 循环因子分解。</p><p>对于 $f$ 分解中的每个循环，该循环中的所有元素着色相同，因此着色方案数与循环阶数无关，而与循环个数有关。置换 $f$ 的循环因子分解中的循环个数记为</p><script type="math/tex; mode=display">\#(f)</script><p><strong>定理3</strong> 设 $f$ 是集合 $X$ 的一个置换，假如用 $k$ 种颜色对 $X$ 的元素进行着色，令 $C$ 是 $X$ 的所有着色的集合，则 $f$ 保持 $C$ 中着色不变的着色数为</p><script type="math/tex; mode=display">|C(f)|=k^{\#(f)}</script><p>假设 $f$ 的循环因子分解有 $e_i$ 个 $i$-循环，因 $X$ 的各元素在 $f$ 循环因子分解中恰好出现在一个训话中，所以 $e_i$ 是非负整数且满足</p><script type="math/tex; mode=display">\sum_{i=1}^{n}ie_i=n \tag {14}</script><p>称 $n$ 元组 $(e_1, e_2, \dots, e_n)$ 是置换 $f$ 的<strong>型</strong>，记为</p><script type="math/tex; mode=display">type(f)=(e_1, e_2, \dots, e_n)</script><p>循环数为</p><script type="math/tex; mode=display">\#(f)=e_1+e_2+\dots+e_n</script><p>因为置换的型仅取决于循环因子分解中循环的阶数，所以不同置换可以有相同的型，我们可引进 $n$ 个不定元</p><script type="math/tex; mode=display">z_1, z_2, \dots, z_n</script><p>其中，$z_k$ 对应一个 $k$ 阶循环（$k=1, 2, \dots, n$）。对于具有 $type(f)=(e_1, e_2, \dots, e_n)$ 的每个置换 $f$，定义 $f$ 的<strong>单项式</strong>为</p><script type="math/tex; mode=display">mon(f)=z_1^{e_1}z_2^{e_2}\dots z_n^{e_n}</script><p>设 $G$ 是 $X$ 的一个置换群。对 $G$ 中每个置换 $f$ 的单项式求和，得到关于 $G$ 中的置换按照型的生成函数</p><script type="math/tex; mode=display">\sum_{f\in G} mon(f)=\sum_{f\in G}z_1^{e_1}z_2^{e_2}\dots z_n^{e_n} \tag{15}</script><p>合并公式(15) 中的同类型，$z_1^{e_1}z_2^{e_2}\dots z_n^{e_n}$ 的系数等于型为 $(e_1, e_2,\dots, e_n)$ 的 $G$ 中的置换个数。</p><p>$G$ 的<strong>循环指数</strong>定义为该生成函数除以 $G$ 中的置换个数 $G$，即</p><script type="math/tex; mode=display">P_G(z_1, z_2, \dots , z_n) = \frac 1 {|G|} \sum_{f\in G} z_1^{e_1}z_2^{e_2}\dots z_n^{e_n}</script><p><strong>定理4</strong> 设 $X$ 是有 $n$ 个元素的一个集合，假设有 $k$ 种可用的颜色集可用来对 $X$ 的元素进行着色。令 $C$ 是 $X$ 的所有 $k^n$ 种着色的集合，$G$ 是 $X$ 的一个置换群。则不等价的着色数是用 $z_i=k(i=1,2,\dots, n)$ 带入 $G$ 的循环指数中而得到的数，即</p><script type="math/tex; mode=display">N(G,C)=P_G(k,k,\dots, k)</script><p><strong>定理5（Polya定理）</strong> 设 $X$ 是一个元素集合，$G$ 是 $X$ 的一个置换群，$\{u_1, u_2, \dots, u_k\}$ 是 $k$ 种颜色的一个集合，$C$ 是 $X$ 的任意着色集并且 $G$ 为 $C$ 上的一个置换群，那么根据各颜色的数目，$C$ 的不等价着色数的生成函数是由循环指数 $P_G(z_1, z_2, \dots, z_n)$ 通过做变量代换</p><script type="math/tex; mode=display">z_j=u_1^j+\dots+u_k^j\ (j=1, 2, \dots, n)</script><p>而得到的表达式</p><script type="math/tex; mode=display">P_G(u_1+\dots+u_k, u_1^2+\dots+u_k^2,\dots, u_1^n+\dots+u_k^n) \tag{16}</script><p>换言之，公式(16) 中</p><script type="math/tex; mode=display">u_1^{p_1}u_2^{p_2}\dots u_k^{p_k}</script><p>的系数等于 $X$ 中的 $p_i$ 个元素着颜色 $u_i$ 的 $C$ 中不等价的着色数。</p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><h2 id="Necklace-of-Beads-1"><a href="#Necklace-of-Beads-1" class="headerlink" title="Necklace of Beads"></a>Necklace of Beads</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) begin(x),end(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=(l);i&lt;(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; <span class="meta-string">", "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> de(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> __gcd(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line"><span class="keyword">return</span> !x ? y : __gcd(y % x, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">kpow</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">ll r = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) r = r * a;</span><br><span class="line">a = a * a, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; ~n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll ans = <span class="number">0</span>; </span><br><span class="line"><span class="comment">// rotation</span></span><br><span class="line">rep(i, <span class="number">0</span>, n) &#123;</span><br><span class="line">ll circ = __gcd(n, i);</span><br><span class="line">ans += kpow(<span class="number">3</span>, circ);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// relection</span></span><br><span class="line">ans += (<span class="number">2</span> + (n &amp; <span class="number">1</span>)) * n * kpow(<span class="number">3</span>, n / <span class="number">2</span>);</span><br><span class="line">ans /= <span class="number">2</span> * n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Color-1"><a href="#Color-1" class="headerlink" title="Color"></a>Color</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) begin(x),end(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=(l);i&lt;(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; <span class="meta-string">", "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> de(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">31625</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, p;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; primes;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; isprime;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> mod)</span> </span>&#123;</span><br><span class="line">a %= mod;</span><br><span class="line"><span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) r = r * a % mod;</span><br><span class="line">a = a * a % mod, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">isprime.resize(N, <span class="literal">true</span>);</span><br><span class="line">isprime[<span class="number">0</span>] = isprime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">rep(i, <span class="number">2</span>, N) <span class="keyword">if</span> (isprime[i]) &#123;</span><br><span class="line">primes.push_back(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j &lt; N; j += i)</span><br><span class="line">isprime[j] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">phi</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = n;</span><br><span class="line">rep(i, <span class="number">0</span>, sz(primes)) <span class="keyword">if</span> (primes[i] &lt;= n) &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;p = primes[i];</span><br><span class="line"><span class="keyword">if</span> (n % p == <span class="number">0</span>) &#123;</span><br><span class="line">ret -= ret / p;</span><br><span class="line"><span class="keyword">while</span> (n % p == <span class="number">0</span>) n /= p;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">ret -= ret / n;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cases; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cases);</span><br><span class="line">rep(casei, <span class="number">0</span>, cases) &#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;p);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d * d &lt;= n; ++d) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % d) <span class="keyword">continue</span>;</span><br><span class="line">ans += <span class="number">1l</span>l * kpow(n, d - <span class="number">1</span>, p) * phi(n / d) % p;</span><br><span class="line"><span class="keyword">if</span> (d * d != n) </span><br><span class="line">ans += <span class="number">1l</span>l * kpow(n, n / d - <span class="number">1</span>, p) * phi(d) % p;</span><br><span class="line">ans %= p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Magic-Bracelet-1"><a href="#Magic-Bracelet-1" class="headerlink" title="Magic Bracelet"></a>Magic Bracelet</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) begin(x),end(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=(l);i&lt;(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; <span class="meta-string">", "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> de(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">9973</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">31625</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</span><br><span class="line"><span class="keyword">bool</span> isprime[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> a[M][M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">rep(i, <span class="number">0</span>, m) rep(j, <span class="number">0</span>, m)</span><br><span class="line">a[i][j] = i == j ? x : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">rep(i, <span class="number">0</span>, m) rep(j, <span class="number">0</span>, m)</span><br><span class="line">a[i][j] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trace</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">rep(i, <span class="number">0</span>, m) ret += a[i][i];</span><br><span class="line"><span class="keyword">return</span> ret % P;</span><br><span class="line">&#125;</span><br><span class="line">Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix &amp;mat) <span class="keyword">const</span> &#123;</span><br><span class="line">Matrix r; r.init(<span class="number">0</span>);</span><br><span class="line">rep(i, <span class="number">0</span>, m) rep(j, <span class="number">0</span>, m) &#123;</span><br><span class="line">rep(k, <span class="number">0</span>, m) r.a[i][j] += a[i][k] * mat.a[k][j];</span><br><span class="line">r.a[i][j] %= P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">Matrix <span class="keyword">operator</span>^(<span class="keyword">int</span> n) &#123;</span><br><span class="line">Matrix r, a = *<span class="keyword">this</span>;</span><br><span class="line">r.init(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) r = r * a;</span><br><span class="line">a = a * a, n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((x += y) &gt;= P) x -= P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initPrime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(isprime, <span class="number">1</span>, <span class="keyword">sizeof</span>(isprime));</span><br><span class="line">isprime[<span class="number">0</span>] = isprime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">rep(i, <span class="number">2</span>, N) &#123;</span><br><span class="line"><span class="keyword">if</span> (isprime[i]) prime.push_back(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; i * prime[j] &lt; N; ++j) &#123;</span><br><span class="line">isprime[i * prime[j]] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">phi</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = n;</span><br><span class="line">rep(i, <span class="number">0</span>, sz(prime)) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; prime[i]) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (n % prime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">ret -= ret / prime[i];</span><br><span class="line"><span class="keyword">while</span> (n % prime[i] == <span class="number">0</span>)</span><br><span class="line">n /= prime[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) ret -= ret / n;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> d, Matrix &amp;a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd = (a ^ d).trace();</span><br><span class="line"><span class="keyword">return</span> phi(n / d) % P * fd % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!b) x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">exgcd(b, a % b, y, x);</span><br><span class="line">y -= a / b * x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">exgcd(n, P, x, y);</span><br><span class="line">x = (x % P + P) % P;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">initPrime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cases; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cases);</span><br><span class="line"><span class="keyword">while</span> (cases-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">Matrix a; a.fill(<span class="number">1</span>);</span><br><span class="line">rep(_k, <span class="number">0</span>, k) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">--x, --y;</span><br><span class="line">a.a[x][y] = a.a[y][x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d * d &lt;= n; ++d) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % d) <span class="keyword">continue</span>;</span><br><span class="line">inc(ans, f(n, d, a));</span><br><span class="line"><span class="keyword">if</span> (d * d != n) </span><br><span class="line">inc(ans, f(n, n / d, a));</span><br><span class="line">&#125;</span><br><span class="line">ans = ans * inv(n) % P;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Birthday-Toy-1"><a href="#Birthday-Toy-1" class="headerlink" title="Birthday Toy"></a>Birthday Toy</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) begin(x),end(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=(l);i&lt;(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; <span class="meta-string">", "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> de(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">31625</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</span><br><span class="line"><span class="keyword">bool</span> isprime[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((x += y) &gt;= P) x -= P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">a %= P;</span><br><span class="line"><span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) r = <span class="number">1l</span>l * r * a % P;</span><br><span class="line">a = <span class="number">1l</span>l * a * a % P, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> a[M][M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">rep(i, <span class="number">0</span>, M) rep(j, <span class="number">0</span>, M)</span><br><span class="line">a[i][j] = i == j ? x : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix &amp;mat) <span class="keyword">const</span> &#123;</span><br><span class="line">Matrix r; r.init(<span class="number">0</span>);</span><br><span class="line">rep(i, <span class="number">0</span>, M) rep(j, <span class="number">0</span>, M) rep(k, <span class="number">0</span>, M)</span><br><span class="line">inc(r.a[i][j], <span class="number">1l</span>l * a[i][k] * mat.a[k][j] % P);</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">Matrix <span class="keyword">operator</span>^(<span class="keyword">int</span> n) &#123;</span><br><span class="line">Matrix r, a = *<span class="keyword">this</span>;</span><br><span class="line">r.init(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) r = r * a;</span><br><span class="line">a = a * a, n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initPrime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(isprime, <span class="literal">true</span>, <span class="keyword">sizeof</span>(isprime));</span><br><span class="line">isprime[<span class="number">0</span>] = isprime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">rep(i, <span class="number">2</span>, N) &#123;</span><br><span class="line"><span class="keyword">if</span> (isprime[i]) prime.push_back(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; i * prime[j] &lt; N; ++j) &#123;</span><br><span class="line">isprime[i * prime[j]] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">phi</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = n;</span><br><span class="line">rep(i, <span class="number">0</span>, sz(prime)) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; prime[i]) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (n % prime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">ret -= ret / prime[i];</span><br><span class="line"><span class="keyword">while</span> (n % prime[i] == <span class="number">0</span>)</span><br><span class="line">n /= prime[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) ret -= ret / n;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> d, Matrix &amp;a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd = <span class="number">1l</span>l * m * (a ^ d).a[<span class="number">0</span>][<span class="number">0</span>] % P;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1l</span>l * fd * phi(n / d) % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">initPrime();</span><br><span class="line"><span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k)) &#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = k - <span class="number">1</span>; <span class="comment">// #color for small beads</span></span><br><span class="line">Matrix a;</span><br><span class="line">a.a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>, a.a[<span class="number">0</span>][<span class="number">1</span>] = m - <span class="number">1</span>;</span><br><span class="line">a.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>, a.a[<span class="number">1</span>][<span class="number">1</span>] = m - <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d * d &lt;= n; ++d) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % d) <span class="keyword">continue</span>;</span><br><span class="line">inc(ans, f(n, m, d, a));</span><br><span class="line"><span class="keyword">if</span> (d * d != n)</span><br><span class="line">inc(ans, f(n, m, n / d, a));</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="number">1l</span>l * ans * kpow(n, P - <span class="number">2</span>) % P;</span><br><span class="line">ans = <span class="number">1l</span>l * ans * k % P;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>Richard A. Brualdi. 组合数学 [M].  机械工业出版社, 2012</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;h2 id=&quot;Necklace-of-Beads&quot;&gt;&lt;a href=&quot;#Necklace-of-Beads&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="polya" scheme="http://mcginn7.github.io/tags/polya/"/>
    
  </entry>
  
  <entry>
    <title>B-Tree</title>
    <link href="http://mcginn7.github.io/2019/07/22/B-Tree/"/>
    <id>http://mcginn7.github.io/2019/07/22/B-Tree/</id>
    <published>2019-07-22T04:05:58.000Z</published>
    <updated>2019-07-22T04:09:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>简单来说，B-Tree 是针对<strong>大数据存取</strong>的平衡树，考虑了<strong>磁盘读取</strong>对查找效率的影响。</p><p>B-Tree 的主要思想是通过<strong>减少磁盘读取次数</strong>来提高数据存取性能，而磁盘读取次数与<strong>树高</strong>相关。故B-Tree 允许每个节点拥有多于 2 个的子节点来减小树高。</p><p>与二叉平衡树类似，B-Tree 中的每个节点存储若干键值（keys）以及子节点地址。</p><img src="/2019/07/22/B-Tree/struct.png"><center>图 1. B-Tree 结构图</center><h2 id="定义和性质"><a href="#定义和性质" class="headerlink" title="定义和性质"></a>定义和性质</h2><p><strong>阶（order）</strong>：将子节点的允许最大数量定义为阶，如图 1 为 5 阶树。</p><p>$m$ 阶的 B-Tree 满足以下定义：</p><ol><li>每个节点最多能有 $m$ 个子节点。</li><li>每个内部节点至少有 $\lceil \frac m2\rceil$ 个子节点，内部节点（Internal nodes）为除根节点和叶节点以外的节点。</li><li>拥有 $k+1$ 个子节点的非叶节点存有 $k$ 个键值。</li><li>每个节点中的键值按<strong>递增</strong>排序。</li><li>所有的叶节点高度一样。</li></ol><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>对于平衡🌳的操作主要就是<strong>插入（Insertion）</strong>和<strong>删除（Deletion）</strong>。</p><p>以下操作均<strong>基于键值两两不同的假设</strong>进行讨论，同时键值的<strong>数量范围</strong>定义为 $[d, 2d]$，阶 $m=2d+1$。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>首先找到键值归属的<strong>叶节点</strong>，插入到该节点中，节点的键值数量可能超过上限 $2d$，即当前键值数量为 $2d+1$。</p><p>此时用<strong>中位数</strong>将该节点划分成两个新的节点，每个新节点含有 $d$ 个键值，如图 2 所示。</p><p>之后将键值中位数插入到父节点中，父节点的键值数量 +1，也有可能超上限，故需要<strong>迭代</strong>更新。</p><img src="/2019/07/22/B-Tree/split.png"><center>图 2. 节点分裂</center><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h4><p>将内部节点中的删除操作转移至叶节点中，然后自下而上重新平衡，达到键值数量要求。</p><h4 id="叶节点"><a href="#叶节点" class="headerlink" title="叶节点"></a>叶节点</h4><p>直接将对应的键值删除即可。</p><h4 id="内部节点"><a href="#内部节点" class="headerlink" title="内部节点"></a>内部节点</h4><p>假设当前删除键值为 $k$，则 $k$  的前继 $prev(k)$ 为左子树中的最大键值，后继 $succ(k)$ 为右子树中的最小键值。</p><p>$prev(k)$ 和 $succ(k)$ 均可替代 $k$ 作为分割左、右子树的新键值，同时这两个键值必然在叶节点中，进而将删除操作转移到叶节点中。</p><h4 id="重平衡"><a href="#重平衡" class="headerlink" title="重平衡"></a>重平衡</h4><p>在叶节点删除键值后可能出现键值数量为 $d-1$ 导致下溢出。此时通过转移<strong>兄弟节点</strong>的键值来完成键值补充，主要分两种情况：</p><ol><li><p><strong>合并</strong>：当前节点的左、右兄弟节点均只有 $d$ 个键值，此时可与其中一个兄弟节点及父节点中的分割键值合并，新节点的键值数量为 $2d$，相当于节点分裂的逆操作。此时父节点的键值数量减 1，需要<strong>迭代</strong>重平衡。</p><img src="/2019/07/22/B-Tree/merge.png"><center>图 3. 节点合并</center></li><li><p><strong>旋转</strong>：假设右兄弟节点的键值大于 $d$ 个（左兄弟同理），将父节点的分割键值插入到当前节点中，右兄弟节点的第 1 个键值插入到父节点中。此时当前节点、兄弟节点和父节点的键值数量均满足键值数量要求，完成平衡操作。</p><img src="/2019/07/22/B-Tree/rotate.png"><center>图 4. 旋转操作</center></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://en.wikipedia.org/wiki/B-tree" target="_blank" rel="noopener">wikipeadia</a></li><li><a href="https://www.geeksforgeeks.org/b-tree-set-1-introduction-2/" target="_blank" rel="noopener">geeksforgeeks</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;简单来说，B-Tree 是针对&lt;strong&gt;大数据存取&lt;/strong&gt;的平衡树，考虑了&lt;strong&gt;磁盘读取&lt;/strong&gt;对查找效
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AhoCorasick Algorithm</title>
    <link href="http://mcginn7.github.io/2019/05/31/AhoCorasick-Algorithm/"/>
    <id>http://mcginn7.github.io/2019/05/31/AhoCorasick-Algorithm/</id>
    <published>2019-05-31T02:23:33.000Z</published>
    <updated>2019-06-01T02:09:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>AhoCorasick 算法（简称 AC 自动机），解决多模式串的字符匹配问题，即给定若干个单词串 $W_i$，求在文本串 $T$ 中的出现位置。KMP 算法解决单模式串的字符匹配，所以 AC 自动机可认为是 KMP 算法的扩展。</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ul><li>字典树（Trie）：树上任意节点到根的路径所构成的子串，记为 $S(u)$，都是某个插入串的<strong>前缀</strong>。</li><li>KMP 算法：利用最长前后缀完成线性匹配。</li></ul><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p>AhoCorasick 本质上与 KMP 算法是一样的，都是通过相同前后缀减少重复计算问题，只是数据结构不同。</p><p>对应于 KMP，AC 自动机需要构建<strong>最长公共前后缀</strong>（LCPS，Longese Common proper Prefix and Suffix），即对于树上任意节点 $u$，找出<strong>最大树深</strong>的节点 $v$，满足 $S(v)$ 是 $S(u)$ 的<strong>真后缀</strong>。因为字典树上的任意节点 $x$ 所表示的 $S(x)$ 都是前缀，故起名最长公共前后缀。</p><p>通常将节点 $v$ 记为 $fail(u)$，表示串 $S(u)$ 失配时的跳转节点，出于可读性的考虑，本文记为 $lcps(u)$。</p><p>$lcps(u)$  的<strong>构建过程</strong>：记节点 $u$ 的父节点为 $f(u)$，与其连边的字符为 $c$。若 $lcps(f(u))$ 存在 $c$ 的出边，则 $lcps(u)=trans(lcps(f(u)), c)$。否则继续找 $lcps(lcps(f(u)))$，直至找到或到达根节点（说明未找到）。</p><img src="/2019/05/31/AhoCorasick-Algorithm/20190601092923.png"><center>图 1. lcps(u) 的构建</center><h2 id="检索过程"><a href="#检索过程" class="headerlink" title="检索过程"></a>检索过程</h2><p>假设已知 $lcps(u)$，且字典树节点 $u$ 与文本串 $T[0:i]$ 匹配，即 $T[i-|S(u)|+1:i] = S(u)$。继续匹配有两种情形：</p><ol><li><p>$trans(u, T[i+1]) \neq NULL$，则匹配长度 +1。</p></li><li><p>$trans(u, T[i+1])=NULL$，与 KMP 类似，在字典树中找出最大深度（即最长前缀）的节点 $v$，满足 $S(v)$ 是 $S(u)$ 的真后缀，同时 $trans(v, T[i+1])\neq NULL$。</p><p>令 $v = lcps(u)$，判断是否能匹配，否则继续判断 $lcps(lcps(u))$。</p></li></ol><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">7</span>; <span class="comment">// sum(|Wi|)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> E = <span class="number">26</span>; <span class="comment">// character set size</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AhoCorasick</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n, lcps[N], trans[N][E];</span><br><span class="line">    <span class="keyword">int</span> end[N]; <span class="comment">// end[u] &gt; 0 : S(u) = Wi</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">new_node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(trans[n], <span class="number">0</span>, E * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));    </span><br><span class="line">        lcps[n] = root, end[n] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        root = new_node();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = root; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = str[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!trans[u][c])</span><br><span class="line">                trans[u][c] = new_node();</span><br><span class="line">            u = trans[u][c];</span><br><span class="line">        &#125;</span><br><span class="line">        ++end[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LCPS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q(&#123;root&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; E; ++c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (trans[u][c]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = lcps[u];    </span><br><span class="line">                    <span class="keyword">while</span> (v != root &amp;&amp; !trans[v][c])</span><br><span class="line">                        v = lcps[v];</span><br><span class="line">                    lcps[trans[u][c]] = u == root ? </span><br><span class="line">                        root : trans[v][c]; </span><br><span class="line">                    Q.push(trans[u][c]);</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    trans[u][c] = trans[lcps[u]][c];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;AhoCorasick 算法（简称 AC 自动机），解决多模式串的字符匹配问题，即给定若干个单词串 $W_i$，求在文本串 $T$ 中的出现
      
    
    </summary>
    
    
      <category term="AhoCorasick" scheme="http://mcginn7.github.io/tags/AhoCorasick/"/>
    
      <category term="AC自动机" scheme="http://mcginn7.github.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Knuth-Morris-Pratt Algorithm</title>
    <link href="http://mcginn7.github.io/2019/05/24/Knuth-Morris-Pratt-Algorithm/"/>
    <id>http://mcginn7.github.io/2019/05/24/Knuth-Morris-Pratt-Algorithm/</id>
    <published>2019-05-24T15:39:27.000Z</published>
    <updated>2019-07-26T08:50:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>KMP 算法解决在文本串（text）快速找出单词（word）的所有出现位置。</p><p>暴力匹配的时间复杂度为 $O(|T||W|)$，而 KMP 算法通过引入<strong>最长前后缀</strong>，将检索的时间复杂度降至线性。</p><h2 id="最长前后缀"><a href="#最长前后缀" class="headerlink" title="最长前后缀"></a>最长前后缀</h2><blockquote><p>lps indicates longest proper prefix which is also suffix.</p></blockquote><p>最长前后缀（<strong>LPS, Longest proper Prefix and Suffix</strong>）表示既是原串 $S$ 的真前缀也是后缀的最长子串 $T$，其中 $|T|\lt |S|$。</p><script type="math/tex; mode=display">LPS(aaa) = aa \\LPS(abcdab)=ab</script><h2 id="检索过程"><a href="#检索过程" class="headerlink" title="检索过程"></a>检索过程</h2><p>假设已知<strong>单词串</strong>的每个前缀 $W[0: i]$ 的最长前后缀长度 $lps(i)$，且已经匹配 $T[i - j: i] = W[0:j]$。继续匹配有两种情形：</p><ol><li>$T[i+1]=W[j + 1]$，则匹配长度 +1。</li><li>$T[i+ 1] \neq W[j+1]$，此时显然要重新找单词串的一个<strong>最长</strong>前缀 $W[0:k], k\lt j$，使得 $T[i-k:i]=W[0:k]$ 且 $T[i + 1]=W[k+ 1]$，继续与 $i+1$ 结尾的文本串匹配。</li></ol><img src="/2019/05/24/Knuth-Morris-Pratt-Algorithm/1555835282553.png" title="情形 2 示意图"><p><center>图 1. 情形 2 示意图。虚线框表示相同部分。</center><br>此时 $W[0:k]$ 与 $W[0:j]$ 的后缀相同，同时其本身是前缀。</p><p>令 $k=lps(j)$，若 $T[i+1]=W[k+1]$，则继续匹配。否则将 $k$ 视为新的 $j$，则转化成情形 2 相同的子问题。</p><p><strong>时间复杂度</strong>：匹配成功的复杂度是线性的。而匹配失败时会减小单词串的前缀长度，减一长度<strong>至少</strong>对应一次的成功匹配，此时时间复杂度也是线性的。故算法总的时间复杂度是线性的。</p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>对于单词串的最长前后缀 $lps(i)$，本质上是单词串的自我匹配，即<strong>此时文本串为单词串</strong>。对应于检索过程中的两种情形，可以很容易地完成 $lps(i)$ 的构造。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n = |T|, m = |W|, index = [0, n)</span></span><br><span class="line">lps[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">-1</span>; i &lt; m; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; W[i] != W[j + <span class="number">1</span>])</span><br><span class="line">j = lps[j];</span><br><span class="line">j += W[i] == W[j + <span class="number">1</span>];</span><br><span class="line">lps[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; T[i] != W[j + <span class="number">1</span>])</span><br><span class="line">j = lps[j];</span><br><span class="line">j += T[i] == W[j + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (j == m - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// match successfully</span></span><br><span class="line">j = lps[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;KMP 算法解决在文本串（text）快速找出单词（word）的所有出现位置。&lt;/p&gt;
&lt;p&gt;暴力匹配的时间复杂度为 $O(|T||W|)$，而 KMP 算法通过引入&lt;strong&gt;最长前后缀&lt;/strong&gt;，将检索的时间复杂度降至线性。&lt;/p&gt;
&lt;h2 id=&quot;最长前后缀
      
    
    </summary>
    
    
      <category term="KMP" scheme="http://mcginn7.github.io/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>ICPC Resolver 踩坑</title>
    <link href="http://mcginn7.github.io/2019/05/12/ICPC-Resolver-%E8%B8%A9%E5%9D%91/"/>
    <id>http://mcginn7.github.io/2019/05/12/ICPC-Resolver-踩坑/</id>
    <published>2019-05-12T14:09:44.000Z</published>
    <updated>2019-05-22T05:41:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>从 DOMjudge 系统中导出数据，使用 ICPC Tools/Resolver 滚榜。</p><p>DOMjudge 版本：7.0.1。</p><p>Resolver 版本：2.0.1798。如果使用 DOMjudge 评测，建议使用 2.1 及以上版本。</p><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><ol><li><p>搜索 <a href="https://icpc.baylor.edu/icpctools/" target="_blank" rel="noopener">ICPC Tools</a>，下载 ICPC Resolver.rar。</p></li><li><p>运行 award.sh，通过 REST 导入 event feed（一场比赛的所有信息流）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">URL: http://59.77.134.102/domjudge/api/contests/5</span><br><span class="line">USER: amdin</span><br><span class="line">Password: *******</span><br></pre></td></tr></table></figure><p>点击 <code>save</code> 保存为 “events.xml”。</p></li><li><p>目前版本（2.0.1798）的 Resolver 存在 bug，需要<strong>手动</strong>修订 events.xml 文件：</p><ol><li><p>第 1、2 行重复 <code>&lt;contest&gt;</code>，删除其中一行。</p></li><li><p><code>&lt;problem&gt;</code> 中的生成 <code>&lt;id&gt;</code> 从 0 开始，改成从 1 开始（否则导致部分提交不合法）。</p></li><li><p>删除信息不全的队伍，必要信息有：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">team</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>221801437<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Teamaaa<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">university</span>&gt;</span>福州大学<span class="tag">&lt;/<span class="name">university</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">university-short-name</span>&gt;</span>福州大学<span class="tag">&lt;/<span class="name">university-short-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">region</span>&gt;</span>Participants<span class="tag">&lt;/<span class="name">region</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">team</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>university-short-name</code> 为滚榜中显示的学校名称，故这里写学校全称。</p></li><li><p>末尾添加 <code>finalized</code> 信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">finalized</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">last-gold</span>&gt;</span>1<span class="tag">&lt;/<span class="name">last-gold</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">last-silver</span>&gt;</span>2<span class="tag">&lt;/<span class="name">last-silver</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">last-bronze</span>&gt;</span>3<span class="tag">&lt;/<span class="name">last-bronze</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">timestamp</span>&gt;</span>1557574214.130<span class="tag">&lt;/<span class="name">timestamp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">finalized</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">contest</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>timestamp</code> 可设置成任意值。</p></li></ol><p>可使用该代码 <a href="https://github.com/McGinn7/myscript/blob/master/icpc_resolver_revise_events_xml.py" target="_blank" rel="noopener"><strong>icpc_resolver_revise_events_xml</strong></a> 修订 events.xml。</p></li><li><p>使用 award.sh 打开<strong>处理后</strong>的 events.xml，设置金银铜奖人数，然后导出新的 xml 文件，并重新修订 events.xml 文件。</p><p>由于 award.sh 金银铜每组上限 10 个，共 30 个。不符合中国国情，故需要在 events.xml 中手动修改 <code>last-gold</code> 等字段。若 <code>last-gold=3, last-silver=10</code>，则表示设置金奖 3 个，银奖 7 个。</p><p>生成的 <code>&lt;award&gt;</code> 的 citation 可设置成 “金奖”、“银奖” 中文显示。</p></li><li><p>调用以下指令开始滚榜：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resolver.sh &lt;Path to CDP&gt;</span><br></pre></td></tr></table></figure></li><li><p>CDP（<a href="https://clics.ecs.baylor.edu/index.php?title=CDP" target="_blank" rel="noopener">Contest Data Package</a>）是提供榜单需要的数据目录，其中包括：</p><ol><li>config 目录，根据官方 wiki 设置即可，<strong>必要</strong>文件包括：<ol><li>contest.yaml：设置比赛标题、时长和封榜时间。</li><li>problemset.yaml：设置题目 id，题目名称。</li><li>groups.tsv, teams.tsv：从 DOMjudge 导出。</li><li><del>userdata.tsv</del>：官方 wiki 提示必须，实际上<strong>似乎可去除</strong>。</li></ol></li><li>events.xml：比赛信息；</li><li>images/logo/team_id.png：学校图标，每个学校的在 events.xml 的第一支队伍 id，id 不包含前导 0； </li><li>images/team/team_id.jpg：队伍照片，若出现 Out Of Memory 问题，则限制队伍照片的大小或者加大 resolver.sh 中 -Xmx 参数。</li></ol></li><li><p>榜单目前并不支持队伍、学校的中文显示，需要使用压缩工具（如 Bandizip）打开 “resolver/lib/presentContest.jar”，使用支持中文的字体替换 “font/HELV.PFB” 即可。 </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h2&gt;&lt;p&gt;从 DOMjudge 系统中导出数据，使用 ICPC Tools/Resolver 滚榜。&lt;/p&gt;
&lt;p&gt;DOMjudge 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>斜率优化</title>
    <link href="http://mcginn7.github.io/2019/04/03/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    <id>http://mcginn7.github.io/2019/04/03/斜率优化/</id>
    <published>2019-04-03T13:11:53.000Z</published>
    <updated>2019-04-03T13:33:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h2><p>针对形如：</p><script type="math/tex; mode=display">dp(i)=\min _{j=1}^{i-1} (dp(j)+cost(i, j))</script><p>的动态规划转移方程，可通过’’斜率’’的<strong>单调性</strong>进行优化。</p><h2 id="题一、-HNOI2008-玩具装箱TOY"><a href="#题一、-HNOI2008-玩具装箱TOY" class="headerlink" title="题一、[HNOI2008]玩具装箱TOY"></a>题一、[HNOI2008]玩具装箱TOY</h2><h3 id="题意-题目链接"><a href="#题意-题目链接" class="headerlink" title="题意 题目链接"></a>题意 <a href="https://www.luogu.org/problemnew/show/P3195" target="_blank" rel="noopener">题目链接</a></h3><p>给定长为 $1\le N\le 50000$ 的序列 $1\le C_i\le 10^7$，将序列分成若干连续段，每段 $[i, j]$ 的花费为</p><script type="math/tex; mode=display">((j - i+\sum_{k=i}^jC_k)-L)^2</script><p>其中 $L$ 为常数，$1\le L \le 10^7$。要求计算总的最小花费代价。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>利用前缀和 $S_i​$，区间 $[i, j]​$ 序列和可表示成 $S_j - S_{i-1}​$。容易想到 dp 转移方程为：</p><script type="math/tex; mode=display">dp(j)=\min_{i=0}^{j-1}(dp(i)+cost(i, j)) \\cost(i, j) = ((j - (i + 1) + S_j - S_i) - L)^2</script><p>将变量整理归类，记 $a_j=j+S_j, b_i=i+S_i+L+1$，则 $cost(i, j)$ 转化成：</p><script type="math/tex; mode=display">cost(i, j) = (a_j-b_i)^2 = a_j^2+b_i^2-2a_jb_i</script><p>转移方程移项可得：</p><script type="math/tex; mode=display">2a_jb_i + dp(j)-a_j^2=dp(i)+b_i^2</script><p>因为 $a_j​$ 在 $j​$ 固定时可认为是个定值，故问题相当于最小化 $dp(j)-a_j^2​$，进而可以将问题看成是斜率为 $2a_j​$ 的直线，找出一点 $(b_i, dp(i)+b_i^2)​$ 使得直线在 $y​$ 轴的截距 $dp(j) - a_j^2​$ 最小。</p><img src="/2019/04/03/斜率优化/1554264317802.png" title="下凸壳"><center>图 1. 下凸壳。灰色点和黑色点分别表示非凸壳点和凸壳点。</center><p>显然，截距最小的关键点必然在<strong>下凸壳</strong>上，且下凸壳的每段斜率是<strong>单调递增</strong>的。</p><p>斜率为 $g$ 的直线截距最小所对应的最优点是，该点前一段斜率 $\lt g$，后一段斜率 $\gt g​$。</p><p>注意 $1\le C_i  \Rightarrow S_i \lt S_{i + 1} \Rightarrow a_i=i+S_i \lt a_{i + 1}=(i + 1) + S_{i + 1}$，斜率 $a_i$ 是单调递增的，则对应的最优点位置也是单调的，所以这种情况可通过<strong>双端队列</strong>将复杂度优化到 $O(n)​$。</p><h2 id="题二、小A与最大子段和"><a href="#题二、小A与最大子段和" class="headerlink" title="题二、小A与最大子段和"></a>题二、小A与最大子段和</h2><h3 id="题意-题目链接-1"><a href="#题意-题目链接-1" class="headerlink" title="题意 题目链接"></a>题意 <a href="https://ac.nowcoder.com/acm/contest/545/A" target="_blank" rel="noopener">题目链接</a></h3><p>给定长为 $1\le N \le 2\times 10^5​$ 的序列 $0 \le |A_i| \le 2000​$，找一个非空连续子段 $B​$，最大化：</p><script type="math/tex; mode=display">\sum_{i=1}^{|B|} i\times B_i</script><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>把问题进一步公式化：</p><script type="math/tex; mode=display">Ans = \max_{1\le i\le j\le N} \{\sum_{k=i}^j(k-i+1)\times A_k\} \tag 1</script><p>为了去除 $\sum$ ，引入前缀和 $S_i$ 和 $V_i=\sum_{p=1}^i p\times A_p​$，公式 (1) 转化成：</p><script type="math/tex; mode=display">Ans = \max_{0\le i\lt j\le N} \{(V_j-V_i)-i\times(S_j-S_i)\} \tag 2</script><p>根据变量下标整理归类：</p><script type="math/tex; mode=display">Ans = -S_j\times i+(i\times S_i-V_i) + V_j \\\Rightarrow S_j\times i+(Ans - V_j) = i\times S_i- V_i</script><p>同”玩具装箱TOY”，此时相当于令截距 $Ans - V_j$ <strong>最大</strong>，所以此时需要维护点集 $(i, iS_i-V_i)$ 的<strong>上凸壳</strong>。</p><p>因为 $A_i$ 存在负数，故斜率 $S_i$ 并不具有单调性，所以需要<strong>二分</strong>确定最优点的位置。 </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="https://www.cnblogs.com/ka200812/archive/2012/08/03/2621345.html" target="_blank" rel="noopener">斜率优化DP</a></p></li><li><p><a href="https://blog.csdn.net/lxc779760807/article/details/51366552" target="_blank" rel="noopener">斜率优化dp小结</a></p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="HNOI2008-玩具装箱TOY"><a href="#HNOI2008-玩具装箱TOY" class="headerlink" title="[HNOI2008]玩具装箱TOY"></a>[HNOI2008]玩具装箱TOY</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) begin(x),end(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=(l);i&lt;(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; <span class="meta-string">", "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> de(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, L, C[N];</span><br><span class="line">ll S[N], dp[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span></span><br><span class="line">ll x, y;</span><br><span class="line">P() &#123;&#125;</span><br><span class="line">P(ll _x, ll _y) &#123;</span><br><span class="line">x = _x, y = _y;</span><br><span class="line">&#125;</span><br><span class="line">P <span class="keyword">operator</span>-(<span class="keyword">const</span> P &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> P(x - p.x, y - p.y);</span><br><span class="line">&#125;</span><br><span class="line">ll <span class="keyword">operator</span>^(<span class="keyword">const</span> P &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * p.y - y * p.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X(i) (i + S[i] + L + 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y(i) (dp[i] + X(i) * X(i))</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;L);</span><br><span class="line">rep(i, <span class="number">1</span>, n + <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, C + i);</span><br><span class="line">rep(i, <span class="number">1</span>, n + <span class="number">1</span>) S[i] = S[i - <span class="number">1</span>] + C[i];</span><br><span class="line"><span class="built_in">deque</span>&lt;P&gt; Q; Q.push_back(P(X(<span class="number">0</span>), Y(<span class="number">0</span>)));</span><br><span class="line">rep(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line">ll g = <span class="number">2</span> * (i + S[i]);</span><br><span class="line"><span class="keyword">while</span> (sz(Q) &gt; <span class="number">1</span> &amp;&amp; (Q[<span class="number">1</span>].y - Q[<span class="number">0</span>].y) &lt; (Q[<span class="number">1</span>].x - Q[<span class="number">0</span>].x) * g) </span><br><span class="line">Q.pop_front();</span><br><span class="line">dp[i] = Q[<span class="number">0</span>].y - g * Q[<span class="number">0</span>].x + (i + S[i]) * (i + S[i]);</span><br><span class="line">P a(X(i), Y(i));</span><br><span class="line"><span class="keyword">while</span> (sz(Q) &gt; <span class="number">1</span> &amp;&amp; ((Q[sz(Q) - <span class="number">2</span>] - a) ^ (Q.back() - a)) &lt;= <span class="number">0</span>) </span><br><span class="line">Q.pop_back();</span><br><span class="line">Q.push_back(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, dp[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小A与最大子段和"><a href="#小A与最大子段和" class="headerlink" title="小A与最大子段和"></a>小A与最大子段和</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) begin(x),end(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=(l);i&lt;(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; <span class="meta-string">", "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> de(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N];</span><br><span class="line">ll S[N], V[N];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X(i) (i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y(i) (i * S[i] - V[i])</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span></span><br><span class="line">ll x, y;</span><br><span class="line">P() &#123;&#125; P(ll _x, ll _y) &#123; x = _x, y = _y; &#125; </span><br><span class="line">P <span class="keyword">operator</span>-(<span class="keyword">const</span> P &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> P(x - p.x, y - p.y);</span><br><span class="line">&#125;</span><br><span class="line">ll <span class="keyword">operator</span>^(<span class="keyword">const</span> P &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * p.y - y * p.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">chk</span><span class="params">(<span class="built_in">deque</span>&lt;P&gt; &amp;Q, <span class="keyword">int</span> i, ll G)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Q[i + <span class="number">1</span>].y - Q[i].y) &gt;= (Q[i + <span class="number">1</span>].x - Q[i].x) * G;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">rep(i, <span class="number">1</span>, n + <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">rep(i, <span class="number">1</span>, n + <span class="number">1</span>) S[i] = S[i - <span class="number">1</span>] + a[i];</span><br><span class="line">rep(i, <span class="number">1</span>, n + <span class="number">1</span>) V[i] = V[i - <span class="number">1</span>] + i * a[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;P&gt; Q; Q.push_back(P(X(<span class="number">0</span>), Y(<span class="number">0</span>)));</span><br><span class="line">ll ans = LLONG_MIN;</span><br><span class="line">rep(i, <span class="number">1</span>, n + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// answer</span></span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = max(<span class="number">0</span>, sz(Q) - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">while</span> (l + <span class="number">1</span> &lt; r) &#123;</span><br><span class="line"><span class="keyword">int</span> z = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">chk(Q, z, S[i]) ? l = z : r = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j = l;</span><br><span class="line"><span class="keyword">if</span> (chk(Q, r, S[i])) j = r + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (chk(Q, l, S[i])) j = l + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> j = l;</span><br><span class="line">ll f = Q[j].y - S[i] * Q[j].x + V[i];</span><br><span class="line">ans = max(ans, f);</span><br><span class="line"><span class="comment">// maintain</span></span><br><span class="line">P a(X(i), Y(i));</span><br><span class="line"><span class="keyword">while</span> (sz(Q) &gt; <span class="number">1</span> &amp;&amp; ((Q[sz(Q) - <span class="number">2</span>] - a) ^ (Q.back() - a)) &gt;= <span class="number">0</span>)</span><br><span class="line">Q.pop_back();</span><br><span class="line">Q.push_back(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;斜率优化&quot;&gt;&lt;a href=&quot;#斜率优化&quot; class=&quot;headerlink&quot; title=&quot;斜率优化&quot;&gt;&lt;/a&gt;斜率优化&lt;/h2&gt;&lt;p&gt;针对形如：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
dp(i)=\min _{
      
    
    </summary>
    
    
      <category term="ICPC" scheme="http://mcginn7.github.io/tags/ICPC/"/>
    
      <category term="斜率优化" scheme="http://mcginn7.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Nowcoder-出题人的数组</title>
    <link href="http://mcginn7.github.io/2019/03/31/Nowcoder-%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E6%95%B0%E7%BB%84/"/>
    <id>http://mcginn7.github.io/2019/03/31/Nowcoder-出题人的数组/</id>
    <published>2019-03-31T12:11:49.000Z</published>
    <updated>2019-04-03T14:01:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://ac.nowcoder.com/acm/contest/545/C" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/545/C</a><br>来源：牛客网</p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>出题人有两个数组 $A, B$，请你把两个数组归并起来使得 $Cost=∑i∗C_i$ 最小，要求两个原数组的顺序在新数组中保持不变。 </p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>第一行输入两个正整数 $n,m$，分别表示数组 $A, B$ 的长度。<br>第二行输入 $n$ 个正整数，表示数组 $A$。<br>第二行输入 $m$ 个正整数，表示数组 $B$ 。</p><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>一个正整数，表示最小代价 $Cost$。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><table style="border-collapse:collapse;border-spacing:0;border-color:#999" class="tg"><tr><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 10px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#fd6864;color:#fff;background-color:#fd6864;text-align:left">输入</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 10px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#fd6864;color:#fff;background-color:#fd6864;text-align:left">输出</th></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 10px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#fd6864;color:#444;background-color:#F7FDFA;text-align:left">3 3<br>1 3 5<br>2 6 4</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 10px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#fd6864;color:#444;background-color:#F7FDFA;text-align:left">75</td></tr></table><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>$n, m \le 100000$</p><p>$A_i, B_i \le 100000$</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>$O(nm)$ 动态规划很容易想到，但是复杂度太高且没有方法优化，那么就考虑贪心解法。</p><p>显然，合并后的数组 $C$ 格式为 $\dots ABABA\dots$，即一段 $A$ 接一段 $B$ 。</p><p>常见的贪心策略为，考虑相邻元素的交换是否会导致更优的结果。由于不能打乱原先的顺序，故总是后段的前缀替换前段的后缀，不失一般性，我们可以假设前段为 $A$，后段为 $B$。</p><p>记 $Cost(A) = \sum_{i = 1} ^ {|A|}i\times A_i$，则原先的贡献值为 $Cost(A)+Cost(B)+|A|\times Sum(B)$，交换后的贡献值为 $Cost(A)+Cost(B)+|B|\times Sum(A)$，则当 $|B|\times Sum(A) \lt |A|\times Sum(B)$，即</p><script type="math/tex; mode=display">\frac{Sum(A)}{|A|} \lt \frac{Sum(B)}{|B|}</script><p>也就是说，<strong>均值越大的段需要优先选择</strong>。</p><p>剩下的就是如何构造这些段，我们假设串 $A=A_1A_2$，当 $Average(A_1)\lt Average(A_2)$ 时，在数组 $C$ 中总会合并成一段，根据这一性质在原数组中利用<strong>单调栈</strong>即可构造初始的段，之后就是从数组 $A,B​$ 贪心选择均值较大的段。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) begin(x),end(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=(l);i&lt;(r);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; <span class="meta-string">", "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> de(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">"="</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class="line"><span class="comment">//-------</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, A[N], B[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> num; ll sum;</span><br><span class="line">    Node() &#123;&#125;</span><br><span class="line">    Node(<span class="keyword">int</span> _num, ll _sum) &#123;</span><br><span class="line">        num = _num, sum = _sum;</span><br><span class="line">    &#125;</span><br><span class="line">    Node <span class="keyword">operator</span>+(<span class="keyword">const</span> Node &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Node(num + p.num, sum + p.sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sum * p.num &lt; p.sum * num; </span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[N], b[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *r, Node *a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    rep(i, <span class="number">0</span>, n) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, r + i);</span><br><span class="line">        <span class="function">Node <span class="title">v</span><span class="params">(<span class="number">1</span>, r[i])</span></span>;    </span><br><span class="line">        <span class="keyword">while</span> (top &gt; <span class="number">0</span> &amp;&amp; a[top - <span class="number">1</span>] &lt; v)</span><br><span class="line">            v = a[--top] + v;</span><br><span class="line">        a[top++] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">int</span> la = gao(n, A, a), lb = gao(m, B, b);</span><br><span class="line">    n = m = <span class="number">0</span>;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; la || j &lt; lb; ) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; la &amp;&amp; (j == lb || !(a[i] &lt; b[j]))) &#123;</span><br><span class="line">            rep(k, n, n + a[i].num) ans += <span class="number">1l</span>l * (k + m + <span class="number">1</span>) * A[k];    </span><br><span class="line">            n += a[i++].num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; lb &amp;&amp; (i == la || !(b[j] &lt; a[i]))) &#123;</span><br><span class="line">            rep(k, m, m + b[j].num) ans += <span class="number">1l</span>l * (k + n + <span class="number">1</span>) * B[k];</span><br><span class="line">            m += b[j++].num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/545/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ac.nowcoder.com/acm/contest/545/C&lt;/a&gt;&lt;br&gt;来源
      
    
    </summary>
    
    
      <category term="ICPC" scheme="http://mcginn7.github.io/tags/ICPC/"/>
    
      <category term="贪心" scheme="http://mcginn7.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Windows 下使用 Vim</title>
    <link href="http://mcginn7.github.io/2018/10/10/Vim-for-windows-%E9%85%8D%E7%BD%AE/"/>
    <id>http://mcginn7.github.io/2018/10/10/Vim-for-windows-配置/</id>
    <published>2018-10-10T13:18:19.537Z</published>
    <updated>2019-07-29T13:15:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h2><p>主要针对 ACM/ICPC 竞赛选手在 Windows 10 系统下使用 vim 编写 C/C++ 代码。</p><p>功能配置：</p><ol><li>编译和运行 *.cpp 文件；</li><li>一键复制代码;</li><li>记事本打开代码。</li></ol><img src="/2018/10/10/Vim-for-windows-配置/1539090544618.png" title="效果图"><p>git bash 和 gvim 都配置了一遍。gvim 使用 Windows 自带的 cmd 运行的话，鼠标是没办法移动光标的，并且配置相对 git bash 较麻烦，所以推荐使用 git bash。</p><h2 id="Vimrc-配置"><a href="#Vimrc-配置" class="headerlink" title="Vimrc 配置"></a>Vimrc 配置</h2><ul><li><p>编辑安装路径下的 vimrc 文件，例如 “D:\Git\etc\vimrc”，配置快捷键。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set nu ai ci si mouse=a ts=4 sts=4 sw=4</span><br><span class="line">nmap&lt;F2&gt; :vs %&lt;.in &lt;CR&gt;</span><br><span class="line">nmap&lt;F3&gt; :w !clip.exe &lt;CR&gt; &lt;CR&gt;</span><br><span class="line">nmap&lt;F4&gt; :!write % &lt;CR&gt;</span><br><span class="line">nmap&lt;F8&gt; :!./%&lt; &lt; %&lt;.in &lt;CR&gt;</span><br><span class="line">nmap&lt;F9&gt; :!g++ % -o %&lt; -O2 -g -Wall -std=c++11 &lt;CR&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="额外配置"><a href="#额外配置" class="headerlink" title="额外配置"></a>额外配置</h2><ul><li><p>vimrc 文件默认有一些配置，可根据需要修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set vb             "这个不关的话，触发某些条件会闪屏</span><br><span class="line">set laststatus=1   "窗口底部状态栏的行数（默认是2），这里设置成1。</span><br><span class="line">au FileType c,cpp setlocal comments-=:// comments+=f:// "取消换行自动注释</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>设置 Ctrl + Alt + T 快捷键启动 Git Bash 终端。</p><ol><li>创建 “git-bash.exe” 的快捷方式，打开快捷方式的属性窗口，修改<strong>起始位置</strong>，并设置快捷键。</li><li>打开<strong>控制面板</strong>，找到 “管理工具”， 将快捷方式复制到该文件夹中。</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简要说明&quot;&gt;&lt;a href=&quot;#简要说明&quot; class=&quot;headerlink&quot; title=&quot;简要说明&quot;&gt;&lt;/a&gt;简要说明&lt;/h2&gt;&lt;p&gt;主要针对 ACM/ICPC 竞赛选手在 Windows 10 系统下使用 vim 编写 C/C++ 代码。&lt;/p&gt;
&lt;p&gt;功
      
    
    </summary>
    
    
      <category term="vim" scheme="http://mcginn7.github.io/tags/vim/"/>
    
      <category term="git bash" scheme="http://mcginn7.github.io/tags/git-bash/"/>
    
  </entry>
  
  <entry>
    <title>论文笔记 Tips and Tricks for Visual Question Answering</title>
    <link href="http://mcginn7.github.io/2018/10/09/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Tips-and-Tricks-for-Visual-Question-Answering/"/>
    <id>http://mcginn7.github.io/2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/</id>
    <published>2018-10-09T03:24:19.000Z</published>
    <updated>2018-11-12T03:27:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    该论文作者取得了 2017 VQA Challenge 的第一，总结一些 tips 和 tricks 来提升 VQA 的表现。</p><p>​    这篇论文的每个实验使用不同的随机种子<strong>重复3次实验</strong>来统计结果。</p><img src="/2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/1539055553531.png" title="模型"><center>模型</center><h2 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h2><ul><li><p>所有问题的长度固定 14。</p></li><li><p>问题特征 $q$ 与图像特征 $\hat v$ 的融合使用 Hadamard product（逐项相乘）。</p><script type="math/tex; mode=display">h = f_q(q) \circ f_v(\hat v)</script></li><li><p>目标函数（损失函数）</p><script type="math/tex; mode=display">L=-\sum_i^M\sum_j^N s_{ij}\log (\hat s_{ij})-(1-s_{ij})\log(1-\hat s_{ij})</script></li><li><p>作者使用了额外的数据集 Visual Genome(VG)，共 485,000。</p></li></ul><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><h3 id="Sigmoid-output"><a href="#Sigmoid-output" class="headerlink" title="Sigmoid output"></a>Sigmoid output</h3><ul><li><p>输出使用 sigmoid 将每个类别（或答案）归一化。</p></li><li><p>softmax 也可以用来归一化，但是会变成单个类别输出，而 sigmoid 可以输出多个类。这样可以适应一个问题有多个答案的情况。</p><img src="/2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/1539055765859.png" title="结果"></li></ul><h3 id="Soft-scores-as-ground-truth-targets"><a href="#Soft-scores-as-ground-truth-targets" class="headerlink" title="Soft scores as ground truth targets"></a>Soft scores as ground truth targets</h3><ul><li><p>VQA 中问题答案附有置信度，将答案向量化有 2 种做法：1）使用固定阈值将答案二值化；2）使用 sigmoid 或 softmax 来归一化答案。</p></li><li><p>做法1）就是 hard scores，每个类只有 0、1 两个选项。做法2）就是 soft scores，每个类都有一个浮点数的得分。</p></li><li><p>作者使用了两个简单的二值化进行对比</p><script type="math/tex; mode=display">s'_{ij}=(s_{ij}>0.0) \\s'_{ij}=(s_{ij}==1.0)</script><img src="/2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/1539055814715.png" title="结果"></li></ul><h3 id="Gated-tanh-activations"><a href="#Gated-tanh-activations" class="headerlink" title="Gated tanh activations"></a>Gated tanh activations</h3><ul><li><p>使用 gated tanh activations 作为激活函数，而不是常用的 Rectified Linear Unit（ReLU）。</p></li><li><p>激活函数 $f_a: x \in R^m \rightarrow y \in R^n$</p></li><li><script type="math/tex; mode=display">\tilde y = tanh(Wx + b) \\g = \sigma(W'x+b') \\y = \tilde y \circ g</script><p>$W,W’,b,b’$ 为训练参数，$\circ$ 表示 Hadamard product（逐项相乘）。</p></li><li><p>该激活函数之前被用于自然语言处理。</p></li></ul><h3 id="Bottom-up-attention"><a href="#Bottom-up-attention" class="headerlink" title="Bottom up attention"></a>Bottom up attention</h3><ul><li><p>使用 bottom up attention 来提取图像特征，而不是直接使用 CNN 的特征层（feature map）。</p></li><li><p>Bottom up attention 基于 Faster R-CNN 框架，提取若干 Region of Interest（RoI）的特征，继而通过非线性层做 attention。论文里使用阈值来筛选出 $K$ 个 RoI 并设置了 100 的上限（作者将数量 $K$ 固定为 36，表现会差一些，但是减少了计算开销）。</p><img src="/2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/1539055857312.png" title="结果"></li><li><p>Attention 的非线性层</p><script type="math/tex; mode=display">a_i=w_af_a(v_i, q) \\\alpha = softmax(a) \\\hat v = sum_{i=1}^K \alpha_i v_i</script><p>$q$ 为问题表示向量，$v_i$ 为 RoI 的特征向量。</p></li><li><p>使用 bottom up attention 相对于传统的 CNN 提取特征，提升是很明显的。</p></li></ul><h3 id="Pretrained-representations-to-initialize"><a href="#Pretrained-representations-to-initialize" class="headerlink" title="Pretrained representations to initialize"></a>Pretrained representations to initialize</h3><ul><li><p>论文提出了加入先验知识 $w_o^{text}$ 和 $w_o^{img}$ 来初始化输出层参数</p><script type="math/tex; mode=display">\hat s = \sigma(w_o^{text}f_o^{text}(h)+w_o^{img}f_o^{img}(h))</script></li><li><p>$w_o^{text}$ 使用 GloVe word embedding 初始化。</p></li><li><p>$w_o^{img}$  使用谷歌图片搜索 10 张对应图片并用 ResNet-10 提取特征，10 个特征向量均值化得到最终的向量表示。 </p></li><li><p>这个做法提升了大约 0.87 个点。</p></li></ul><h3 id="Larger-mini-batches"><a href="#Larger-mini-batches" class="headerlink" title="Larger mini-batches"></a>Larger mini-batches</h3><ul><li><p>通常来说，mini-batches 越大效果越好，但是大到一定程度后就不会有明显提升了，训练速度会慢。</p><img src="/2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/1539055903316.png" title="结果"></li></ul><h3 id="Smart-shufﬂing"><a href="#Smart-shufﬂing" class="headerlink" title="Smart shufﬂing"></a>Smart shufﬂing</h3><ul><li>batch 通常从数据中随机抽取。针对 VQA 这个问题来说，同个问题关联到不同图像会得到不一样的答案（balanced pair），所以作者提出了 smart shuffling 控制 balanced pair 的比例。</li><li>这个做法 VQA 得分与随机做法差不多，但是提升了 Accuracy over paris。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;​    该论文作者取得了 2017 VQA Challenge 的第一，总结一些 tips 和 tricks 来提升 VQA 的表现。&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DOMjudge 配置</title>
    <link href="http://mcginn7.github.io/2018/10/04/DOMjudge%E9%85%8D%E7%BD%AE/"/>
    <id>http://mcginn7.github.io/2018/10/04/DOMjudge配置/</id>
    <published>2018-10-04T15:29:36.000Z</published>
    <updated>2019-05-21T07:05:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Domserver-部署"><a href="#Domserver-部署" class="headerlink" title="Domserver 部署"></a>Domserver 部署</h2><h3 id="PHP-timezone"><a href="#PHP-timezone" class="headerlink" title="PHP timezone"></a>PHP timezone</h3><ol><li><p>php.ini 文件位置</p><ul><li>CentOS/RedHat/Fedora = /etc/php.ini</li><li>Ubuntu/Debian/LinuxMint = /etc/php5/apache2/php.ini</li></ul></li><li><p>选择时区，通常定位为 “Asia/Shanghai”</p><ul><li><a href="https://php.net/manual/en/timezones.php" target="_blank" rel="noopener">PHP: List of Supported Timezones</a></li></ul></li><li><p>编辑 php.ini 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date.timezone = <span class="string">"Asia/Shanghai"</span></span><br></pre></td></tr></table></figure></li><li><p>重启 Apache Service。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure></li></ol><h3 id="MySQL-maximum-connections"><a href="#MySQL-maximum-connections" class="headerlink" title="MySQL maximum connections"></a>MySQL maximum connections</h3><p>原先编辑 <em>\etc\mysql\my.cnf</em> 添加 <strong>max_connections = 1000</strong>，然后重启 apache2 即可。但是设置后一直为 214，因为该值受限于 <em>table_open_ache</em> 和 <em>open_files_limit</em>。</p><p>下面的方法在 Ubuntu 16.04 和 MySQL 5.7.23 版本实验成功：</p><ol><li><p>运行下面的命令，设置 open_files_limit</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl edit mysql</span><br></pre></td></tr></table></figure></li><li><p>输入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">LimitNOFILE=8000</span><br></pre></td></tr></table></figure></li><li><p>重启服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart mysql</span><br></pre></td></tr></table></figure></li></ol><h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><h3 id="测试数据导入"><a href="#测试数据导入" class="headerlink" title="测试数据导入"></a>测试数据导入</h3><p>在 Problems 页面下可以编辑 Problem name, Time limit 这些信息，测试数据（Testcases）在页面上<strong>只能</strong>单点添加和修改，并且不能删除。</p><p>批量导入测试数据步骤：</p><ol><li><p>先添加题目，填入”Problem name”、”Time limit” 和 “Memory limit” 等信息，其余的保存默认即可，但是暂不添加 “Testcases”。</p></li><li><p>点击该题目的导出按钮，下载得到一个压缩包。解压后的文件夹内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 在Windows使用 tree/f 生成该目录文本信息</span><br><span class="line">│  domjudge-problem.ini</span><br><span class="line">│  problem.yaml</span><br><span class="line">│</span><br><span class="line">├─data</span><br><span class="line">│  ├─sample</span><br><span class="line">│  └─secret</span><br><span class="line">│</span><br><span class="line">└─problem_statement</span><br><span class="line">        problem.pdf</span><br></pre></td></tr></table></figure></li><li><p>目录 <em>sample</em> 和 <em>secret</em> 可自行创建，两个目录存放样例数据和隐藏数据（即测试数据）。</p></li><li><p>将数据 “0.in”，“0.ans” 放入对应的文件夹下，重新压缩成新的压缩包。</p></li><li><p>在题目的编辑页面，通过 <em>Upload problem archive</em> 上传新压缩包。注意 <em>Contest</em> 选项选择为 <em>Do not add / update contest data</em>，否则可能会上传失败。</p></li></ol><h3 id="队伍账号导入"><a href="#队伍账号导入" class="headerlink" title="队伍账号导入"></a>队伍账号导入</h3><ul><li><p><a href="https://www.domjudge.org/pipermail/domjudge-devel/2015-September/001753.html" target="_blank" rel="noopener">Domjudge队伍导入 - 参考链接</a></p></li><li><p>需要在 home &gt; import / export 页面下，导入 <em>teams.tsv</em> 和 <em>accounts.tsv</em> 这两个文件。在编辑这两个文件时，需要使用 <strong>UTF-8</strong> 格式，否则会上传失败或导致乱码。</p></li><li><p><strong>teams.tsv</strong></p><p> 该文件用于描述队伍信息，包含一版本行，接着每个队伍占用一行，每行包括用制表符（tab）分隔的字段。</p><p> 首行为版本行，格式如下：</p> <table style="border-collapse:collapse;border-spacing:0;border-color:#ccc" class="tg"><tr><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Field</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Description</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Example</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Type</th></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">1</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Label</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">teams</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">fixed string (always same value)</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">2</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Version number</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">1</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">integer</td></tr></table><p> 队伍描述行，格式如下：</p> <table style="border-collapse:collapse;border-spacing:0;border-color:#ccc" class="tg"><tr><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#ffffff;background-color:#fd6864;text-align:left">Field</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#ffffff;background-color:#fd6864;text-align:left">Description</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#ffffff;background-color:#fd6864;text-align:left">Example</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#ffffff;background-color:#fd6864;text-align:left">Type</th></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">1</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">Team Number</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">22</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">integer</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">2</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">External ID</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">24314</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left">integer</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">3</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Group ID</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">3</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">integer</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">4</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Team name</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Hoos</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">string</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">5</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Institution name</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Fuzhou University</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">string</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">6</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Institution short name</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">FZU</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">string</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">7</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Country Code</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">CHN</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">string ISO 3166-1 alpha-3</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">8</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Affiliation External ID</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">Fuzhou University</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:inherit;color:#333;background-color:#fff;text-align:left;vertical-align:top">string</td></tr> </table><p> <code>Group ID</code> 对应 Categories 中的 ID，表示队伍的角色，如女队、打星队等。</p></li><li><p><strong>accounts.tsv</strong></p><p> 该文件用于描述账号信息，同样包含版本行和账号行，每个账号占用一行。</p><p> 首行版本行的格式如下：</p> <table style="border-collapse:collapse;border-spacing:0;border-color:#ccc" class="tg"><tr><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Field</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Description</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Example</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Type</th></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">1</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Label</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">accounts</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">fixed string (always same value)</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">2</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Version number</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">1</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">integer</td></tr></table><p> 账号描述行的格式如下：</p> <table style="border-collapse:collapse;border-spacing:0;border-color:#ccc" class="tg"><tr><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Field</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Description</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Example</th><th style="font-family:Arial, sans-serif;font-size:14px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#ffffff;background-color:#fd6864;text-align:left">Type</th></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">1</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Account Type</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">team</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">string</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">2</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Full Name</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">wtf</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">string</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">3</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Username</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">team099</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">string</td></tr><tr><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">4</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">Password</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">B!5MWJiy</td><td style="font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;border-top-width:1px;border-bottom-width:1px;border-color:#ccc;color:#333;background-color:#fff;text-align:left">string</td></tr></table><p> Account Type 取值为：team, judge, admin, analyst。这里要导入队伍账号，所以该字段在这固定为 team。</p><p> <strong>注意：</strong>需要设置 <code>Username</code> 的格式才能将账号和队伍关联起来，规则为：<code>Username</code> 的整数部分需要和 <strong>team.tsv</strong> 中的 <code>Team Number</code> 一致。比如一支队伍 <code>Team Number</code> 为 99，则 <code>Username</code>  可以设置为 team-099。</p></li><li><p>导入样例</p><p> team.tsv 文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">teams1</span><br><span class="line">8team0083三核战队福州大学FZDXCHN福州大学</span><br><span class="line">18team0183挂机不队福州大学FZDXCHN福州大学</span><br><span class="line">31team0313这都是什么鬼福州大学FZDXCHN福州大学</span><br></pre></td></tr></table></figure><p> accounts.tsv 文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">accounts1</span><br><span class="line">team三核战队team008T3yRt3</span><br><span class="line">team挂机不队team01886MFyB</span><br><span class="line">team这都是什么鬼team031RTJr6e</span><br></pre></td></tr></table></figure></li></ul><h2 id="评测机"><a href="#评测机" class="headerlink" title="评测机"></a>评测机</h2><h3 id="Unprivileged-user-and-group"><a href="#Unprivileged-user-and-group" class="headerlink" title="Unprivileged user and group"></a>Unprivileged user and group</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 下面这条命令是必须运行的</span><br><span class="line">useradd -d /nonexistent -U -M -s /bin/false domjudge-run</span><br><span class="line">// X=1~4，X通常等同于CPU核心数</span><br><span class="line">useradd -d /nonexistent -U -M -s /bin/false domjudge-run-X</span><br></pre></td></tr></table></figure><h3 id="Linux-Control-Groups"><a href="#Linux-Control-Groups" class="headerlink" title="Linux Control Groups"></a>Linux Control Groups</h3><ul><li>每次<strong>重启</strong>都需要运行 <strong><em>judgehost/bin/create_cgroups</em></strong>，否则提交会编译错误。</li></ul><h2 id="问题集锦"><a href="#问题集锦" class="headerlink" title="问题集锦"></a>问题集锦</h2><h3 id="1-比赛正常需要几台机器？"><a href="#1-比赛正常需要几台机器？" class="headerlink" title="1. 比赛正常需要几台机器？"></a>1. 比赛正常需要几台机器？</h3><p>个人认为正常应该至少需要 4 台机器，配置较高的作为主服务器，即 DOMserver，提供比赛的 web 页面；一台打印服务器，也安装 DOMserver，但开放 print 页面，达到比赛与打印分开，减少宕机对选手的影响；两台评测机，即 Judgehost，这样如果一台宕机，也有另一台继续评测，而不是完全中断评测，并且修复后可随时上线新的评测机。</p><p>由于安装的机器较多且安装包大，建议使用 apt-offline 打包需要的安装包，节省安装时间。</p><h3 id="2-气球状态页面返回-500-错误"><a href="#2-气球状态页面返回-500-错误" class="headerlink" title="2. 气球状态页面返回 500 错误"></a>2. 气球状态页面返回 500 错误</h3><p>正式比赛开始时，contest 只能留有一个比赛。（个人不知道原因）。</p><h3 id="3-测试数据上传失败"><a href="#3-测试数据上传失败" class="headerlink" title="3. 测试数据上传失败"></a>3. 测试数据上传失败</h3><p>可能需要修改的几个文件：</p><ol><li><p>/etc/apache2/conf-avaliable/domjudge.conf</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_php7.c&gt;</span><br><span class="line">php_value max_file_uploads    <span class="number">101</span></span><br><span class="line">php_value upload_max_filesize <span class="number">128</span>M</span><br><span class="line">php_value post_max_size       <span class="number">128</span>M</span><br><span class="line">php_value memory_limit        <span class="number">512</span>M</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></li><li><p>/etc/mysql/my.cnf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">max_connections = 10000</span><br><span class="line">max_allowed_packet = 512M</span><br><span class="line">innodb_log_file_size = 512M</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-如何让-DOMJudge-支持多台打印机？"><a href="#4-如何让-DOMJudge-支持多台打印机？" class="headerlink" title="4. 如何让 DOMJudge 支持多台打印机？"></a>4. 如何让 DOMJudge 支持多台打印机？</h3><p>修改 domserver/webapp/src/DOMJudgeBundle/Utils/Printing.php 中 <code>cmd</code> 指令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$cmd = <span class="string">"enscript -C "</span> . $highlight</span><br><span class="line">    . <span class="string">" -d "</span> . $printername <span class="comment">// 指定打印机名</span></span><br><span class="line">    . <span class="string">" -b "</span> . escapeshellarg($header)</span><br><span class="line">    . <span class="string">" -a 0-10 "</span></span><br><span class="line">    . <span class="string">" -f Courier9 "</span></span><br><span class="line"><span class="comment">//    . " -p $tmp "</span></span><br><span class="line">    . escapeshellarg($filename) . <span class="string">" 2&gt;&amp;1"</span>;</span><br></pre></td></tr></table></figure><p>去除 <code>-p $tmp</code> ，添加 <code>-d</code> 参数，指定打印机打印。多台打印机则让打印机名轮转即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Domserver-部署&quot;&gt;&lt;a href=&quot;#Domserver-部署&quot; class=&quot;headerlink&quot; title=&quot;Domserver 部署&quot;&gt;&lt;/a&gt;Domserver 部署&lt;/h2&gt;&lt;h3 id=&quot;PHP-timezone&quot;&gt;&lt;a href=&quot;#P
      
    
    </summary>
    
    
      <category term="domjudge" scheme="http://mcginn7.github.io/tags/domjudge/"/>
    
  </entry>
  
  <entry>
    <title>论文笔记 Semantic Compositional Networks for Visual Captioning</title>
    <link href="http://mcginn7.github.io/2018/08/18/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%20Semantic%20Compositional%20Networks%20for%20Visual%20Captioning/"/>
    <id>http://mcginn7.github.io/2018/08/18/论文笔记 Semantic Compositional Networks for Visual Captioning/</id>
    <published>2018-08-18T12:58:18.000Z</published>
    <updated>2018-10-08T12:55:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​    该论文提出了语义组合网络(Semantic Compositional Network, SCN)，其有效利用语义概念（标签）来达到效果比较好的图文生成。</p><p><img src="https://github.com/McGinn7/mcginn7.github.io/blob/master/img/temp/1534597565116.png?raw=true" alt></p><h3 id="Semantic-compositional-networks"><a href="#Semantic-compositional-networks" class="headerlink" title="Semantic compositional networks"></a>Semantic compositional networks</h3><p><img src="https://github.com/McGinn7/mcginn7.github.io/blob/master/img/temp/1534597459535.png?raw=true" alt></p><ul><li><p><strong>模型基础</strong></p><p>使用CNN提取图像特征，RNN作文字生成。</p><p>文字生成的概率公式：</p><script type="math/tex; mode=display">p(\bold X | \bold I) = \prod _{t=1}^Tp(x_t|x_0, \dots , x_{t-1}, v)</script><p> $ \bold X = (x_1, \dots , x_T)$ 表示文字序列，$v$ 为提取的图像特征。</p><p>  LSTM的转换函数：</p><script type="math/tex; mode=display">h_t = \sigma(Wx_{t-1}+Uh_{t-1}+\mathbb{1}(t=1)\cdot Cv)</script><p>​    图像特征仅在开始输入<strong>一次</strong>。</p></li></ul><ul><li><p><strong>语义概念检测 </strong></p><p>作者将语义标签检测作为多标签分类问题。</p><p>首先先从训练集的文字说明中提取常见的 $K \approx 1000$个单词作为分类标签 $y_i = [y_{i1}，\dots，y_{iK}] \in \{0, 1\}^K$。</p><p>标签$s_i$使用MLP来预测(Ps：这里可能是在CNN的基础上加入MLP)，</p><script type="math/tex; mode=display">s_i = \sigma(MLP(v_i))</script><p>$s_i$表示每个标签的概率，也可以理解为权重。</p><p>优化目标函数：</p><script type="math/tex; mode=display">\frac 1N\sum_{i=1}^N \sum_{k=1}^K {(y_{ik}\log s_{ik}+(1-y_{ik}\log(1-s_{ik})))}</script></li><li><p><strong>SCN-RNN</strong></p><p>这一步就是将语义标签嵌入到RNN中。 </p><p><img src="https://github.com/McGinn7/mcginn7.github.io/blob/master/img/temp/1534596069120.png?raw=true" alt></p><p>嵌入相关公式：</p><script type="math/tex; mode=display">\hat x_{t-1}=W_bs\bigodot W_cx_{t-1} \\\hat h_{t-1} = U_bs\bigodot U_ch_{t-1} \\z=\mathbb{1}(t=1)\cdot Cv \\h_t = \sigma(W_a\hat x_{t-1} + U_a\hat h_{t-1} + z)</script></li><li><p><strong>视频文字生成(video caption)</strong></p><p>视频的图像特征包括两部分：均值池化2D CNN提取的图像特征和3D CNN提取的特征，两个特征连接起来作为视频的图像特征。</p></li></ul><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><ul><li>在数据集COCO和Youtube2Text的各个评估指标全面提升。</li></ul><p><img src="https://github.com/McGinn7/mcginn7.github.io/blob/master/img/temp/1534596916958.png?raw=true" alt></p><p><img src="https://github.com/McGinn7/mcginn7.github.io/blob/master/img/temp/1534596858609.png?raw=true" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;​    该论文提出了语义组合网络(Semantic Compositional Network, SCN)，其有效利用语义概念（标签）来达
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The Binding of Isaac:Afterbirth+总结</title>
    <link href="http://mcginn7.github.io/2018/07/19/The%20Binding%20of%20Isaac%20Afterbirth+%E6%80%BB%E7%BB%93/"/>
    <id>http://mcginn7.github.io/2018/07/19/The Binding of Isaac Afterbirth+总结/</id>
    <published>2018-07-19T07:02:03.000Z</published>
    <updated>2018-07-21T07:20:04.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><img src="http://www.chinabaike.com/uploads/allimg/160614/031Q331C-41.jpg" alt="献血袋"></p><p>献血袋：扣半颗红心（子宫层一颗），掉落随机数量（通常1）的硬币。献血袋很强，很容易刷起来。</p></li><li><p><img src="http://ins.lookgame.com/static/allimg/151130/5-151130101R4.png" alt="手术刀"></p><p>手术刀：在地上制造褐色和蓝色两个通道并传送，传送出来时有短暂无敌，可以做到：</p><ol><li><strong>白嫖卖血机</strong>，喂黑小孩，进出刺房等；</li><li>进BOSS房和挑战房时，开箱子后直接传出去。</li></ol></li><li><p>在白心的隐藏房，使用存血罐可以吐出白心。配合1+1和肉刀可以生成N多肉哥。</p></li><li><p>钥匙通常留给商店使用。</p></li><li><p>睫毛膏是负面道具，不要拿。</p></li><li><p>商店高概率刷出复眼（复制本房间的道具，未购买的道具也可以复制），最好等出了打折券再用。</p></li><li><p>20分钟内打败妈腿会开Boss Rush房；30分钟内打败妈心开启Blue Womb(蓝色子宫，打hush)房。使用<strong>MaMa Mega!</strong>可以<strong>强制</strong>开启br和bw。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;http://www.chinabaike.com/uploads/allimg/160614/031Q331C-41.jpg&quot; alt=&quot;献血袋&quot;&gt;&lt;/p&gt;
&lt;p&gt;献血袋：扣半颗红心（子宫层一颗），掉落随机数量（通常1）的硬币。献血袋
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>论文阅读记录</title>
    <link href="http://mcginn7.github.io/2018/07/17/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    <id>http://mcginn7.github.io/2018/07/17/论文阅读记录/</id>
    <published>2018-07-17T02:33:16.000Z</published>
    <updated>2018-07-17T02:57:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2014"><a href="#2014" class="headerlink" title="2014"></a>2014</h3><ul><li><a href="https://arxiv.org/abs/1406.2661v1" target="_blank" rel="noopener">Generative Adversarial Networks</a><ul><li><a href="https://srome.github.io//An-Annotated-Proof-of-Generative-Adversarial-Networks-with-Implementation-Notes/" target="_blank" rel="noopener">An Annotated Proof of Generative Adversarial Networks with Implementation Notes</a></li></ul></li><li><a href="https://arxiv.org/abs/1411.1784" target="_blank" rel="noopener">Conditional Generative Adversarial Nets</a></li></ul><h3 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h3><ul><li><a href="https://arxiv.org/abs/1610.09585" target="_blank" rel="noopener">Conditional Image Synthesis With Auxiliary Classifier GANs</a></li><li><a href="https://arxiv.org/abs/1606.03657" target="_blank" rel="noopener">InfoGAN: Interpretable Representation Learning by Information Maximizing  Generative Adversarial Nets</a></li></ul><h3 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h3><ul><li><a href="https://arxiv.org/abs/1701.07875" target="_blank" rel="noopener">Wasserstein GAN</a><ul><li><a href="https://zhuanlan.zhihu.com/p/25071913" target="_blank" rel="noopener">令人拍案叫绝的Wasserstein GAN</a></li></ul></li><li><a href="https://arxiv.org/abs/1704.00028" target="_blank" rel="noopener">Improved Training of Wasserstein GANs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2014&quot;&gt;&lt;a href=&quot;#2014&quot; class=&quot;headerlink&quot; title=&quot;2014&quot;&gt;&lt;/a&gt;2014&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1406.2661v1&quot; target=&quot;_bla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu离线安装软件包</title>
    <link href="http://mcginn7.github.io/2018/06/05/apt-offline%E7%AE%A1%E7%90%86Ubuntu%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E5%8C%85/"/>
    <id>http://mcginn7.github.io/2018/06/05/apt-offline管理Ubuntu离线安装软件包/</id>
    <published>2018-06-05T11:27:37.000Z</published>
    <updated>2018-06-06T06:26:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://wiki.ubuntu.org.cn/Apt-offline离线安装指南" target="_blank" rel="noopener">apt-offline离线安装指南</a></li><li><a href="https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/" target="_blank" rel="noopener">https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/</a></li><li><a href="http://manpages.ubuntu.com/manpages/precise/man8/apt-offline.8.html#contenttoc4" target="_blank" rel="noopener">http://manpages.ubuntu.com/manpages/precise/man8/apt-offline.8.html#contenttoc4</a></li><li><a href="https://www.debian.org/" target="_blank" rel="noopener">https://www.debian.org/</a></li><li><a href="https://camicri.github.io/camicri-cube/#/" target="_blank" rel="noopener">https://camicri.github.io/camicri-cube/#/</a></li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>需要升级/安装软件的电脑无网络。</li><li>软件要安装到多台电脑上，且软件较大，下载时间长。</li></ul><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ul><li>由于<strong>apt-offline</strong>的安装有依赖，离线安装会失败，所以需要借助<strong>Camicri Cube</strong>来完成<strong>apt-offline</strong>的安装。</li><li>不用<strong>Camicri Cube</strong>完成全部安装是因为它貌似不支持命令行，只有可视化界面操作。如果安装的包较多，就比较麻烦。而<strong>apt-offline</strong>支持命令行操作，一次性可以打包多个安装包，比较方便。</li></ul><h3 id="Camicri-Cube完成离线系统升级"><a href="#Camicri-Cube完成离线系统升级" class="headerlink" title="Camicri Cube完成离线系统升级"></a>Camicri Cube完成离线系统升级</h3><ul><li>在<strong>离线</strong>电脑上打开Camicri Cube，创建一个<strong>project</strong>，关闭后打包Cube目录下相应的project。</li><li>在<strong>联网</strong>电脑上，将打包文件解压到Cube目录下的project目录，然后用Cube打开这个project。</li><li>点击  <strong>Cube -&gt; Repository -&gt; Download Repositories</strong>  进行下载更新。</li><li>点击 <strong> Asterisk -&gt; Upgradable</strong> ， <strong> Cube -&gt; Download -&gt; Mark All Updates for Download </strong>，  <strong> Cube -&gt; Download -&gt; Download All Marked Packages</strong> ，就可以完成软件包的升级。</li><li>在上方的搜索框输入<strong>apt-offline</strong>和<strong>vim</strong>，点download进行下载。</li><li>在<strong>联网</strong>电脑的project打包后传到<strong>离线</strong>电脑上，<strong>覆盖</strong>原先的project，然后用Cube打开。</li><li><strong> Cube -&gt; System -&gt; Update Computer’s Repositories</strong> 更新Repository。</li><li><strong>Cube -&gt; Install -&gt; Mark All Downloaded for Installation</strong>  , <strong>Cube -&gt; Install -&gt; Install All Marked Packages </strong> ，完成安装软件。</li></ul><h3 id="apt-offline下载及安装离线软件包"><a href="#apt-offline下载及安装离线软件包" class="headerlink" title="apt-offline下载及安装离线软件包"></a>apt-offline下载及安装离线软件包</h3><ul><li><p>假设要在<strong>离线</strong>电脑安装mysql-server，先在离线电脑运行以下命令来，完成安装包的行为和定义签名文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-offline set debian-install.sig --install-packages mysql-server</span><br></pre></td></tr></table></figure></li><li><p>将生成的<strong>debian-install.sig</strong>文件上传到<strong>联网</strong>电脑执行下载并打包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-offline get debian-install.sig --bundle debian-install.zip</span><br></pre></td></tr></table></figure></li><li><p>将打包好的<strong>debian-install.zip</strong>传到<strong>离线</strong>电脑上，运行下面的命令来更新APT database:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-offline install debian-install.zip</span><br></pre></td></tr></table></figure></li><li><p>最后运行apt-get来完成安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.ubuntu.org.cn/Apt-offline离线安装指南&quot; ta
      
    
    </summary>
    
    
  </entry>
  
</feed>
