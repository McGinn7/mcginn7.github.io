{"meta":{"title":"Mcginn's Blog","subtitle":null,"description":null,"author":"Mcginn","url":"http://mcginn7.github.io"},"pages":[],"posts":[{"title":"Knuth-Morris-Pratt Algorithm","slug":"Knuth-Morris-Pratt-Algorithm","date":"2019-05-24T15:39:27.000Z","updated":"2019-05-24T15:48:21.175Z","comments":true,"path":"2019/05/24/Knuth-Morris-Pratt-Algorithm/","link":"","permalink":"http://mcginn7.github.io/2019/05/24/Knuth-Morris-Pratt-Algorithm/","excerpt":"","text":"KMP 算法解决在文本串（text）快速找出单词（word）的所有出现位置。 暴力匹配的时间复杂度为 $O(|T||W|)$，而 KMP 算法通过引入最长前后缀，将检索的时间复杂度降至线性。 最长前后缀 lps indicates longest proper prefix which is also suffix. 最长前后缀（LPS, Longest proper Prefix and Suffix）表示既是原串 $S$ 的真前缀也是后缀的最长子串 $T$，其中 $|T|\\lt |S|$。 LPS(aaa) = aa \\\\ LPS(abcdab)=ab检索过程假设已知单词串的每个前缀 $W[0: i]$ 的最长前后缀长度 $lps(i)$，且已经匹配 $T[i - j: i] = W[0:j]$。继续匹配有两种情形： $T[i+1]=W[j + 1]$，则匹配长度 +1。 $T[i+ 1] \\neq W[j+1]$，此时显然要重新找单词串的一个最长前缀 $W[0:k], k\\lt j$，使得 $T[i-k:i]=W[0:k]$ 且 $T[i + 1]=W[k+ 1]$，继续与 $i+1$ 结尾的文本串匹配。 图 1. 情形 2 示意图。虚线框表示相同部分。 此时 $W[0:k]$ 是 $W[0:j]$ 的后缀，同时也是前缀。 令 $k=lsp(j)$，若 $T[i+1]=W[k+1]$，则继续匹配。否则将 $k$ 视为新的 $j$，则转化成情形 2 相同的子问题。 时间复杂度：匹配成功的复杂度是线性的。而匹配失败时会减小单词串的前缀长度，减一长度至少对应一次的成功匹配，此时时间复杂度也是线性的。故算法总的时间复杂度是线性的。 预处理对于单词串的最长前后缀 $lsp(i)$，本质上是单词串的自我匹配，即此时文本串为单词串。对应于检索过程中的两种情形，可以很容易地完成 $lsp(i)$ 的构造。 参考代码1234567891011121314151617// n = |T|, m = |W|lps[0] = -1;for (int i = 1, j = -1; i &lt; m; ++i) &#123; while (j &gt;= 0 &amp;&amp; W[i] != W[j + 1]) j = lps[j]; j += W[i] == W[j + 1]; lps[i] = j;&#125;for (int i = 0, j = -1; i &lt; n; ++i) &#123; while (j &gt;= 0 &amp;&amp; T[i] != W[j + 1]) j = lps[j]; j += T[i] == W[j + 1]; if (j == m - 1) &#123; // match successfully j = lps[j]; &#125;&#125;","categories":[],"tags":[{"name":"KMP","slug":"KMP","permalink":"http://mcginn7.github.io/tags/KMP/"}]},{"title":"ICPC Resolver 踩坑","slug":"ICPC-Resolver-踩坑","date":"2019-05-12T14:09:44.000Z","updated":"2019-05-22T05:41:41.000Z","comments":true,"path":"2019/05/12/ICPC-Resolver-踩坑/","link":"","permalink":"http://mcginn7.github.io/2019/05/12/ICPC-Resolver-踩坑/","excerpt":"","text":"应用场景从 DOMjudge 系统中导出数据，使用 ICPC Tools/Resolver 滚榜。 DOMjudge 版本：7.0.1。 Resolver 版本：2.0.1798。如果使用 DOMjudge 评测，建议使用 2.1 及以上版本。 数据操作 搜索 ICPC Tools，下载 ICPC Resolver.rar。 运行 award.sh，通过 REST 导入 event feed（一场比赛的所有信息流）。 123URL: http://59.77.134.102/domjudge/api/contests/5USER: amdinPassword: ******* 点击 save 保存为 “events.xml”。 目前版本（2.0.1798）的 Resolver 存在 bug，需要手动修订 events.xml 文件： 第 1、2 行重复 &lt;contest&gt;，删除其中一行。 &lt;problem&gt; 中的生成 &lt;id&gt; 从 0 开始，改成从 1 开始（否则导致部分提交不合法）。 删除信息不全的队伍，必要信息有： 1234567&lt;team&gt; &lt;id&gt;221801437&lt;/id&gt; &lt;name&gt;Teamaaa&lt;/name&gt; &lt;university&gt;福州大学&lt;/university&gt; &lt;university-short-name&gt;福州大学&lt;/university-short-name&gt; &lt;region&gt;Participants&lt;/region&gt;&lt;/team&gt; university-short-name 为滚榜中显示的学校名称，故这里写学校全称。 末尾添加 finalized 信息： 1234567&lt;finalized&gt; &lt;last-gold&gt;1&lt;/last-gold&gt; &lt;last-silver&gt;2&lt;/last-silver&gt; &lt;last-bronze&gt;3&lt;/last-bronze&gt; &lt;timestamp&gt;1557574214.130&lt;/timestamp&gt;&lt;/finalized&gt;&lt;/contest&gt; timestamp 可设置成任意值。 可使用该代码 icpc_resolver_revise_events_xml 修订 events.xml。 使用 award.sh 打开处理后的 events.xml，设置金银铜奖人数，然后导出新的 xml 文件，并重新修订 events.xml 文件。 由于 award.sh 金银铜每组上限 10 个，共 30 个。不符合中国国情，故需要在 events.xml 中手动修改 last-gold 等字段。若 last-gold=3, last-silver=10，则表示设置金奖 3 个，银奖 7 个。 生成的 &lt;award&gt; 的 citation 可设置成 “金奖”、“银奖” 中文显示。 调用以下指令开始滚榜： 1resolver.sh &lt;Path to CDP&gt; CDP（Contest Data Package）是提供榜单需要的数据目录，其中包括： config 目录，根据官方 wiki 设置即可，必要文件包括： contest.yaml：设置比赛标题、时长和封榜时间。 problemset.yaml：设置题目 id，题目名称。 groups.tsv, teams.tsv：从 DOMjudge 导出。 userdata.tsv：官方 wiki 提示必须，实际上似乎可去除。 events.xml：比赛信息； images/logo/team_id.png：学校图标，每个学校的在 events.xml 的第一支队伍 id，id 不包含前导 0； images/team/team_id.jpg：队伍照片，若出现 Out Of Memory 问题，则限制队伍照片的大小或者加大 resolver.sh 中 -Xmx 参数。 榜单目前并不支持队伍、学校的中文显示，需要使用压缩工具（如 Bandizip）打开 “resolver/lib/presentContest.jar”，使用支持中文的字体替换 “font/HELV.PFB” 即可。","categories":[],"tags":[]},{"title":"斜率优化","slug":"斜率优化","date":"2019-04-03T13:11:53.000Z","updated":"2019-04-03T13:33:24.000Z","comments":true,"path":"2019/04/03/斜率优化/","link":"","permalink":"http://mcginn7.github.io/2019/04/03/斜率优化/","excerpt":"","text":"斜率优化针对形如： dp(i)=\\min _{j=1}^{i-1} (dp(j)+cost(i, j))的动态规划转移方程，可通过’’斜率’’的单调性进行优化。 题一、[HNOI2008]玩具装箱TOY题意 题目链接给定长为 $1\\le N\\le 50000$ 的序列 $1\\le C_i\\le 10^7$，将序列分成若干连续段，每段 $[i, j]$ 的花费为 ((j - i+\\sum_{k=i}^jC_k)-L)^2其中 $L$ 为常数，$1\\le L \\le 10^7$。要求计算总的最小花费代价。 解题思路利用前缀和 $S_i​$，区间 $[i, j]​$ 序列和可表示成 $S_j - S_{i-1}​$。容易想到 dp 转移方程为： dp(j)=\\min_{i=0}^{j-1}(dp(i)+cost(i, j)) \\\\ cost(i, j) = ((j - (i + 1) + S_j - S_i) - L)^2将变量整理归类，记 $a_j=j+S_j, b_i=i+S_i+L+1$，则 $cost(i, j)$ 转化成： cost(i, j) = (a_j-b_i)^2 = a_j^2+b_i^2-2a_jb_i转移方程移项可得： 2a_jb_i + dp(j)-a_j^2=dp(i)+b_i^2因为 $a_j​$ 在 $j​$ 固定时可认为是个定值，故问题相当于最小化 $dp(j)-a_j^2​$，进而可以将问题看成是斜率为 $2a_j​$ 的直线，找出一点 $(b_i, dp(i)+b_i^2)​$ 使得直线在 $y​$ 轴的截距 $dp(j) - a_j^2​$ 最小。 图 1. 下凸壳。灰色点和黑色点分别表示非凸壳点和凸壳点。 显然，截距最小的关键点必然在下凸壳上，且下凸壳的每段斜率是单调递增的。 斜率为 $g$ 的直线截距最小所对应的最优点是，该点前一段斜率 $\\lt g$，后一段斜率 $\\gt g​$。 注意 $1\\le C_i \\Rightarrow S_i \\lt S_{i + 1} \\Rightarrow a_i=i+S_i \\lt a_{i + 1}=(i + 1) + S_{i + 1}$，斜率 $a_i$ 是单调递增的，则对应的最优点位置也是单调的，所以这种情况可通过双端队列将复杂度优化到 $O(n)​$。 题二、小A与最大子段和题意 题目链接给定长为 $1\\le N \\le 2\\times 10^5​$ 的序列 $0 \\le |A_i| \\le 2000​$，找一个非空连续子段 $B​$，最大化： \\sum_{i=1}^{|B|} i\\times B_i解题思路把问题进一步公式化： Ans = \\max_{1\\le i\\le j\\le N} \\{\\sum_{k=i}^j(k-i+1)\\times A_k\\} \\tag 1为了去除 $\\sum$ ，引入前缀和 $S_i$ 和 $V_i=\\sum_{p=1}^i p\\times A_p​$，公式 (1) 转化成： Ans = \\max_{0\\le i\\lt j\\le N} \\{(V_j-V_i)-i\\times(S_j-S_i)\\} \\tag 2根据变量下标整理归类： Ans = -S_j\\times i+(i\\times S_i-V_i) + V_j \\\\ \\Rightarrow S_j\\times i+(Ans - V_j) = i\\times S_i- V_i同”玩具装箱TOY”，此时相当于令截距 $Ans - V_j$ 最大，所以此时需要维护点集 $(i, iS_i-V_i)$ 的上凸壳。 因为 $A_i$ 存在负数，故斜率 $S_i$ 并不具有单调性，所以需要二分确定最优点的位置。 参考 斜率优化DP 斜率优化dp小结 代码[HNOI2008]玩具装箱TOY12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;bits/stdc++.h&gt;using namespace std;typedef double db;typedef long long ll;typedef vector&lt;int&gt; vi;typedef pair&lt;int, int&gt; pii;#define fi first#define se second#define pb push_back#define sz(x) ((int)(x).size())#define all(x) begin(x),end(x)#define rep(i,l,r) for(int i=(l);i&lt;(r);++i)#define per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)#define dd(x) cout &lt;&lt; #x &lt;&lt; \"=\" &lt;&lt; x &lt;&lt; \", \"#define de(x) cout &lt;&lt; #x &lt;&lt; \"=\" &lt;&lt; x &lt;&lt; endl//-------const int N = 5e5 + 7;int n, L, C[N];ll S[N], dp[N];struct P &#123; ll x, y; P() &#123;&#125; P(ll _x, ll _y) &#123; x = _x, y = _y; &#125; P operator-(const P &amp;p) const &#123; return P(x - p.x, y - p.y); &#125; ll operator^(const P &amp;p) const &#123; return x * p.y - y * p.x; &#125;&#125;;#define X(i) (i + S[i] + L + 1)#define Y(i) (dp[i] + X(i) * X(i))int main() &#123; scanf(\"%d%d\", &amp;n, &amp;L); rep(i, 1, n + 1) scanf(\"%d\", C + i); rep(i, 1, n + 1) S[i] = S[i - 1] + C[i]; deque&lt;P&gt; Q; Q.push_back(P(X(0), Y(0))); rep(i, 1, n + 1) &#123; ll g = 2 * (i + S[i]); while (sz(Q) &gt; 1 &amp;&amp; (Q[1].y - Q[0].y) &lt; (Q[1].x - Q[0].x) * g) Q.pop_front(); dp[i] = Q[0].y - g * Q[0].x + (i + S[i]) * (i + S[i]); P a(X(i), Y(i)); while (sz(Q) &gt; 1 &amp;&amp; ((Q[sz(Q) - 2] - a) ^ (Q.back() - a)) &lt;= 0) Q.pop_back(); Q.push_back(a); &#125; printf(\"%lld\", dp[n]); return 0;&#125; 小A与最大子段和12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;bits/stdc++.h&gt;using namespace std;typedef double db;typedef long long ll;typedef vector&lt;int&gt; vi;typedef pair&lt;int, int&gt; pii;#define fi first#define se second#define pb push_back#define sz(x) ((int)(x).size())#define all(x) begin(x),end(x)#define rep(i,l,r) for(int i=(l);i&lt;(r);++i)#define per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)#define dd(x) cout &lt;&lt; #x &lt;&lt; \"=\" &lt;&lt; x &lt;&lt; \", \"#define de(x) cout &lt;&lt; #x &lt;&lt; \"=\" &lt;&lt; x &lt;&lt; endl//-------const int N = 2e5 + 7;int n, a[N];ll S[N], V[N];#define X(i) (i)#define Y(i) (i * S[i] - V[i])struct P &#123; ll x, y; P() &#123;&#125; P(ll _x, ll _y) &#123; x = _x, y = _y; &#125; P operator-(const P &amp;p) const &#123; return P(x - p.x, y - p.y); &#125; ll operator^(const P &amp;p) const &#123; return x * p.y - y * p.x; &#125;&#125;;bool chk(deque&lt;P&gt; &amp;Q, int i, ll G) &#123; return (Q[i + 1].y - Q[i].y) &gt;= (Q[i + 1].x - Q[i].x) * G; &#125;int main() &#123; scanf(\"%d\", &amp;n); rep(i, 1, n + 1) scanf(\"%d\", a + i); rep(i, 1, n + 1) S[i] = S[i - 1] + a[i]; rep(i, 1, n + 1) V[i] = V[i - 1] + i * a[i]; deque&lt;P&gt; Q; Q.push_back(P(X(0), Y(0))); ll ans = LLONG_MIN; rep(i, 1, n + 1) &#123; // answer int l = 0, r = max(0, sz(Q) - 2); while (l + 1 &lt; r) &#123; int z = (l + r) &gt;&gt; 1; chk(Q, z, S[i]) ? l = z : r = z; &#125; int j = l; if (chk(Q, r, S[i])) j = r + 1; else if (chk(Q, l, S[i])) j = l + 1; else j = l; ll f = Q[j].y - S[i] * Q[j].x + V[i]; ans = max(ans, f); // maintain P a(X(i), Y(i)); while (sz(Q) &gt; 1 &amp;&amp; ((Q[sz(Q) - 2] - a) ^ (Q.back() - a)) &gt;= 0) Q.pop_back(); Q.push_back(a); &#125; printf(\"%lld\", ans); return 0;&#125;","categories":[],"tags":[{"name":"ICPC","slug":"ICPC","permalink":"http://mcginn7.github.io/tags/ICPC/"},{"name":"斜率优化","slug":"斜率优化","permalink":"http://mcginn7.github.io/tags/斜率优化/"}]},{"title":"Nowcoder-出题人的数组","slug":"Nowcoder-出题人的数组","date":"2019-03-31T12:11:49.000Z","updated":"2019-04-03T14:01:43.000Z","comments":true,"path":"2019/03/31/Nowcoder-出题人的数组/","link":"","permalink":"http://mcginn7.github.io/2019/03/31/Nowcoder-出题人的数组/","excerpt":"","text":"链接：https://ac.nowcoder.com/acm/contest/545/C来源：牛客网 题目描述出题人有两个数组 $A, B$，请你把两个数组归并起来使得 $Cost=∑i∗C_i$ 最小，要求两个原数组的顺序在新数组中保持不变。 输入描述第一行输入两个正整数 $n,m$，分别表示数组 $A, B$ 的长度。第二行输入 $n$ 个正整数，表示数组 $A$。第二行输入 $m$ 个正整数，表示数组 $B$ 。 输出描述一个正整数，表示最小代价 $Cost$。 示例 1输入输出3 31 3 52 6 475 备注$n, m \\le 100000$ $A_i, B_i \\le 100000$ 解题思路$O(nm)$ 动态规划很容易想到，但是复杂度太高且没有方法优化，那么就考虑贪心解法。 显然，合并后的数组 $C$ 格式为 $\\dots ABABA\\dots$，即一段 $A$ 接一段 $B$ 。 常见的贪心策略为，考虑相邻元素的交换是否会导致更优的结果。由于不能打乱原先的顺序，故总是后段的前缀替换前段的后缀，不失一般性，我们可以假设前段为 $A$，后段为 $B$。 记 $Cost(A) = \\sum_{i = 1} ^ {|A|}i\\times A_i$，则原先的贡献值为 $Cost(A)+Cost(B)+|A|\\times Sum(B)$，交换后的贡献值为 $Cost(A)+Cost(B)+|B|\\times Sum(A)$，则当 $|B|\\times Sum(A) \\lt |A|\\times Sum(B)$，即 \\frac{Sum(A)}{|A|} \\lt \\frac{Sum(B)}{|B|}也就是说，均值越大的段需要优先选择。 剩下的就是如何构造这些段，我们假设串 $A=A_1A_2$，当 $Average(A_1)\\lt Average(A_2)$ 时，在数组 $C$ 中总会合并成一段，根据这一性质在原数组中利用单调栈即可构造初始的段，之后就是从数组 $A,B​$ 贪心选择均值较大的段。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;bits/stdc++.h&gt;using namespace std;typedef double db;typedef long long ll;typedef vector&lt;int&gt; vi;typedef pair&lt;int, int&gt; pii;#define fi first#define se second#define pb push_back#define sz(x) ((int)(x).size())#define all(x) begin(x),end(x)#define rep(i,l,r) for(int i=(l);i&lt;(r);++i)#define per(i,l,r) for(int i=(r)-1;i&gt;=(l);--i)#define dd(x) cout &lt;&lt; #x &lt;&lt; \"=\" &lt;&lt; x &lt;&lt; \", \"#define de(x) cout &lt;&lt; #x &lt;&lt; \"=\" &lt;&lt; x &lt;&lt; endl//-------const int N = 1e5 + 7;int n, m, A[N], B[N];struct Node &#123; int num; ll sum; Node() &#123;&#125; Node(int _num, ll _sum) &#123; num = _num, sum = _sum; &#125; Node operator+(const Node &amp;p) const &#123; return Node(num + p.num, sum + p.sum); &#125; bool operator&lt;(const Node &amp;p) const &#123; return sum * p.num &lt; p.sum * num; &#125;&#125; a[N], b[N];int gao(int n, int *r, Node *a) &#123; int top = 0; rep(i, 0, n) &#123; scanf(\"%d\", r + i); Node v(1, r[i]); while (top &gt; 0 &amp;&amp; a[top - 1] &lt; v) v = a[--top] + v; a[top++] = v; &#125; return top;&#125;int main() &#123; scanf(\"%d%d\", &amp;n, &amp;m); int la = gao(n, A, a), lb = gao(m, B, b); n = m = 0; ll ans = 0; for (int i = 0, j = 0; i &lt; la || j &lt; lb; ) &#123; while (i &lt; la &amp;&amp; (j == lb || !(a[i] &lt; b[j]))) &#123; rep(k, n, n + a[i].num) ans += 1ll * (k + m + 1) * A[k]; n += a[i++].num; &#125; while (j &lt; lb &amp;&amp; (i == la || !(b[j] &lt; a[i]))) &#123; rep(k, m, m + b[j].num) ans += 1ll * (k + n + 1) * B[k]; m += b[j++].num; &#125; &#125; printf(\"%lld\\n\", ans); return 0;&#125;","categories":[],"tags":[{"name":"ICPC","slug":"ICPC","permalink":"http://mcginn7.github.io/tags/ICPC/"},{"name":"贪心","slug":"贪心","permalink":"http://mcginn7.github.io/tags/贪心/"}]},{"title":"论文笔记 Tips and Tricks for Visual Question Answering","slug":"论文笔记-Tips-and-Tricks-for-Visual-Question-Answering","date":"2018-10-09T03:24:19.000Z","updated":"2018-11-12T03:27:34.000Z","comments":true,"path":"2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/","link":"","permalink":"http://mcginn7.github.io/2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/","excerpt":"","text":"简介​ 该论文作者取得了 2017 VQA Challenge 的第一，总结一些 tips 和 tricks 来提升 VQA 的表现。 ​ 这篇论文的每个实验使用不同的随机种子重复3次实验来统计结果。 模型 一些细节 所有问题的长度固定 14。 问题特征 $q$ 与图像特征 $\\hat v$ 的融合使用 Hadamard product（逐项相乘）。 h = f_q(q) \\circ f_v(\\hat v) 目标函数（损失函数） L=-\\sum_i^M\\sum_j^N s_{ij}\\log (\\hat s_{ij})-(1-s_{ij})\\log(1-\\hat s_{ij}) 作者使用了额外的数据集 Visual Genome(VG)，共 485,000。 关键点Sigmoid output 输出使用 sigmoid 将每个类别（或答案）归一化。 softmax 也可以用来归一化，但是会变成单个类别输出，而 sigmoid 可以输出多个类。这样可以适应一个问题有多个答案的情况。 Soft scores as ground truth targets VQA 中问题答案附有置信度，将答案向量化有 2 种做法：1）使用固定阈值将答案二值化；2）使用 sigmoid 或 softmax 来归一化答案。 做法1）就是 hard scores，每个类只有 0、1 两个选项。做法2）就是 soft scores，每个类都有一个浮点数的得分。 作者使用了两个简单的二值化进行对比 s'_{ij}=(s_{ij}>0.0) \\\\ s'_{ij}=(s_{ij}==1.0) Gated tanh activations 使用 gated tanh activations 作为激活函数，而不是常用的 Rectified Linear Unit（ReLU）。 激活函数 $f_a: x \\in R^m \\rightarrow y \\in R^n$ \\tilde y = tanh(Wx + b) \\\\ g = \\sigma(W'x+b') \\\\ y = \\tilde y \\circ g$W,W’,b,b’$ 为训练参数，$\\circ$ 表示 Hadamard product（逐项相乘）。 该激活函数之前被用于自然语言处理。 Bottom up attention 使用 bottom up attention 来提取图像特征，而不是直接使用 CNN 的特征层（feature map）。 Bottom up attention 基于 Faster R-CNN 框架，提取若干 Region of Interest（RoI）的特征，继而通过非线性层做 attention。论文里使用阈值来筛选出 $K$ 个 RoI 并设置了 100 的上限（作者将数量 $K$ 固定为 36，表现会差一些，但是减少了计算开销）。 Attention 的非线性层 a_i=w_af_a(v_i, q) \\\\ \\alpha = softmax(a) \\\\ \\hat v = sum_{i=1}^K \\alpha_i v_i$q$ 为问题表示向量，$v_i$ 为 RoI 的特征向量。 使用 bottom up attention 相对于传统的 CNN 提取特征，提升是很明显的。 Pretrained representations to initialize 论文提出了加入先验知识 $w_o^{text}$ 和 $w_o^{img}$ 来初始化输出层参数 \\hat s = \\sigma(w_o^{text}f_o^{text}(h)+w_o^{img}f_o^{img}(h)) $w_o^{text}$ 使用 GloVe word embedding 初始化。 $w_o^{img}$ 使用谷歌图片搜索 10 张对应图片并用 ResNet-10 提取特征，10 个特征向量均值化得到最终的向量表示。 这个做法提升了大约 0.87 个点。 Larger mini-batches 通常来说，mini-batches 越大效果越好，但是大到一定程度后就不会有明显提升了，训练速度会慢。 Smart shufﬂing batch 通常从数据中随机抽取。针对 VQA 这个问题来说，同个问题关联到不同图像会得到不一样的答案（balanced pair），所以作者提出了 smart shuffling 控制 balanced pair 的比例。 这个做法 VQA 得分与随机做法差不多，但是提升了 Accuracy over paris。","categories":[],"tags":[]},{"title":"Windows 下使用 Vim","slug":"Vim-for-windows-配置","date":"2018-10-08T11:43:06.000Z","updated":"2019-04-03T13:44:50.000Z","comments":true,"path":"2018/10/08/Vim-for-windows-配置/","link":"","permalink":"http://mcginn7.github.io/2018/10/08/Vim-for-windows-配置/","excerpt":"","text":"简要说明主要针对 ACM/ICPC 竞赛选手在 Windows 10 系统下使用 vim 编写 C/C++ 代码。 功能配置： 编译和运行 *.cpp 文件； 一键复制代码; 记事本打开代码。 git bash 和 gvim 都配置了一遍。gvim 使用 Windows 自带的 cmd 运行的话，鼠标是没办法移动光标的，并且配置相对 git bash 较麻烦，所以推荐使用 git bash。 Git bash 配置 搜索并下载 “git for windows”。 编辑安装路径下的 vimrc 文件，例如 “D:\\Git\\etc\\vimrc”，配置快捷键。 1234567set nu ai ci si mouse=a ts=4 sts=4 sw=4nmap&lt;F2&gt; :vs %&lt;.in &lt;CR&gt;nmap&lt;F3&gt; :w !clip.exe &lt;CR&gt; &lt;CR&gt;nmap&lt;F4&gt; :!write % &lt;CR&gt;nmap&lt;F8&gt; :!./%&lt; &lt; %&lt;.in &lt;CR&gt;nmap&lt;F9&gt; :!g++ % -o %&lt; -O2 -g -Wall -std=c++11 &lt;CR&gt;au FileType c,cpp setlocal comments-=:// comments+=f:// au FileType c,cpp setlocal comments-=:// comments+=f:// —— 取消换行自动注释。 vimrc 文件默认有一些配置，可根据需要修改。 12set vb \"这个不关的话，触发某些条件会闪屏set laststatus=1 \"窗口底部状态栏的行数（默认是2），这里设置成1。","categories":[],"tags":[]},{"title":"DOMjudge 配置","slug":"DOMjudge配置","date":"2018-10-04T15:29:36.000Z","updated":"2019-05-21T07:05:41.000Z","comments":true,"path":"2018/10/04/DOMjudge配置/","link":"","permalink":"http://mcginn7.github.io/2018/10/04/DOMjudge配置/","excerpt":"","text":"Domserver 部署PHP timezone php.ini 文件位置 CentOS/RedHat/Fedora = /etc/php.ini Ubuntu/Debian/LinuxMint = /etc/php5/apache2/php.ini 选择时区，通常定位为 “Asia/Shanghai” PHP: List of Supported Timezones 编辑 php.ini 文件 1date.timezone = \"Asia/Shanghai\" 重启 Apache Service。 1sudo service apache2 restart MySQL maximum connections原先编辑 \\etc\\mysql\\my.cnf 添加 max_connections = 1000，然后重启 apache2 即可。但是设置后一直为 214，因为该值受限于 table_open_ache 和 open_files_limit。 下面的方法在 Ubuntu 16.04 和 MySQL 5.7.23 版本实验成功： 运行下面的命令，设置 open_files_limit 1systemctl edit mysql 输入以下内容 12[Service]LimitNOFILE=8000 重启服务 12systemctl daemon-reloadsystemctl restart mysql 数据导入测试数据导入在 Problems 页面下可以编辑 Problem name, Time limit 这些信息，测试数据（Testcases）在页面上只能单点添加和修改，并且不能删除。 批量导入测试数据步骤： 先添加题目，填入”Problem name”、”Time limit” 和 “Memory limit” 等信息，其余的保存默认即可，但是暂不添加 “Testcases”。 点击该题目的导出按钮，下载得到一个压缩包。解压后的文件夹内容如下： 12345678910// 在Windows使用 tree/f 生成该目录文本信息│ domjudge-problem.ini│ problem.yaml│├─data│ ├─sample│ └─secret│└─problem_statement problem.pdf 目录 sample 和 secret 可自行创建，两个目录存放样例数据和隐藏数据（即测试数据）。 将数据 “0.in”，“0.ans” 放入对应的文件夹下，重新压缩成新的压缩包。 在题目的编辑页面，通过 Upload problem archive 上传新压缩包。注意 Contest 选项选择为 Do not add / update contest data，否则可能会上传失败。 队伍账号导入 Domjudge队伍导入 - 参考链接 需要在 home &gt; import / export 页面下，导入 teams.tsv 和 accounts.tsv 这两个文件。在编辑这两个文件时，需要使用 UTF-8 格式，否则会上传失败或导致乱码。 teams.tsv 该文件用于描述队伍信息，包含一版本行，接着每个队伍占用一行，每行包括用制表符（tab）分隔的字段。 首行为版本行，格式如下： FieldDescriptionExampleType1Labelteamsfixed string (always same value)2Version number1integer 队伍描述行，格式如下： FieldDescriptionExampleType1Team Number22integer2External ID24314integer3Group ID3integer4Team nameHoosstring5Institution nameFuzhou Universitystring6Institution short nameFZUstring7Country CodeCHNstring ISO 3166-1 alpha-3 8Affiliation External IDFuzhou Universitystring Group ID 对应 Categories 中的 ID，表示队伍的角色，如女队、打星队等。 accounts.tsv 该文件用于描述账号信息，同样包含版本行和账号行，每个账号占用一行。 首行版本行的格式如下： FieldDescriptionExampleType1Labelaccountsfixed string (always same value)2Version number1integer 账号描述行的格式如下： FieldDescriptionExampleType1Account Typeteamstring2Full Namewtfstring3Usernameteam099string4PasswordB!5MWJiystring Account Type 取值为：team, judge, admin, analyst。这里要导入队伍账号，所以该字段在这固定为 team。 注意：需要设置 Username 的格式才能将账号和队伍关联起来，规则为：Username 的整数部分需要和 team.tsv 中的 Team Number 一致。比如一支队伍 Team Number 为 99，则 Username 可以设置为 team-099。 导入样例 team.tsv 文件 1234teams 18 team008 3 三核战队 福州大学 FZDX CHN 福州大学18 team018 3 挂机不队 福州大学 FZDX CHN 福州大学31 team031 3 这都是什么鬼 福州大学 FZDX CHN 福州大学 accounts.tsv 文件 1234accounts 1team 三核战队 team008 T3yRt3team 挂机不队 team018 86MFyBteam 这都是什么鬼 team031 RTJr6e 评测机Unprivileged user and group1234// 下面这条命令是必须运行的useradd -d /nonexistent -U -M -s /bin/false domjudge-run// X=1~4，X通常等同于CPU核心数useradd -d /nonexistent -U -M -s /bin/false domjudge-run-X Linux Control Groups 每次重启都需要运行 judgehost/bin/create_cgroups，否则提交会编译错误。 问题集锦1. 比赛正常需要几台机器？个人认为正常应该至少需要 4 台机器，配置较高的作为主服务器，即 DOMserver，提供比赛的 web 页面；一台打印服务器，也安装 DOMserver，但开放 print 页面，达到比赛与打印分开，减少宕机对选手的影响；两台评测机，即 Judgehost，这样如果一台宕机，也有另一台继续评测，而不是完全中断评测，并且修复后可随时上线新的评测机。 由于安装的机器较多且安装包大，建议使用 apt-offline 打包需要的安装包，节省安装时间。 2. 气球状态页面返回 500 错误正式比赛开始时，contest 只能留有一个比赛。（个人不知道原因）。 3. 测试数据上传失败可能需要修改的几个文件： /etc/apache2/conf-avaliable/domjudge.conf 123456&lt;IfModule mod_php7.c&gt;php_value max_file_uploads 101php_value upload_max_filesize 128Mphp_value post_max_size 128Mphp_value memory_limit 512M&lt;/IfModule&gt; /etc/mysql/my.cnf 1234[mysqld]max_connections = 10000max_allowed_packet = 512Minnodb_log_file_size = 512M 4. 如何让 DOMJudge 支持多台打印机？修改 domserver/webapp/src/DOMJudgeBundle/Utils/Printing.php 中 cmd 指令： 1234567$cmd = \"enscript -C \" . $highlight . \" -d \" . $printername // 指定打印机名 . \" -b \" . escapeshellarg($header) . \" -a 0-10 \" . \" -f Courier9 \"// . \" -p $tmp \" . escapeshellarg($filename) . \" 2&gt;&amp;1\"; 去除 -p $tmp ，添加 -d 参数，指定打印机打印。多台打印机则让打印机名轮转即可。","categories":[],"tags":[{"name":"domjudge","slug":"domjudge","permalink":"http://mcginn7.github.io/tags/domjudge/"}]},{"title":"论文笔记 Semantic Compositional Networks for Visual Captioning","slug":"论文笔记 Semantic Compositional Networks for Visual Captioning","date":"2018-08-18T12:58:18.000Z","updated":"2018-10-08T12:55:41.000Z","comments":true,"path":"2018/08/18/论文笔记 Semantic Compositional Networks for Visual Captioning/","link":"","permalink":"http://mcginn7.github.io/2018/08/18/论文笔记 Semantic Compositional Networks for Visual Captioning/","excerpt":"","text":"简介​ 该论文提出了语义组合网络(Semantic Compositional Network, SCN)，其有效利用语义概念（标签）来达到效果比较好的图文生成。 Semantic compositional networks 模型基础 使用CNN提取图像特征，RNN作文字生成。 文字生成的概率公式： p(\\bold X | \\bold I) = \\prod _{t=1}^Tp(x_t|x_0, \\dots , x_{t-1}, v) $ \\bold X = (x_1, \\dots , x_T)$ 表示文字序列，$v$ 为提取的图像特征。 LSTM的转换函数： h_t = \\sigma(Wx_{t-1}+Uh_{t-1}+\\mathbb{1}(t=1)\\cdot Cv)​ 图像特征仅在开始输入一次。 语义概念检测 作者将语义标签检测作为多标签分类问题。 首先先从训练集的文字说明中提取常见的 $K \\approx 1000$个单词作为分类标签 $y_i = [y_{i1}，\\dots，y_{iK}] \\in \\{0, 1\\}^K$。 标签$s_i$使用MLP来预测(Ps：这里可能是在CNN的基础上加入MLP)， s_i = \\sigma(MLP(v_i))$s_i$表示每个标签的概率，也可以理解为权重。 优化目标函数： \\frac 1N\\sum_{i=1}^N \\sum_{k=1}^K {(y_{ik}\\log s_{ik}+(1-y_{ik}\\log(1-s_{ik})))} SCN-RNN 这一步就是将语义标签嵌入到RNN中。 嵌入相关公式： \\hat x_{t-1}=W_bs\\bigodot W_cx_{t-1} \\\\ \\hat h_{t-1} = U_bs\\bigodot U_ch_{t-1} \\\\ z=\\mathbb{1}(t=1)\\cdot Cv \\\\ h_t = \\sigma(W_a\\hat x_{t-1} + U_a\\hat h_{t-1} + z) 视频文字生成(video caption) 视频的图像特征包括两部分：均值池化2D CNN提取的图像特征和3D CNN提取的特征，两个特征连接起来作为视频的图像特征。 结果 在数据集COCO和Youtube2Text的各个评估指标全面提升。","categories":[],"tags":[]},{"title":"The Binding of Isaac:Afterbirth+总结","slug":"The Binding of Isaac Afterbirth+总结","date":"2018-07-19T07:02:03.000Z","updated":"2018-07-21T07:20:04.000Z","comments":true,"path":"2018/07/19/The Binding of Isaac Afterbirth+总结/","link":"","permalink":"http://mcginn7.github.io/2018/07/19/The Binding of Isaac Afterbirth+总结/","excerpt":"","text":"献血袋：扣半颗红心（子宫层一颗），掉落随机数量（通常1）的硬币。献血袋很强，很容易刷起来。 手术刀：在地上制造褐色和蓝色两个通道并传送，传送出来时有短暂无敌，可以做到： 白嫖卖血机，喂黑小孩，进出刺房等； 进BOSS房和挑战房时，开箱子后直接传出去。 在白心的隐藏房，使用存血罐可以吐出白心。配合1+1和肉刀可以生成N多肉哥。 钥匙通常留给商店使用。 睫毛膏是负面道具，不要拿。 商店高概率刷出复眼（复制本房间的道具，未购买的道具也可以复制），最好等出了打折券再用。 20分钟内打败妈腿会开Boss Rush房；30分钟内打败妈心开启Blue Womb(蓝色子宫，打hush)房。使用MaMa Mega!可以强制开启br和bw。","categories":[],"tags":[]},{"title":"论文阅读记录","slug":"论文阅读记录","date":"2018-07-17T02:33:16.000Z","updated":"2018-07-17T02:57:19.000Z","comments":true,"path":"2018/07/17/论文阅读记录/","link":"","permalink":"http://mcginn7.github.io/2018/07/17/论文阅读记录/","excerpt":"","text":"2014 Generative Adversarial Networks An Annotated Proof of Generative Adversarial Networks with Implementation Notes Conditional Generative Adversarial Nets 2016 Conditional Image Synthesis With Auxiliary Classifier GANs InfoGAN: Interpretable Representation Learning by Information Maximizing Generative Adversarial Nets 2017 Wasserstein GAN 令人拍案叫绝的Wasserstein GAN Improved Training of Wasserstein GANs","categories":[],"tags":[]},{"title":"Ubuntu离线安装软件包","slug":"apt-offline管理Ubuntu离线安装软件包","date":"2018-06-05T11:27:37.000Z","updated":"2018-06-06T06:26:39.000Z","comments":true,"path":"2018/06/05/apt-offline管理Ubuntu离线安装软件包/","link":"","permalink":"http://mcginn7.github.io/2018/06/05/apt-offline管理Ubuntu离线安装软件包/","excerpt":"","text":"参考链接 apt-offline离线安装指南 https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/ http://manpages.ubuntu.com/manpages/precise/man8/apt-offline.8.html#contenttoc4 https://www.debian.org/ https://camicri.github.io/camicri-cube/#/ 应用场景 需要升级/安装软件的电脑无网络。 软件要安装到多台电脑上，且软件较大，下载时间长。 方案 由于apt-offline的安装有依赖，离线安装会失败，所以需要借助Camicri Cube来完成apt-offline的安装。 不用Camicri Cube完成全部安装是因为它貌似不支持命令行，只有可视化界面操作。如果安装的包较多，就比较麻烦。而apt-offline支持命令行操作，一次性可以打包多个安装包，比较方便。 Camicri Cube完成离线系统升级 在离线电脑上打开Camicri Cube，创建一个project，关闭后打包Cube目录下相应的project。 在联网电脑上，将打包文件解压到Cube目录下的project目录，然后用Cube打开这个project。 点击 Cube -&gt; Repository -&gt; Download Repositories 进行下载更新。 点击 Asterisk -&gt; Upgradable ， Cube -&gt; Download -&gt; Mark All Updates for Download ， Cube -&gt; Download -&gt; Download All Marked Packages ，就可以完成软件包的升级。 在上方的搜索框输入apt-offline和vim，点download进行下载。 在联网电脑的project打包后传到离线电脑上，覆盖原先的project，然后用Cube打开。 Cube -&gt; System -&gt; Update Computer’s Repositories 更新Repository。 Cube -&gt; Install -&gt; Mark All Downloaded for Installation , Cube -&gt; Install -&gt; Install All Marked Packages ，完成安装软件。 apt-offline下载及安装离线软件包 假设要在离线电脑安装mysql-server，先在离线电脑运行以下命令来，完成安装包的行为和定义签名文件： 1apt-offline set debian-install.sig --install-packages mysql-server 将生成的debian-install.sig文件上传到联网电脑执行下载并打包： 1apt-offline get debian-install.sig --bundle debian-install.zip 将打包好的debian-install.zip传到离线电脑上，运行下面的命令来更新APT database: 1sudo apt-offline install debian-install.zip 最后运行apt-get来完成安装： 1sudo apt-get install mysql-server","categories":[],"tags":[]}]}