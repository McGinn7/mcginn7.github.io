{"meta":{"title":"Mcginn's Blog","subtitle":null,"description":null,"author":"Mcginn","url":"http://mcginn7.github.io"},"pages":[],"posts":[{"title":"论文笔记 Tips and Tricks for Visual Question Answering","slug":"论文笔记-Tips-and-Tricks-for-Visual-Question-Answering","date":"2018-10-09T03:24:19.000Z","updated":"2018-11-12T03:27:34.887Z","comments":true,"path":"2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/","link":"","permalink":"http://mcginn7.github.io/2018/10/09/论文笔记-Tips-and-Tricks-for-Visual-Question-Answering/","excerpt":"","text":"简介​ 该论文作者取得了 2017 VQA Challenge 的第一，总结一些 tips 和 tricks 来提升 VQA 的表现。 ​ 这篇论文的每个实验使用不同的随机种子重复3次实验来统计结果。 模型 一些细节 所有问题的长度固定 14。 问题特征 $q$ 与图像特征 $\\hat v$ 的融合使用 Hadamard product（逐项相乘）。 h = f_q(q) \\circ f_v(\\hat v) 目标函数（损失函数） L=-\\sum_i^M\\sum_j^N s_{ij}\\log (\\hat s_{ij})-(1-s_{ij})\\log(1-\\hat s_{ij}) 作者使用了额外的数据集 Visual Genome(VG)，共 485,000。 关键点Sigmoid output 输出使用 sigmoid 将每个类别（或答案）归一化。 softmax 也可以用来归一化，但是会变成单个类别输出，而 sigmoid 可以输出多个类。这样可以适应一个问题有多个答案的情况。 Soft scores as ground truth targets VQA 中问题答案附有置信度，将答案向量化有 2 种做法：1）使用固定阈值将答案二值化；2）使用 sigmoid 或 softmax 来归一化答案。 做法1）就是 hard scores，每个类只有 0、1 两个选项。做法2）就是 soft scores，每个类都有一个浮点数的得分。 作者使用了两个简单的二值化进行对比 s'_{ij}=(s_{ij}>0.0) \\\\ s'_{ij}=(s_{ij}==1.0) Gated tanh activations 使用 gated tanh activations 作为激活函数，而不是常用的 Rectified Linear Unit（ReLU）。 激活函数 $f_a: x \\in R^m \\rightarrow y \\in R^n$ \\tilde y = tanh(Wx + b) \\\\ g = \\sigma(W'x+b') \\\\ y = \\tilde y \\circ g$W,W’,b,b’$ 为训练参数，$\\circ$ 表示 Hadamard product（逐项相乘）。 该激活函数之前被用于自然语言处理。 Bottom up attention 使用 bottom up attention 来提取图像特征，而不是直接使用 CNN 的特征层（feature map）。 Bottom up attention 基于 Faster R-CNN 框架，提取若干 Region of Interest（RoI）的特征，继而通过非线性层做 attention。论文里使用阈值来筛选出 $K$ 个 RoI 并设置了 100 的上限（作者将数量 $K$ 固定为 36，表现会差一些，但是减少了计算开销）。 Attention 的非线性层 a_i=w_af_a(v_i, q) \\\\ \\alpha = softmax(a) \\\\ \\hat v = sum_{i=1}^K \\alpha_i v_i$q$ 为问题表示向量，$v_i$ 为 RoI 的特征向量。 使用 bottom up attention 相对于传统的 CNN 提取特征，提升是很明显的。 Pretrained representations to initialize 论文提出了加入先验知识 $w_o^{text}$ 和 $w_o^{img}$ 来初始化输出层参数 \\hat s = \\sigma(w_o^{text}f_o^{text}(h)+w_o^{img}f_o^{img}(h)) $w_o^{text}$ 使用 GloVe word embedding 初始化。 $w_o^{img}$ 使用谷歌图片搜索 10 张对应图片并用 ResNet-10 提取特征，10 个特征向量均值化得到最终的向量表示。 这个做法提升了大约 0.87 个点。 Larger mini-batches 通常来说，mini-batches 越大效果越好，但是大到一定程度后就不会有明显提升了，训练速度会慢。 Smart shufﬂing batch 通常从数据中随机抽取。针对 VQA 这个问题来说，同个问题关联到不同图像会得到不一样的答案（balanced pair），所以作者提出了 smart shuffling 控制 balanced pair 的比例。 这个做法 VQA 得分与随机做法差不多，但是提升了 Accuracy over paris。","categories":[],"tags":[]},{"title":"Windows下使用Vim","slug":"Vim-for-windows-配置","date":"2018-10-08T11:43:06.000Z","updated":"2018-10-30T01:57:25.743Z","comments":true,"path":"2018/10/08/Vim-for-windows-配置/","link":"","permalink":"http://mcginn7.github.io/2018/10/08/Vim-for-windows-配置/","excerpt":"","text":"目标​ 配置主要针对ACM/ICPC竞赛选手在windows系统下使用vim。 ​ 配置：1) 编译和运行*.cpp文件；2) 一键复制代码; 3) 记事本打开代码。 ​ ​ Git bash和gvim都配置了一遍。gvim使用windows自带的cmd运行的话，鼠标是没办法移动光标的，并且配置相对git bash较麻烦，所以推荐使用git bash。 Git bash 搜索并下载”git for windows”。 编辑”D:\\Git\\etc/vimrc”，配置快捷键。 1234567set nu ai ci si mouse=a ts=4 sts=4 sw=4nmap&lt;F2&gt; :vs %&lt;.in &lt;CR&gt;nmap&lt;F3&gt; :w !clip.exe &lt;CR&gt; &lt;CR&gt;nmap&lt;F4&gt; :!write % &lt;CR&gt;nmap&lt;F8&gt; :!./%&lt; &lt; %&lt;.in &lt;CR&gt;nmap&lt;F9&gt; :!g++ % -o %&lt; -O2 -g -Wall -std=c++11 &lt;CR&gt;au FileType c,cpp setlocal comments-=:// comments+=f:// au FileType c,cpp setlocal comments-=:// comments+=f:// —— 取消换行自动注释。 vimrc默认有一些配置，去掉了一些我个人觉得没啥用的设置。 12set vb \"这个不关的话，触发某些条件会一直闪屏set laststatus=1 \"窗口底部状态栏的行数（默认是2），我设置成1。 vim for windows安装、配置 搜索”vim for windows“， 下载并安装vim（此处安装的版本为Vim 8.1）。 1234D:\\VIM│ _vimrc├─ vim81├─ vimfiles 将安装目录下的vim81添加到环境变量 &gt; 系统变量 &gt; Path中，以上述结构为例，路径为”D:\\Vim\\vim81”。 编辑”_vimrc”文件，添加以下内容。 123456set nu ai ci si mouse=a ts=4 sts=4 sw=4nmap&lt;F2&gt; :vs %&lt;.in &lt;CR&gt; nmap&lt;F3&gt; ggVG\"+y &lt;CR&gt; nmap&lt;F4&gt; :!write % &lt;CR&gt; nmap&lt;F8&gt; :!%&lt; &lt; %&lt;.in &lt;CR&gt; nmap&lt;F9&gt; :!g++ % -o %&lt; -O2 -g -Wall -std=c++11 &lt;CR&gt; cmd配置字体 下载并安装Microsoft YaHei Mono字体，下载链接http://files.cnblogs.com/files/kischn/Microsoft_YaHei_Mono.7z 编辑注册表来添加cmd可选择字体，将下述内容保存为add.reg并双击运行。 12Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Console\\TrueTypeFont]&quot;936&quot;=&quot;*Microsoft YaHei Mono&quot; 运行完成后可将该add.reg删除。 右键cmd窗口，属性 &gt; 字体 &gt; Microsoft YaHei Mono。 命令别名 cmd的一些命令与Ubuntu不同，所以设置别名来消除差异。 cmd设置别名的命令为”doskey” 将以下内容保存为“cmd_doskey.bat” 123@doskey rm=del $*@doskey ls=dir /b $*@doskey clear=cls 将上述脚本写入注册表以自动运行。将下述内容保存为autorun.reg。 1234Windows Registry Editor Version 5.00[HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor]\"AutoRun\"=\"C:\\\\cmd_doskey.bat\" AutoRun需要改成cmd_doskey.bat的路径，之后双击运行autorun.reg。","categories":[],"tags":[]},{"title":"DOMjudge配置","slug":"DOMjudge配置","date":"2018-10-04T15:29:36.000Z","updated":"2018-10-07T05:58:00.716Z","comments":true,"path":"2018/10/04/DOMjudge配置/","link":"","permalink":"http://mcginn7.github.io/2018/10/04/DOMjudge配置/","excerpt":"","text":"系统环境为 Debbian GNU/Linux 9 (stretch) 64-bit。 Domserver部署安装遇到的问题在Web server configuration中， 1ln -s etc/apache.conf /etc/apache2/conf-available/domjudge.conf 原文件路径(etc/apache.conf)需要写成完整路径，否则运行 a2enconf domjudge 会出现文件不存在错误。实际使用命令： 1ln -s /home/mcginn/domjudge/domserver/etc/apache.conf /etc/apache2/conf-available/domjudge.conf PHP timezone php.ini文件位置 CentOS/RedHat/Fedora = /etc/php.ini Ubuntu/Debian/LinuxMint = /etc/php5/apache2/php.ini 选择时区，通常定位为”Asia/Shanghai” PHP: List of Supported Timezones 编辑php.ini文件 1date.timezone = \"Asia/Shanghai\" 重启Apache Service。 1sudo service apache2 restart MySQL maximum connections​ 原先编辑 \\etc\\mysql\\my.cnf 添加 max_connections = 1000，然后重启apache2即可。但是设置后一直为214，因为该值受限于table_open_ache和open_files_limit。 ​ 下面的方法在Ubuntu 16.04和MySQL 5.7.23版本实验成功： 运行下面的命令，设置open_files_limit 1systemctl edit mysql 输入以下内容 12[Service]LimitNOFILE=8000 重启服务 12systemctl daemon-reloadsystemctl restart mysql 数据导入测试数据导入​ 在Problems页面下可以编辑Problem name, Time limit这些信息，测试数据(Testcases)在页面上只能单点添加和修改，并且不能删除。 ​ 批量导入测试数据步骤： 先添加题目，填入”Problem name”、”Time limit”和”Memory limit”等信息，其余的保存默认即可，但是暂不添加”Testcases”。 点击该题目的导出按钮，下载得到一个压缩包。解压后的文件夹内容如下： 12345678910// 在Windows使用 tree/f 生成该目录文本信息│ domjudge-problem.ini│ problem.yaml│├─data│ ├─sample│ └─secret│└─problem_statement problem.pdf 目录sample和secret需要自行创建，两个目录存放样例数据和测试数据。 将数据”0.in”，“0.ans”放入对应的文件夹下，重新压缩成新的压缩包。 在题目的编辑页面，通过Upload problem archive上传新压缩包。注意Contest选项选择为Do not add / update contest data，否则可能会上传失败。 队伍账号导入 Domjudge队伍导入 - 参考链接 需要在home &gt; import / export页面下，导入teams.tsv和accounts.tsv这两个文件。 两个文件的格式在前面的参考连接中。team和user通过external ID进行关联。在编辑这两个文件时，需要使用UTF-8格式，否则会上传失败或导致乱码。 teams.tsv格式： 12teams 1team_id external_ID group_id team_name institution_name institution_short_name country_code groupd_id固定为3，表示是participants（参赛人员）。 external_ID需要和accounts.tsv中的username相同。 accounts.tsv格式： 12accounts 1account_type fullname username password account_type的值为：team, judge, admin, analyst。因为是要导入队伍，所以这里固定为team。 username需要与teams.tsv的external_ID相同才能对应到队伍上。 评测机Unprivileged user and group1234// 下面这条命令是必须运行的useradd -d /nonexistent -U -M -s /bin/false domjudge-run// X=1~4，X通常等同于CPU核心数useradd -d /nonexistent -U -M -s /bin/false domjudge-run-X Sudo permissions​ Runguard在某些操作需要root权限，需要把judgehost/etc/sudoers-domjudge复制到/etc/sudoers.d/目录 1sudo cp $JUDGEHOST_PATH/etc/sudoers-domjudge /etc/sudoers.d/ Creating a chroot environment 需要联网运行bin/dj_make_chroot，安装相应的依赖包。 Linux Control Groups 每次重启都需要运行judgehost/bin/create_cgroups，否则提交会编译错误。","categories":[],"tags":[]},{"title":"论文笔记 Semantic Compositional Networks for Visual Captioning","slug":"论文笔记 Semantic Compositional Networks for Visual Captioning","date":"2018-08-18T12:58:18.000Z","updated":"2018-10-08T12:55:41.089Z","comments":true,"path":"2018/08/18/论文笔记 Semantic Compositional Networks for Visual Captioning/","link":"","permalink":"http://mcginn7.github.io/2018/08/18/论文笔记 Semantic Compositional Networks for Visual Captioning/","excerpt":"","text":"简介​ 该论文提出了语义组合网络(Semantic Compositional Network, SCN)，其有效利用语义概念（标签）来达到效果比较好的图文生成。 Semantic compositional networks 模型基础 使用CNN提取图像特征，RNN作文字生成。 文字生成的概率公式： p(\\bold X | \\bold I) = \\prod _{t=1}^Tp(x_t|x_0, \\dots , x_{t-1}, v) $ \\bold X = (x_1, \\dots , x_T)$ 表示文字序列，$v$ 为提取的图像特征。 LSTM的转换函数： h_t = \\sigma(Wx_{t-1}+Uh_{t-1}+\\mathbb{1}(t=1)\\cdot Cv)​ 图像特征仅在开始输入一次。 语义概念检测 作者将语义标签检测作为多标签分类问题。 首先先从训练集的文字说明中提取常见的 $K \\approx 1000$个单词作为分类标签 $y_i = [y_{i1}，\\dots，y_{iK}] \\in \\{0, 1\\}^K$。 标签$s_i$使用MLP来预测(Ps：这里可能是在CNN的基础上加入MLP)， s_i = \\sigma(MLP(v_i))$s_i$表示每个标签的概率，也可以理解为权重。 优化目标函数： \\frac 1N\\sum_{i=1}^N \\sum_{k=1}^K {(y_{ik}\\log s_{ik}+(1-y_{ik}\\log(1-s_{ik})))} SCN-RNN 这一步就是将语义标签嵌入到RNN中。 嵌入相关公式： \\hat x_{t-1}=W_bs\\bigodot W_cx_{t-1} \\\\ \\hat h_{t-1} = U_bs\\bigodot U_ch_{t-1} \\\\ z=\\mathbb{1}(t=1)\\cdot Cv \\\\ h_t = \\sigma(W_a\\hat x_{t-1} + U_a\\hat h_{t-1} + z) 视频文字生成(video caption) 视频的图像特征包括两部分：均值池化2D CNN提取的图像特征和3D CNN提取的特征，两个特征连接起来作为视频的图像特征。 结果 在数据集COCO和Youtube2Text的各个评估指标全面提升。","categories":[],"tags":[]},{"title":"The Binding of Isaac:Afterbirth+总结","slug":"The Binding of Isaac Afterbirth+总结","date":"2018-07-19T07:02:03.000Z","updated":"2018-07-21T07:20:04.070Z","comments":true,"path":"2018/07/19/The Binding of Isaac Afterbirth+总结/","link":"","permalink":"http://mcginn7.github.io/2018/07/19/The Binding of Isaac Afterbirth+总结/","excerpt":"","text":"献血袋：扣半颗红心（子宫层一颗），掉落随机数量（通常1）的硬币。献血袋很强，很容易刷起来。 手术刀：在地上制造褐色和蓝色两个通道并传送，传送出来时有短暂无敌，可以做到： 白嫖卖血机，喂黑小孩，进出刺房等； 进BOSS房和挑战房时，开箱子后直接传出去。 在白心的隐藏房，使用存血罐可以吐出白心。配合1+1和肉刀可以生成N多肉哥。 钥匙通常留给商店使用。 睫毛膏是负面道具，不要拿。 商店高概率刷出复眼（复制本房间的道具，未购买的道具也可以复制），最好等出了打折券再用。 20分钟内打败妈腿会开Boss Rush房；30分钟内打败妈心开启Blue Womb(蓝色子宫，打hush)房。使用MaMa Mega!可以强制开启br和bw。","categories":[],"tags":[]},{"title":"论文阅读记录","slug":"论文阅读记录","date":"2018-07-17T02:33:16.000Z","updated":"2018-07-17T02:57:19.822Z","comments":true,"path":"2018/07/17/论文阅读记录/","link":"","permalink":"http://mcginn7.github.io/2018/07/17/论文阅读记录/","excerpt":"","text":"2014 Generative Adversarial Networks An Annotated Proof of Generative Adversarial Networks with Implementation Notes Conditional Generative Adversarial Nets 2016 Conditional Image Synthesis With Auxiliary Classifier GANs InfoGAN: Interpretable Representation Learning by Information Maximizing Generative Adversarial Nets 2017 Wasserstein GAN 令人拍案叫绝的Wasserstein GAN Improved Training of Wasserstein GANs","categories":[],"tags":[]},{"title":"Ubuntu离线安装软件包","slug":"apt-offline管理Ubuntu离线安装软件包","date":"2018-06-05T11:27:37.000Z","updated":"2018-06-06T06:26:39.635Z","comments":true,"path":"2018/06/05/apt-offline管理Ubuntu离线安装软件包/","link":"","permalink":"http://mcginn7.github.io/2018/06/05/apt-offline管理Ubuntu离线安装软件包/","excerpt":"","text":"参考链接 apt-offline离线安装指南 https://blog.sleeplessbeastie.eu/2014/01/30/how-to-manage-packages-on-an-off-line-debian-system/ http://manpages.ubuntu.com/manpages/precise/man8/apt-offline.8.html#contenttoc4 https://www.debian.org/ https://camicri.github.io/camicri-cube/#/ 应用场景 需要升级/安装软件的电脑无网络。 软件要安装到多台电脑上，且软件较大，下载时间长。 方案 由于apt-offline的安装有依赖，离线安装会失败，所以需要借助Camicri Cube来完成apt-offline的安装。 不用Camicri Cube完成全部安装是因为它貌似不支持命令行，只有可视化界面操作。如果安装的包较多，就比较麻烦。而apt-offline支持命令行操作，一次性可以打包多个安装包，比较方便。 Camicri Cube完成离线系统升级 在离线电脑上打开Camicri Cube，创建一个project，关闭后打包Cube目录下相应的project。 在联网电脑上，将打包文件解压到Cube目录下的project目录，然后用Cube打开这个project。 点击 Cube -&gt; Repository -&gt; Download Repositories 进行下载更新。 点击 Asterisk -&gt; Upgradable ， Cube -&gt; Download -&gt; Mark All Updates for Download ， Cube -&gt; Download -&gt; Download All Marked Packages ，就可以完成软件包的升级。 在上方的搜索框输入apt-offline和vim，点download进行下载。 在联网电脑的project打包后传到离线电脑上，覆盖原先的project，然后用Cube打开。 Cube -&gt; System -&gt; Update Computer’s Repositories 更新Repository。 Cube -&gt; Install -&gt; Mark All Downloaded for Installation , Cube -&gt; Install -&gt; Install All Marked Packages ，完成安装软件。 apt-offline下载及安装离线软件包 假设要在离线电脑安装mysql-server，先在离线电脑运行以下命令来，完成安装包的行为和定义签名文件： 1apt-offline set debian-install.sig --install-packages mysql-server 将生成的debian-install.sig文件上传到联网电脑执行下载并打包： 1apt-offline get debian-install.sig --bundle debian-install.zip 将打包好的debian-install.zip传到离线电脑上，运行下面的命令来更新APT database: 1sudo apt-offline install debian-install.zip 最后运行apt-get来完成安装： 1sudo apt-get install mysql-server","categories":[],"tags":[]}]}